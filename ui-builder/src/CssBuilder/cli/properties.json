{
    "list": [
        "z-index",
        "page-break-before",
        "page-break-after",
        "page-break-inside",
        "cx",
        "cy",
        "r",
        "rx",
        "ry",
        "x",
        "y",
        "vector-effect",
        "d",
        "shape-subtract",
        "text-anchor",
        "fill",
        "stroke",
        "marker-start",
        "marker-mid",
        "marker-end",
        "marker",
        "paint-order",
        "color-interpolation",
        "shape-rendering",
        "text-rendering",
        "pointer-events",
        "stop-color",
        "stop-opacity",
        "touch-action",
        "mix-blend-mode",
        "isolation",
        "background-blend-mode",
        "align-content",
        "justify-content",
        "place-content",
        "justify-self",
        "align-self",
        "place-self",
        "justify-items",
        "align-items",
        "place-items",
        "row-gap",
        "column-gap",
        "gap",
        "grid-row-gap",
        "grid-column-gap",
        "grid-gap",
        "anchor-scroll",
        "anchor-name",
        "anchor-default",
        "position-fallback",
        "animation-duration",
        "animation-composition",
        "animation-timeline",
        "animation-name",
        "animation-duration",
        "animation-timing-function",
        "animation-iteration-count",
        "animation-direction",
        "animation-play-state",
        "animation-delay",
        "animation-fill-mode",
        "animation",
        "background-position",
        "background-position-x",
        "background-position-y",
        "background-position-inline",
        "background-position-block",
        "background-clip",
        "border-top-color",
        "border-right-color",
        "border-bottom-color",
        "border-left-color",
        "border-color",
        "border-top-radius",
        "border-right-radius",
        "border-bottom-radius",
        "border-left-radius",
        "border-block-start-radius",
        "border-block-end-radius",
        "border-inline-start-radius",
        "border-inline-end-radius",
        "border-radius",
        "corner-shape",
        "corners",
        "border-limit",
        "border-clip",
        "border-clip-top",
        "border-clip-right",
        "border-clip-bottom",
        "border-clip-left",
        "box-shadow-color",
        "box-shadow-offset",
        "box-shadow-blur",
        "box-shadow-spread",
        "box-shadow-position",
        "box-shadow",
        "background-color",
        "background-image",
        "background-repeat",
        "background-attachment",
        "background-position",
        "background-clip",
        "background-origin",
        "background-size",
        "background",
        "border-top-color",
        "border-right-color",
        "border-bottom-color",
        "border-left-color",
        "border-color",
        "border-top-style",
        "border-right-style",
        "border-bottom-style",
        "border-left-style",
        "border-style",
        "border-top-width",
        "border-right-width",
        "border-bottom-width",
        "border-left-width",
        "border-width",
        "border-top",
        "border-right",
        "border-bottom",
        "border-left",
        "border",
        "border-top-left-radius",
        "border-top-right-radius",
        "border-bottom-right-radius",
        "border-bottom-left-radius",
        "border-radius",
        "border-image-source",
        "border-image-slice",
        "border-image-width",
        "border-image-outset",
        "border-image-repeat",
        "border-image",
        "box-shadow",
        "margin-top",
        "margin-right",
        "margin-bottom",
        "margin-left",
        "margin",
        "margin-trim",
        "padding-top",
        "padding-right",
        "padding-bottom",
        "padding-left",
        "padding",
        "break-before",
        "break-after",
        "break-inside",
        "orphans",
        "widows",
        "margin-break",
        "box-decoration-break",
        "all",
        "color-scheme",
        "forced-color-adjust",
        "print-color-adjust",
        "color-adjust",
        "color",
        "opacity",
        "contain",
        "container-type",
        "container-name",
        "container",
        "contain",
        "content-visibility",
        "content",
        "quotes",
        "string-set",
        "bookmark-level",
        "bookmark-label",
        "bookmark-state",
        "display",
        "order",
        "reading-order",
        "layout-order",
        "visibility",
        "wrap-flow",
        "wrap-through",
        "flex-direction",
        "flex-wrap",
        "flex-flow",
        "flex",
        "flex-grow",
        "flex-shrink",
        "flex-basis",
        "font-size-adjust",
        "font-family",
        "font-weight",
        "font-stretch",
        "font-style",
        "font-size",
        "font-size-adjust",
        "font",
        "font-synthesis-weight",
        "font-synthesis-style",
        "font-synthesis-small-caps",
        "font-synthesis",
        "font-kerning",
        "font-variant-ligatures",
        "font-variant-position",
        "font-variant-caps",
        "font-variant-numeric",
        "font-variant-alternates",
        "font-variant-east-asian",
        "font-variant",
        "font-feature-settings",
        "font-language-override",
        "font-optical-sizing",
        "font-variation-settings",
        "font-palette",
        "font-variant-emoji",
        "copy-into",
        "position",
        "content",
        "float",
        "footnote-display",
        "footnote-policy",
        "grid-template-columns",
        "grid-template-rows",
        "masonry-auto-flow",
        "align-tracks",
        "justify-tracks",
        "grid-template-columns",
        "grid-template-rows",
        "grid-template-areas",
        "grid-template",
        "grid-auto-columns",
        "grid-auto-rows",
        "grid-auto-flow",
        "grid",
        "grid-row-start",
        "grid-column-start",
        "grid-row-end",
        "grid-column-end",
        "grid-row",
        "grid-column",
        "grid-area",
        "object-fit",
        "image-resolution",
        "object-view-box",
        "object-fit",
        "object-position",
        "image-orientation",
        "image-rendering",
        "dominant-baseline",
        "vertical-align",
        "baseline-source",
        "alignment-baseline",
        "baseline-shift",
        "line-height",
        "text-edge",
        "leading-trim",
        "inline-sizing",
        "initial-letter",
        "initial-letter-align",
        "initial-letter-wrap",
        "line-grid",
        "line-snap",
        "box-snap",
        "link-parameters",
        "list-style-image",
        "list-style-type",
        "list-style-position",
        "list-style",
        "marker-side",
        "counter-reset",
        "counter-increment",
        "counter-set",
        "block-size",
        "inline-size",
        "min-block-size",
        "min-inline-size",
        "max-block-size",
        "max-inline-size",
        "margin-block-start",
        "margin-block-end",
        "margin-inline-start",
        "margin-inline-end",
        "margin-block",
        "margin-inline",
        "padding-block-start",
        "padding-block-end",
        "padding-inline-start",
        "padding-inline-end",
        "padding-block",
        "padding-inline",
        "border-block-start-width",
        "border-block-end-width",
        "border-inline-start-width",
        "border-inline-end-width",
        "border-block-width",
        "border-inline-width",
        "border-block-start-style",
        "border-block-end-style",
        "border-inline-start-style",
        "border-inline-end-style",
        "border-block-style",
        "border-inline-style",
        "border-block-start-color",
        "border-block-end-color",
        "border-inline-start-color",
        "border-inline-end-color",
        "border-block-color",
        "border-inline-color",
        "border-block-start",
        "border-block-end",
        "border-inline-start",
        "border-inline-end",
        "border-block",
        "border-inline",
        "border-start-start-radius",
        "border-start-end-radius",
        "border-end-start-radius",
        "border-end-end-radius",
        "clip-path",
        "clip-rule",
        "mask-image",
        "mask-mode",
        "mask-repeat",
        "mask-position",
        "mask-clip",
        "mask-origin",
        "mask-size",
        "mask-composite",
        "mask",
        "mask-border-source",
        "mask-border-mode",
        "mask-border-slice",
        "mask-border-width",
        "mask-border-outset",
        "mask-border-repeat",
        "mask-border",
        "mask-type",
        "clip",
        "column-span",
        "column-width",
        "column-count",
        "columns",
        "column-rule-color",
        "column-rule-style",
        "column-rule-width",
        "column-rule",
        "column-span",
        "column-fill",
        "spatial-navigation-contain",
        "spatial-navigation-action",
        "spatial-navigation-function",
        "overflow-clip-margin-top",
        "overflow-clip-margin-right",
        "overflow-clip-margin-bottom",
        "overflow-clip-margin-left",
        "overflow-clip-margin-block-start",
        "overflow-clip-margin-inline-start",
        "overflow-clip-margin-block-end",
        "overflow-clip-margin-inline-end",
        "overflow-clip-margin",
        "overflow-clip-margin-inline",
        "overflow-clip-margin-block",
        "text-overflow",
        "block-ellipsis",
        "line-clamp",
        "continue",
        "max-lines",
        "overflow-x",
        "overflow-y",
        "overflow-block",
        "overflow-inline",
        "overflow",
        "overflow-clip-margin",
        "scroll-behavior",
        "scrollbar-gutter",
        "text-overflow",
        "overscroll-behavior",
        "overscroll-behavior-x",
        "overscroll-behavior-y",
        "overscroll-behavior-inline",
        "overscroll-behavior-block",
        "float-reference",
        "float",
        "clear",
        "float-defer",
        "float-offset",
        "page",
        "position",
        "top",
        "right",
        "bottom",
        "left",
        "inset-block-start",
        "inset-inline-start",
        "inset-block-end",
        "inset-inline-end",
        "inset-block",
        "inset-inline",
        "inset",
        "flow-into",
        "flow-from",
        "region-fragment",
        "block-step-size",
        "block-step-insert",
        "block-step-align",
        "block-step-round",
        "block-step",
        "line-height-step",
        "border-boundary",
        "ruby-position",
        "ruby-merge",
        "ruby-align",
        "ruby-overhang",
        "overflow-anchor",
        "scroll-start",
        "scroll-start-target",
        "scroll-start-x",
        "scroll-start-y",
        "scroll-start-inline",
        "scroll-start-block",
        "scroll-snap-type",
        "scroll-padding",
        "scroll-margin",
        "scroll-snap-align",
        "scroll-snap-stop",
        "scroll-padding-top",
        "scroll-padding-right",
        "scroll-padding-bottom",
        "scroll-padding-left",
        "scroll-padding-inline-start",
        "scroll-padding-block-start",
        "scroll-padding-inline-end",
        "scroll-padding-block-end",
        "scroll-padding-block",
        "scroll-padding-inline",
        "scroll-margin-top",
        "scroll-margin-right",
        "scroll-margin-bottom",
        "scroll-margin-left",
        "scroll-margin-block-start",
        "scroll-margin-inline-start",
        "scroll-margin-block-end",
        "scroll-margin-inline-end",
        "scroll-margin-block",
        "scroll-margin-inline",
        "scrollbar-color",
        "scrollbar-width",
        "shape-inside",
        "shape-padding",
        "shape-outside",
        "shape-image-threshold",
        "shape-margin",
        "text-size-adjust",
        "width",
        "height",
        "inline-size",
        "block-size",
        "min-width",
        "min-height",
        "min-inline-size",
        "min-block-size",
        "max-width",
        "max-height",
        "max-inline-size",
        "max-block-size",
        "aspect-ratio",
        "contain-intrinsic-width",
        "contain-intrinsic-height",
        "contain-intrinsic-block-size",
        "contain-intrinsic-inline-size",
        "contain-intrinsic-size",
        "min-intrinsic-sizing",
        "width",
        "height",
        "min-width",
        "min-height",
        "max-width",
        "max-height",
        "box-sizing",
        "column-width",
        "voice-volume",
        "voice-balance",
        "speak",
        "speak-as",
        "pause-before",
        "pause-after",
        "pause",
        "rest-before",
        "rest-after",
        "rest",
        "cue-before",
        "cue-after",
        "cue",
        "voice-family",
        "voice-rate",
        "voice-pitch",
        "voice-range",
        "voice-stress",
        "voice-duration",
        "table-layout",
        "border-collapse",
        "border-spacing",
        "caption-side",
        "empty-cells",
        "text-transform",
        "word-boundary-detection",
        "word-boundary-expansion",
        "white-space",
        "white-space-collapse",
        "text-space-trim",
        "tab-size",
        "word-break",
        "line-break",
        "hyphens",
        "hyphenate-character",
        "hyphenate-limit-zone",
        "hyphenate-limit-chars",
        "hyphenate-limit-lines",
        "hyphenate-limit-last",
        "overflow-wrap",
        "word-wrap",
        "text-wrap",
        "wrap-before",
        "wrap-after",
        "wrap-inside",
        "text-align",
        "text-align-all",
        "text-align-last",
        "text-justify",
        "text-group-align",
        "word-spacing",
        "letter-spacing",
        "line-padding",
        "text-autospace",
        "text-spacing-trim",
        "text-spacing",
        "text-indent",
        "hanging-punctuation",
        "text-decoration-line",
        "text-decoration-style",
        "text-decoration-color",
        "text-decoration-thickness",
        "text-decoration",
        "text-underline-position",
        "text-underline-offset",
        "text-decoration-trim",
        "text-decoration-skip",
        "text-decoration-skip-self",
        "text-decoration-skip-box",
        "text-decoration-skip-spaces",
        "text-decoration-skip-ink",
        "text-emphasis-style",
        "text-emphasis-color",
        "text-emphasis",
        "text-emphasis-position",
        "text-emphasis-skip",
        "text-shadow",
        "text-decoration-line",
        "text-decoration-style",
        "text-decoration-color",
        "text-decoration",
        "text-underline-position",
        "text-emphasis-style",
        "text-emphasis-color",
        "text-emphasis",
        "text-emphasis-position",
        "text-shadow",
        "text-transform",
        "white-space",
        "tab-size",
        "word-break",
        "line-break",
        "hyphens",
        "overflow-wrap",
        "word-wrap",
        "text-align",
        "text-align-all",
        "text-align-last",
        "text-justify",
        "word-spacing",
        "letter-spacing",
        "text-indent",
        "hanging-punctuation",
        "translate",
        "rotate",
        "scale",
        "transform-style",
        "perspective",
        "perspective-origin",
        "backface-visibility",
        "transform",
        "transform-origin",
        "transform-box",
        "transition-property",
        "transition-duration",
        "transition-timing-function",
        "transition-delay",
        "transition",
        "outline",
        "outline-width",
        "outline-style",
        "outline-color",
        "outline-offset",
        "resize",
        "cursor",
        "caret-color",
        "caret-shape",
        "caret",
        "nav-up",
        "nav-right",
        "nav-down",
        "nav-left",
        "user-select",
        "accent-color",
        "appearance",
        "input-security",
        "view-transition-name",
        "will-change",
        "direction",
        "unicode-bidi",
        "writing-mode",
        "text-orientation",
        "glyph-orientation-vertical",
        "text-combine-upright",
        "fill-rule",
        "fill-break",
        "fill-color",
        "fill-image",
        "fill-origin",
        "fill-position",
        "fill-size",
        "fill-repeat",
        "fill-opacity",
        "stroke-width",
        "stroke-align",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-break",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-dash-corner",
        "stroke-dash-justify",
        "stroke-color",
        "stroke-image",
        "stroke-origin",
        "stroke-position",
        "stroke-size",
        "stroke-repeat",
        "stroke-opacity",
        "backdrop-filter",
        "filter",
        "flood-color",
        "flood-opacity",
        "color-interpolation-filters",
        "lighting-color",
        "display",
        "text-transform",
        "math-style",
        "math-shift",
        "math-depth",
        "offset-path",
        "offset-distance",
        "offset-position",
        "offset-anchor",
        "offset-rotate",
        "offset",
        "scroll-timeline-name",
        "scroll-timeline-axis",
        "scroll-timeline",
        "view-timeline-name",
        "view-timeline-axis",
        "view-timeline-inset",
        "view-timeline",
        "animation-range",
        "animation-range-start",
        "animation-range-end",
        "stroke-alignment",
        "stroke-dashcorner",
        "stroke-dashadjust"
    ],
    "hashTable": {
        "z-index": {
            "name": "z-index",
            "value": "auto | <integer> | inherit",
            "initial": "auto",
            "appliesTo": "positioned elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "values": [
                {
                    "name": "auto",
                    "prose": "The stack level of the generated box in the current stacking context is 0. The box does not establish a new stacking context unless it is the root element.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["z-index", "zIndex"],
            "styleDeclarationProperty": "zIndex",
            "referenceValues": ["<integer>"]
        },
        "page-break-before": {
            "name": "page-break-before",
            "value": "auto | always | avoid | left | right | inherit",
            "initial": "auto",
            "appliesTo": "block-level elements (but see text)",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual, paged",
            "values": [
                {
                    "name": "auto",
                    "prose": "Neither force nor forbid a page break before (after, inside) the generated box.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "always",
                    "prose": "Always force a page break before (after) the generated box.",
                    "type": "value",
                    "value": "always"
                },
                {
                    "name": "avoid",
                    "prose": "Avoid a page break before (after, inside) the generated box.",
                    "type": "value",
                    "value": "avoid"
                },
                {
                    "name": "left",
                    "prose": "Force one or two page breaks before (after) the generated box so that the next page is formatted as a left page.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "right",
                    "prose": "Force one or two page breaks before (after) the generated box so that the next page is formatted as a right page.",
                    "type": "value",
                    "value": "right"
                }
            ],
            "styleDeclaration": ["page-break-before", "pageBreakBefore"],
            "styleDeclarationProperty": "pageBreakBefore",
            "referenceValues": []
        },
        "page-break-after": {
            "name": "page-break-after",
            "value": "auto | always | avoid | left | right | inherit",
            "initial": "auto",
            "appliesTo": "block-level elements (but see text)",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual, paged",
            "values": [
                {
                    "name": "auto",
                    "prose": "Neither force nor forbid a page break before (after, inside) the generated box.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "always",
                    "prose": "Always force a page break before (after) the generated box.",
                    "type": "value",
                    "value": "always"
                },
                {
                    "name": "avoid",
                    "prose": "Avoid a page break before (after, inside) the generated box.",
                    "type": "value",
                    "value": "avoid"
                },
                {
                    "name": "left",
                    "prose": "Force one or two page breaks before (after) the generated box so that the next page is formatted as a left page.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "right",
                    "prose": "Force one or two page breaks before (after) the generated box so that the next page is formatted as a right page.",
                    "type": "value",
                    "value": "right"
                }
            ],
            "styleDeclaration": ["page-break-after", "pageBreakAfter"],
            "styleDeclarationProperty": "pageBreakAfter",
            "referenceValues": []
        },
        "page-break-inside": {
            "name": "page-break-inside",
            "value": "avoid | auto | inherit",
            "initial": "auto",
            "appliesTo": "block-level elements (but see text)",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual, paged",
            "values": [
                {
                    "name": "auto",
                    "prose": "Neither force nor forbid a page break before (after, inside) the generated box.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "always",
                    "prose": "Always force a page break before (after) the generated box.",
                    "type": "value",
                    "value": "always"
                },
                {
                    "name": "avoid",
                    "prose": "Avoid a page break before (after, inside) the generated box.",
                    "type": "value",
                    "value": "avoid"
                },
                {
                    "name": "left",
                    "prose": "Force one or two page breaks before (after) the generated box so that the next page is formatted as a left page.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "right",
                    "prose": "Force one or two page breaks before (after) the generated box so that the next page is formatted as a right page.",
                    "type": "value",
                    "value": "right"
                }
            ],
            "styleDeclaration": ["page-break-inside", "pageBreakInside"],
            "styleDeclarationProperty": "pageBreakInside",
            "referenceValues": []
        },
        "cx": {
            "name": "cx",
            "value": "<length-percentage>",
            "initial": "0",
            "appliesTo": "‘circle’ and ‘ellipse’ elements",
            "inherited": "no",
            "percentages": "refer to the width of the current SVG viewport (see Units)",
            "media": "visual",
            "computedValue": "an absolute length or percentage",
            "animationType": "by computed value",
            "styleDeclaration": ["cx"],
            "styleDeclarationProperty": "cx",
            "referenceValues": ["<length-percentage>"]
        },
        "cy": {
            "name": "cy",
            "value": "<length-percentage>",
            "initial": "0",
            "appliesTo": "‘circle’ and ‘ellipse’ elements",
            "inherited": "no",
            "percentages": "refer to the height of the current SVG viewport (see Units)",
            "media": "visual",
            "computedValue": "an absolute length or percentage",
            "animationType": "by computed value",
            "styleDeclaration": ["cy"],
            "styleDeclarationProperty": "cy",
            "referenceValues": ["<length-percentage>"]
        },
        "r": {
            "name": "r",
            "value": "<length-percentage>",
            "initial": "0",
            "appliesTo": "‘circle’ element",
            "inherited": "no",
            "percentages": "refer to the normalized diagonal of the current SVG viewport (see Units)",
            "media": "visual",
            "computedValue": "an absolute length or percentage",
            "animationType": "by computed value",
            "styleDeclaration": ["r"],
            "styleDeclarationProperty": "r",
            "referenceValues": ["<length-percentage>"]
        },
        "rx": {
            "name": "rx",
            "value": "<length-percentage> | auto",
            "initial": "auto",
            "appliesTo": "‘ellipse’, ‘rect’ elements",
            "inherited": "no",
            "percentages": "refer to the width of the current SVG viewport (see Units)",
            "media": "visual",
            "computedValue": "an absolute length or percentage",
            "animationType": "by computed value",
            "styleDeclaration": ["rx"],
            "styleDeclarationProperty": "rx",
            "referenceValues": ["<length-percentage>"]
        },
        "ry": {
            "name": "ry",
            "value": "<length-percentage> | auto",
            "initial": "auto",
            "appliesTo": "‘ellipse’, ‘rect’",
            "inherited": "no",
            "percentages": "refer to the height of the current SVG viewport (see Units)",
            "media": "visual",
            "computedValue": "an absolute length or percentage",
            "animatableType": "by computed value",
            "styleDeclaration": ["ry"],
            "styleDeclarationProperty": "ry",
            "referenceValues": ["<length-percentage>"]
        },
        "x": {
            "name": "x",
            "value": "<length-percentage>",
            "initial": "0",
            "appliesTo": "‘svg’, ‘rect’, ‘image’, ‘foreignObject’ elements",
            "inherited": "no",
            "percentages": "refer to the width of the current SVG viewport (see Units)",
            "media": "visual",
            "computedValue": "an absolute length or percentage",
            "animationType": "by computed value",
            "styleDeclaration": ["x"],
            "styleDeclarationProperty": "x",
            "referenceValues": ["<length-percentage>"]
        },
        "y": {
            "name": "y",
            "value": "<length-percentage>",
            "initial": "0",
            "appliesTo": "‘svg’, ‘rect’, ‘image’, ‘foreignObject’ elements",
            "inherited": "no",
            "percentages": "refer to the height of the current SVG viewport (see Units)",
            "media": "visual",
            "computedValue": "an absolute length or percentage",
            "animationType": "by computed value",
            "styleDeclaration": ["y"],
            "styleDeclarationProperty": "y",
            "referenceValues": ["<length-percentage>"]
        },
        "vector-effect": {
            "name": "vector-effect",
            "value": "none | non-scaling-stroke | non-scaling-size | non-rotation | fixed-position",
            "initial": "none",
            "appliesTo": "graphics elements and ‘use’",
            "inherited": "no",
            "percentages": "N/A",
            "media": "visual",
            "computedValue": "as specified",
            "animationType": "discrete",
            "styleDeclaration": ["vector-effect", "vectorEffect"],
            "styleDeclarationProperty": "vectorEffect",
            "referenceValues": []
        },
        "d": {
            "name": "d",
            "value": "none | <string>",
            "initial": "none",
            "appliesTo": "‘path’",
            "inherited": "no",
            "percentages": "N/A",
            "media": "visual",
            "computedValue": "as specified",
            "animationType": "See prose",
            "styleDeclaration": ["d"],
            "styleDeclarationProperty": "d",
            "referenceValues": ["<string>"]
        },
        "shape-subtract": {
            "name": "shape-subtract",
            "value": "none | [ <basic-shape>| <uri> ]+",
            "initial": "none",
            "appliesTo": "‘text’ elements",
            "inherited": "no",
            "percentages": "Relative to the ‘viewBox’",
            "media": "visual",
            "computedValue": "computed lengths for any <basic-shape>, the absolute URI for <uri>, otherwise as specified",
            "animationType": "See Interpolation of Basic Shapes",
            "styleDeclaration": ["shape-subtract", "shapeSubtract"],
            "styleDeclarationProperty": "shapeSubtract",
            "referenceValues": ["<uri> ]+"]
        },
        "text-anchor": {
            "name": "text-anchor",
            "value": "start | middle | end",
            "initial": "start",
            "appliesTo": "text content elements",
            "inherited": "yes",
            "percentages": "N/A",
            "media": "visual",
            "computedValue": "as specified",
            "animationType": "discrete",
            "styleDeclaration": ["text-anchor", "textAnchor"],
            "styleDeclarationProperty": "textAnchor",
            "referenceValues": []
        },
        "fill": {
            "name": "fill",
            "value": "<paint>",
            "initial": "black",
            "appliesTo": "shapes and text content elements",
            "inherited": "yes",
            "percentages": "N/A",
            "media": "visual",
            "computedValue": "as specified, but with <color> values computed and <url> values made absolute",
            "animationType": "by computed value",
            "styleDeclaration": ["fill"],
            "styleDeclarationProperty": "fill",
            "referenceValues": ["<paint>"]
        },
        "stroke": {
            "name": "stroke",
            "value": "<paint>",
            "initial": "none",
            "appliesTo": "shapes and text content elements",
            "inherited": "yes",
            "percentages": "N/A",
            "media": "visual",
            "computedValue": "as specified, but with <color> values computed and <url> values made absolute",
            "animationType": "by computed value",
            "styleDeclaration": ["stroke"],
            "styleDeclarationProperty": "stroke",
            "referenceValues": ["<paint>"]
        },
        "marker-start": {
            "name": "marker-start",
            "value": "none | <marker-ref>",
            "initial": "none",
            "appliesTo": "shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "media": "visual",
            "computedValue": "as specified, but with <url> values (that are part of a <marker-ref>) made absolute",
            "animationType": "discrete",
            "styleDeclaration": ["marker-start", "markerStart"],
            "styleDeclarationProperty": "markerStart",
            "referenceValues": ["<marker-ref>"]
        },
        "marker-mid": {
            "name": "marker-mid",
            "value": "none | <marker-ref>",
            "initial": "none",
            "appliesTo": "shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "media": "visual",
            "computedValue": "as specified, but with <url> values (that are part of a <marker-ref>) made absolute",
            "animationType": "discrete",
            "styleDeclaration": ["marker-mid", "markerMid"],
            "styleDeclarationProperty": "markerMid",
            "referenceValues": ["<marker-ref>"]
        },
        "marker-end": {
            "name": "marker-end",
            "value": "none | <marker-ref>",
            "initial": "none",
            "appliesTo": "shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "media": "visual",
            "computedValue": "as specified, but with <url> values (that are part of a <marker-ref>) made absolute",
            "animationType": "discrete",
            "styleDeclaration": ["marker-end", "markerEnd"],
            "styleDeclarationProperty": "markerEnd",
            "referenceValues": ["<marker-ref>"]
        },
        "marker": {
            "name": "marker",
            "value": "none | <marker-ref>",
            "initial": "not defined for shorthand properties",
            "appliesTo": "shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "media": "visual",
            "computedValue": "see individual properties",
            "animationType": "discrete",
            "styleDeclaration": ["marker"],
            "styleDeclarationProperty": "marker",
            "referenceValues": ["<marker-ref>"]
        },
        "paint-order": {
            "name": "paint-order",
            "value": "normal | [ fill || stroke || markers ]",
            "initial": "normal",
            "appliesTo": "shapes and text content elements",
            "inherited": "yes",
            "percentages": "N/A",
            "media": "visual",
            "computedValue": "as specified",
            "animationType": "discrete",
            "styleDeclaration": ["paint-order", "paintOrder"],
            "styleDeclarationProperty": "paintOrder",
            "referenceValues": []
        },
        "color-interpolation": {
            "name": "color-interpolation",
            "value": "auto | sRGB | linearRGB",
            "initial": "sRGB",
            "appliesTo": "container elements, graphics elements, gradient elements, ‘use’ and ‘animate’",
            "inherited": "yes",
            "percentages": "N/A",
            "media": "visual",
            "computedValue": "as specified",
            "animationType": "discrete",
            "styleDeclaration": ["color-interpolation", "colorInterpolation"],
            "styleDeclarationProperty": "colorInterpolation",
            "referenceValues": []
        },
        "shape-rendering": {
            "name": "shape-rendering",
            "value": "auto | optimizeSpeed | crispEdges | geometricPrecision",
            "initial": "auto",
            "appliesTo": "shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "media": "visual",
            "computedValue": "as specified",
            "animationType": "discrete",
            "styleDeclaration": ["shape-rendering", "shapeRendering"],
            "styleDeclarationProperty": "shapeRendering",
            "referenceValues": []
        },
        "text-rendering": {
            "name": "text-rendering",
            "value": "auto | optimizeSpeed | optimizeLegibility | geometricPrecision",
            "initial": "auto",
            "appliesTo": "‘text’",
            "inherited": "yes",
            "percentages": "N/A",
            "media": "visual",
            "computedValue": "as specified",
            "animationType": "discrete",
            "styleDeclaration": ["text-rendering", "textRendering"],
            "styleDeclarationProperty": "textRendering",
            "referenceValues": []
        },
        "pointer-events": {
            "name": "pointer-events",
            "value": "auto | bounding-box | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | none",
            "initial": "auto",
            "appliesTo": "container elements, graphics elements and ‘use’",
            "inherited": "yes",
            "percentages": "N/A",
            "media": "visual",
            "computedValue": "as specified",
            "animationType": "discrete",
            "styleDeclaration": ["pointer-events", "pointerEvents"],
            "styleDeclarationProperty": "pointerEvents",
            "referenceValues": []
        },
        "stop-color": {
            "name": "stop-color",
            "styleDeclaration": ["stop-color", "stopColor"],
            "styleDeclarationProperty": "stopColor",
            "referenceValues": []
        },
        "stop-opacity": {
            "name": "stop-opacity",
            "styleDeclaration": ["stop-opacity", "stopOpacity"],
            "styleDeclarationProperty": "stopOpacity",
            "referenceValues": []
        },
        "-webkit-text-fill-color": {
            "name": "-webkit-text-fill-color",
            "value": "<color>",
            "initial": "currentcolor",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "an RGBA color",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "media": "visual",
            "styleDeclaration": [
                "-webkit-text-fill-color",
                "WebkitTextFillColor",
                "webkitTextFillColor"
            ],
            "styleDeclarationProperty": "webkitTextFillColor",
            "referenceValues": ["<color>"]
        },
        "-webkit-text-stroke-color": {
            "name": "-webkit-text-stroke-color",
            "value": "<color>",
            "initial": "currentcolor",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "an RGBA color",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "media": "visual",
            "styleDeclaration": [
                "-webkit-text-stroke-color",
                "WebkitTextStrokeColor",
                "webkitTextStrokeColor"
            ],
            "styleDeclarationProperty": "webkitTextStrokeColor",
            "referenceValues": ["<color>"]
        },
        "-webkit-text-stroke-width": {
            "name": "-webkit-text-stroke-width",
            "value": "<line-width>",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "styleDeclaration": [
                "-webkit-text-stroke-width",
                "WebkitTextStrokeWidth",
                "webkitTextStrokeWidth"
            ],
            "styleDeclarationProperty": "webkitTextStrokeWidth",
            "referenceValues": ["<line-width>"]
        },
        "-webkit-text-stroke": {
            "name": "-webkit-text-stroke",
            "value": "<line-width> || <color>",
            "initial": "See individual properties",
            "appliesTo": "See individual properties",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "See individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "See individual properties",
            "media": "visual",
            "styleDeclaration": [
                "-webkit-text-stroke",
                "WebkitTextStroke",
                "webkitTextStroke"
            ],
            "styleDeclarationProperty": "webkitTextStroke",
            "referenceValues": ["<line-width>", "<color>"]
        },
        "touch-action": {
            "name": "touch-action",
            "value": "auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation",
            "initial": "auto",
            "appliesTo": "all elements except: non-replaced inline elements, table rows, row groups, table columns, and column groups.",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "Same as specified value",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "media": "visual",
            "styleDeclaration": ["touch-action", "touchAction"],
            "styleDeclarationProperty": "touchAction",
            "referenceValues": []
        },
        "-webkit-align-items": {
            "name": "-webkit-align-items",
            "styleDeclaration": [
                "-webkit-align-items",
                "WebkitAlignItems",
                "webkitAlignItems"
            ],
            "styleDeclarationProperty": "webkitAlignItems",
            "referenceValues": []
        },
        "-webkit-align-content": {
            "name": "-webkit-align-content",
            "styleDeclaration": [
                "-webkit-align-content",
                "WebkitAlignContent",
                "webkitAlignContent"
            ],
            "styleDeclarationProperty": "webkitAlignContent",
            "referenceValues": []
        },
        "-webkit-align-self": {
            "name": "-webkit-align-self",
            "styleDeclaration": [
                "-webkit-align-self",
                "WebkitAlignSelf",
                "webkitAlignSelf"
            ],
            "styleDeclarationProperty": "webkitAlignSelf",
            "referenceValues": []
        },
        "-webkit-animation-name": {
            "name": "-webkit-animation-name",
            "styleDeclaration": [
                "-webkit-animation-name",
                "WebkitAnimationName",
                "webkitAnimationName"
            ],
            "styleDeclarationProperty": "webkitAnimationName",
            "referenceValues": []
        },
        "-webkit-animation-duration": {
            "name": "-webkit-animation-duration",
            "styleDeclaration": [
                "-webkit-animation-duration",
                "WebkitAnimationDuration",
                "webkitAnimationDuration"
            ],
            "styleDeclarationProperty": "webkitAnimationDuration",
            "referenceValues": []
        },
        "-webkit-animation-timing-function": {
            "name": "-webkit-animation-timing-function",
            "styleDeclaration": [
                "-webkit-animation-timing-function",
                "WebkitAnimationTimingFunction",
                "webkitAnimationTimingFunction"
            ],
            "styleDeclarationProperty": "webkitAnimationTimingFunction",
            "referenceValues": []
        },
        "-webkit-animation-iteration-count": {
            "name": "-webkit-animation-iteration-count",
            "styleDeclaration": [
                "-webkit-animation-iteration-count",
                "WebkitAnimationIterationCount",
                "webkitAnimationIterationCount"
            ],
            "styleDeclarationProperty": "webkitAnimationIterationCount",
            "referenceValues": []
        },
        "-webkit-animation-direction": {
            "name": "-webkit-animation-direction",
            "styleDeclaration": [
                "-webkit-animation-direction",
                "WebkitAnimationDirection",
                "webkitAnimationDirection"
            ],
            "styleDeclarationProperty": "webkitAnimationDirection",
            "referenceValues": []
        },
        "-webkit-animation-play-state": {
            "name": "-webkit-animation-play-state",
            "styleDeclaration": [
                "-webkit-animation-play-state",
                "WebkitAnimationPlayState",
                "webkitAnimationPlayState"
            ],
            "styleDeclarationProperty": "webkitAnimationPlayState",
            "referenceValues": []
        },
        "-webkit-animation-delay": {
            "name": "-webkit-animation-delay",
            "styleDeclaration": [
                "-webkit-animation-delay",
                "WebkitAnimationDelay",
                "webkitAnimationDelay"
            ],
            "styleDeclarationProperty": "webkitAnimationDelay",
            "referenceValues": []
        },
        "-webkit-animation-fill-mode": {
            "name": "-webkit-animation-fill-mode",
            "styleDeclaration": [
                "-webkit-animation-fill-mode",
                "WebkitAnimationFillMode",
                "webkitAnimationFillMode"
            ],
            "styleDeclarationProperty": "webkitAnimationFillMode",
            "referenceValues": []
        },
        "-webkit-animation": {
            "name": "-webkit-animation",
            "styleDeclaration": [
                "-webkit-animation",
                "WebkitAnimation",
                "webkitAnimation"
            ],
            "styleDeclarationProperty": "webkitAnimation",
            "referenceValues": []
        },
        "-webkit-backface-visibility": {
            "name": "-webkit-backface-visibility",
            "styleDeclaration": [
                "-webkit-backface-visibility",
                "WebkitBackfaceVisibility",
                "webkitBackfaceVisibility"
            ],
            "styleDeclarationProperty": "webkitBackfaceVisibility",
            "referenceValues": []
        },
        "-webkit-background-clip": {
            "name": "-webkit-background-clip",
            "styleDeclaration": [
                "-webkit-background-clip",
                "WebkitBackgroundClip",
                "webkitBackgroundClip"
            ],
            "styleDeclarationProperty": "webkitBackgroundClip",
            "referenceValues": []
        },
        "-webkit-background-origin": {
            "name": "-webkit-background-origin",
            "styleDeclaration": [
                "-webkit-background-origin",
                "WebkitBackgroundOrigin",
                "webkitBackgroundOrigin"
            ],
            "styleDeclarationProperty": "webkitBackgroundOrigin",
            "referenceValues": []
        },
        "-webkit-background-size": {
            "name": "-webkit-background-size",
            "styleDeclaration": [
                "-webkit-background-size",
                "WebkitBackgroundSize",
                "webkitBackgroundSize"
            ],
            "styleDeclarationProperty": "webkitBackgroundSize",
            "referenceValues": []
        },
        "-webkit-border-bottom-left-radius": {
            "name": "-webkit-border-bottom-left-radius",
            "styleDeclaration": [
                "-webkit-border-bottom-left-radius",
                "WebkitBorderBottomLeftRadius",
                "webkitBorderBottomLeftRadius"
            ],
            "styleDeclarationProperty": "webkitBorderBottomLeftRadius",
            "referenceValues": []
        },
        "-webkit-border-bottom-right-radius": {
            "name": "-webkit-border-bottom-right-radius",
            "styleDeclaration": [
                "-webkit-border-bottom-right-radius",
                "WebkitBorderBottomRightRadius",
                "webkitBorderBottomRightRadius"
            ],
            "styleDeclarationProperty": "webkitBorderBottomRightRadius",
            "referenceValues": []
        },
        "-webkit-border-top-left-radius": {
            "name": "-webkit-border-top-left-radius",
            "styleDeclaration": [
                "-webkit-border-top-left-radius",
                "WebkitBorderTopLeftRadius",
                "webkitBorderTopLeftRadius"
            ],
            "styleDeclarationProperty": "webkitBorderTopLeftRadius",
            "referenceValues": []
        },
        "-webkit-border-top-right-radius": {
            "name": "-webkit-border-top-right-radius",
            "styleDeclaration": [
                "-webkit-border-top-right-radius",
                "WebkitBorderTopRightRadius",
                "webkitBorderTopRightRadius"
            ],
            "styleDeclarationProperty": "webkitBorderTopRightRadius",
            "referenceValues": []
        },
        "-webkit-border-radius": {
            "name": "-webkit-border-radius",
            "styleDeclaration": [
                "-webkit-border-radius",
                "WebkitBorderRadius",
                "webkitBorderRadius"
            ],
            "styleDeclarationProperty": "webkitBorderRadius",
            "referenceValues": []
        },
        "-webkit-box-shadow": {
            "name": "-webkit-box-shadow",
            "styleDeclaration": [
                "-webkit-box-shadow",
                "WebkitBoxShadow",
                "webkitBoxShadow"
            ],
            "styleDeclarationProperty": "webkitBoxShadow",
            "referenceValues": []
        },
        "-webkit-box-sizing": {
            "name": "-webkit-box-sizing",
            "styleDeclaration": [
                "-webkit-box-sizing",
                "WebkitBoxSizing",
                "webkitBoxSizing"
            ],
            "styleDeclarationProperty": "webkitBoxSizing",
            "referenceValues": []
        },
        "-webkit-flex": {
            "name": "-webkit-flex",
            "styleDeclaration": ["-webkit-flex", "WebkitFlex", "webkitFlex"],
            "styleDeclarationProperty": "webkitFlex",
            "referenceValues": []
        },
        "-webkit-flex-basis": {
            "name": "-webkit-flex-basis",
            "styleDeclaration": [
                "-webkit-flex-basis",
                "WebkitFlexBasis",
                "webkitFlexBasis"
            ],
            "styleDeclarationProperty": "webkitFlexBasis",
            "referenceValues": []
        },
        "-webkit-flex-direction": {
            "name": "-webkit-flex-direction",
            "styleDeclaration": [
                "-webkit-flex-direction",
                "WebkitFlexDirection",
                "webkitFlexDirection"
            ],
            "styleDeclarationProperty": "webkitFlexDirection",
            "referenceValues": []
        },
        "-webkit-flex-flow": {
            "name": "-webkit-flex-flow",
            "styleDeclaration": [
                "-webkit-flex-flow",
                "WebkitFlexFlow",
                "webkitFlexFlow"
            ],
            "styleDeclarationProperty": "webkitFlexFlow",
            "referenceValues": []
        },
        "-webkit-flex-grow": {
            "name": "-webkit-flex-grow",
            "styleDeclaration": [
                "-webkit-flex-grow",
                "WebkitFlexGrow",
                "webkitFlexGrow"
            ],
            "styleDeclarationProperty": "webkitFlexGrow",
            "referenceValues": []
        },
        "-webkit-flex-shrink": {
            "name": "-webkit-flex-shrink",
            "styleDeclaration": [
                "-webkit-flex-shrink",
                "WebkitFlexShrink",
                "webkitFlexShrink"
            ],
            "styleDeclarationProperty": "webkitFlexShrink",
            "referenceValues": []
        },
        "-webkit-flex-wrap": {
            "name": "-webkit-flex-wrap",
            "styleDeclaration": [
                "-webkit-flex-wrap",
                "WebkitFlexWrap",
                "webkitFlexWrap"
            ],
            "styleDeclarationProperty": "webkitFlexWrap",
            "referenceValues": []
        },
        "-webkit-filter": {
            "name": "-webkit-filter",
            "styleDeclaration": [
                "-webkit-filter",
                "WebkitFilter",
                "webkitFilter"
            ],
            "styleDeclarationProperty": "webkitFilter",
            "referenceValues": []
        },
        "-webkit-justify-content": {
            "name": "-webkit-justify-content",
            "styleDeclaration": [
                "-webkit-justify-content",
                "WebkitJustifyContent",
                "webkitJustifyContent"
            ],
            "styleDeclarationProperty": "webkitJustifyContent",
            "referenceValues": []
        },
        "-webkit-mask": {
            "name": "-webkit-mask",
            "styleDeclaration": ["-webkit-mask", "WebkitMask", "webkitMask"],
            "styleDeclarationProperty": "webkitMask",
            "referenceValues": []
        },
        "-webkit-mask-box-image": {
            "name": "-webkit-mask-box-image",
            "styleDeclaration": [
                "-webkit-mask-box-image",
                "WebkitMaskBoxImage",
                "webkitMaskBoxImage"
            ],
            "styleDeclarationProperty": "webkitMaskBoxImage",
            "referenceValues": []
        },
        "-webkit-mask-box-image-outset": {
            "name": "-webkit-mask-box-image-outset",
            "styleDeclaration": [
                "-webkit-mask-box-image-outset",
                "WebkitMaskBoxImageOutset",
                "webkitMaskBoxImageOutset"
            ],
            "styleDeclarationProperty": "webkitMaskBoxImageOutset",
            "referenceValues": []
        },
        "-webkit-mask-box-image-repeat": {
            "name": "-webkit-mask-box-image-repeat",
            "styleDeclaration": [
                "-webkit-mask-box-image-repeat",
                "WebkitMaskBoxImageRepeat",
                "webkitMaskBoxImageRepeat"
            ],
            "styleDeclarationProperty": "webkitMaskBoxImageRepeat",
            "referenceValues": []
        },
        "-webkit-mask-box-image-slice": {
            "name": "-webkit-mask-box-image-slice",
            "styleDeclaration": [
                "-webkit-mask-box-image-slice",
                "WebkitMaskBoxImageSlice",
                "webkitMaskBoxImageSlice"
            ],
            "styleDeclarationProperty": "webkitMaskBoxImageSlice",
            "referenceValues": []
        },
        "-webkit-mask-box-image-source": {
            "name": "-webkit-mask-box-image-source",
            "styleDeclaration": [
                "-webkit-mask-box-image-source",
                "WebkitMaskBoxImageSource",
                "webkitMaskBoxImageSource"
            ],
            "styleDeclarationProperty": "webkitMaskBoxImageSource",
            "referenceValues": []
        },
        "-webkit-mask-box-image-width": {
            "name": "-webkit-mask-box-image-width",
            "styleDeclaration": [
                "-webkit-mask-box-image-width",
                "WebkitMaskBoxImageWidth",
                "webkitMaskBoxImageWidth"
            ],
            "styleDeclarationProperty": "webkitMaskBoxImageWidth",
            "referenceValues": []
        },
        "-webkit-mask-clip": {
            "name": "-webkit-mask-clip",
            "styleDeclaration": [
                "-webkit-mask-clip",
                "WebkitMaskClip",
                "webkitMaskClip"
            ],
            "styleDeclarationProperty": "webkitMaskClip",
            "referenceValues": []
        },
        "-webkit-mask-composite": {
            "name": "-webkit-mask-composite",
            "styleDeclaration": [
                "-webkit-mask-composite",
                "WebkitMaskComposite",
                "webkitMaskComposite"
            ],
            "styleDeclarationProperty": "webkitMaskComposite",
            "referenceValues": []
        },
        "-webkit-mask-image": {
            "name": "-webkit-mask-image",
            "styleDeclaration": [
                "-webkit-mask-image",
                "WebkitMaskImage",
                "webkitMaskImage"
            ],
            "styleDeclarationProperty": "webkitMaskImage",
            "referenceValues": []
        },
        "-webkit-mask-origin": {
            "name": "-webkit-mask-origin",
            "styleDeclaration": [
                "-webkit-mask-origin",
                "WebkitMaskOrigin",
                "webkitMaskOrigin"
            ],
            "styleDeclarationProperty": "webkitMaskOrigin",
            "referenceValues": []
        },
        "-webkit-mask-position": {
            "name": "-webkit-mask-position",
            "styleDeclaration": [
                "-webkit-mask-position",
                "WebkitMaskPosition",
                "webkitMaskPosition"
            ],
            "styleDeclarationProperty": "webkitMaskPosition",
            "referenceValues": []
        },
        "-webkit-mask-repeat": {
            "name": "-webkit-mask-repeat",
            "styleDeclaration": [
                "-webkit-mask-repeat",
                "WebkitMaskRepeat",
                "webkitMaskRepeat"
            ],
            "styleDeclarationProperty": "webkitMaskRepeat",
            "referenceValues": []
        },
        "-webkit-mask-size": {
            "name": "-webkit-mask-size",
            "styleDeclaration": [
                "-webkit-mask-size",
                "WebkitMaskSize",
                "webkitMaskSize"
            ],
            "styleDeclarationProperty": "webkitMaskSize",
            "referenceValues": []
        },
        "-webkit-order": {
            "name": "-webkit-order",
            "styleDeclaration": ["-webkit-order", "WebkitOrder", "webkitOrder"],
            "styleDeclarationProperty": "webkitOrder",
            "referenceValues": []
        },
        "-webkit-perspective": {
            "name": "-webkit-perspective",
            "styleDeclaration": [
                "-webkit-perspective",
                "WebkitPerspective",
                "webkitPerspective"
            ],
            "styleDeclarationProperty": "webkitPerspective",
            "referenceValues": []
        },
        "-webkit-perspective-origin": {
            "name": "-webkit-perspective-origin",
            "styleDeclaration": [
                "-webkit-perspective-origin",
                "WebkitPerspectiveOrigin",
                "webkitPerspectiveOrigin"
            ],
            "styleDeclarationProperty": "webkitPerspectiveOrigin",
            "referenceValues": []
        },
        "-webkit-transform-origin": {
            "name": "-webkit-transform-origin",
            "styleDeclaration": [
                "-webkit-transform-origin",
                "WebkitTransformOrigin",
                "webkitTransformOrigin"
            ],
            "styleDeclarationProperty": "webkitTransformOrigin",
            "referenceValues": []
        },
        "-webkit-transform-style": {
            "name": "-webkit-transform-style",
            "styleDeclaration": [
                "-webkit-transform-style",
                "WebkitTransformStyle",
                "webkitTransformStyle"
            ],
            "styleDeclarationProperty": "webkitTransformStyle",
            "referenceValues": []
        },
        "-webkit-transform": {
            "name": "-webkit-transform",
            "styleDeclaration": [
                "-webkit-transform",
                "WebkitTransform",
                "webkitTransform"
            ],
            "styleDeclarationProperty": "webkitTransform",
            "referenceValues": []
        },
        "-webkit-transition-delay": {
            "name": "-webkit-transition-delay",
            "styleDeclaration": [
                "-webkit-transition-delay",
                "WebkitTransitionDelay",
                "webkitTransitionDelay"
            ],
            "styleDeclarationProperty": "webkitTransitionDelay",
            "referenceValues": []
        },
        "-webkit-transition-duration": {
            "name": "-webkit-transition-duration",
            "styleDeclaration": [
                "-webkit-transition-duration",
                "WebkitTransitionDuration",
                "webkitTransitionDuration"
            ],
            "styleDeclarationProperty": "webkitTransitionDuration",
            "referenceValues": []
        },
        "-webkit-transition-property": {
            "name": "-webkit-transition-property",
            "styleDeclaration": [
                "-webkit-transition-property",
                "WebkitTransitionProperty",
                "webkitTransitionProperty"
            ],
            "styleDeclarationProperty": "webkitTransitionProperty",
            "referenceValues": []
        },
        "-webkit-transition-timing-function": {
            "name": "-webkit-transition-timing-function",
            "styleDeclaration": [
                "-webkit-transition-timing-function",
                "WebkitTransitionTimingFunction",
                "webkitTransitionTimingFunction"
            ],
            "styleDeclarationProperty": "webkitTransitionTimingFunction",
            "referenceValues": []
        },
        "-webkit-transition": {
            "name": "-webkit-transition",
            "styleDeclaration": [
                "-webkit-transition",
                "WebkitTransition",
                "webkitTransition"
            ],
            "styleDeclarationProperty": "webkitTransition",
            "referenceValues": []
        },
        "-webkit-text-size-adjust": {
            "name": "-webkit-text-size-adjust",
            "styleDeclaration": [
                "-webkit-text-size-adjust",
                "WebkitTextSizeAdjust",
                "webkitTextSizeAdjust"
            ],
            "styleDeclarationProperty": "webkitTextSizeAdjust",
            "referenceValues": []
        },
        "-webkit-box-align": {
            "name": "-webkit-box-align",
            "styleDeclaration": [
                "-webkit-box-align",
                "WebkitBoxAlign",
                "webkitBoxAlign"
            ],
            "styleDeclarationProperty": "webkitBoxAlign",
            "referenceValues": []
        },
        "-webkit-box-flex": {
            "name": "-webkit-box-flex",
            "styleDeclaration": [
                "-webkit-box-flex",
                "WebkitBoxFlex",
                "webkitBoxFlex"
            ],
            "styleDeclarationProperty": "webkitBoxFlex",
            "referenceValues": []
        },
        "-webkit-box-ordinal-group": {
            "name": "-webkit-box-ordinal-group",
            "styleDeclaration": [
                "-webkit-box-ordinal-group",
                "WebkitBoxOrdinalGroup",
                "webkitBoxOrdinalGroup"
            ],
            "styleDeclarationProperty": "webkitBoxOrdinalGroup",
            "referenceValues": []
        },
        "-webkit-box-orient": {
            "name": "-webkit-box-orient",
            "styleDeclaration": [
                "-webkit-box-orient",
                "WebkitBoxOrient",
                "webkitBoxOrient"
            ],
            "styleDeclarationProperty": "webkitBoxOrient",
            "referenceValues": []
        },
        "-webkit-box-pack": {
            "name": "-webkit-box-pack",
            "styleDeclaration": [
                "-webkit-box-pack",
                "WebkitBoxPack",
                "webkitBoxPack"
            ],
            "styleDeclarationProperty": "webkitBoxPack",
            "referenceValues": []
        },
        "mix-blend-mode": {
            "name": "mix-blend-mode",
            "value": "<blend-mode> | plus-darker | plus-lighter",
            "initial": "normal",
            "appliesTo": "All elements. In SVG, it applies to container elements, graphics elements and graphics referencing elements. [SVG11]",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "no",
            "styleDeclaration": ["mix-blend-mode", "mixBlendMode"],
            "styleDeclarationProperty": "mixBlendMode",
            "referenceValues": ["<blend-mode>"]
        },
        "isolation": {
            "name": "isolation",
            "value": "<isolation-mode>",
            "initial": "auto",
            "appliesTo": "All elements. In SVG, it applies to container elements, graphics elements and graphics referencing elements. [SVG11]",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "no",
            "styleDeclaration": ["isolation"],
            "styleDeclarationProperty": "isolation",
            "referenceValues": ["<isolation-mode>"]
        },
        "background-blend-mode": {
            "name": "background-blend-mode",
            "value": "<mix-blend-mode>#",
            "initial": "normal",
            "appliesTo": "All HTML elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "no",
            "styleDeclaration": [
                "background-blend-mode",
                "backgroundBlendMode"
            ],
            "styleDeclarationProperty": "backgroundBlendMode",
            "referenceValues": ["<mix-blend-mode>#"]
        },
        "align-content": {
            "name": "align-content",
            "value": "normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>",
            "initial": "normal",
            "appliesTo": "block containers, multicol containers, flex containers, and grid containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "Aligns the contents of the box as a whole (as the alignment subject) within the box itself (as the alignment container): along the inline/row/main axis of the box (for justify-content) or the block/column/cross axis of the box (for align-content). Values other than normal are defined in § 4 Alignment Keywords, above.",
                    "type": "value",
                    "value": "normal"
                }
            ],
            "styleDeclaration": ["align-content", "alignContent"],
            "styleDeclarationProperty": "alignContent",
            "referenceValues": [
                "<baseline-position>",
                "<content-distribution>",
                "<overflow-position>? <content-position>"
            ]
        },
        "justify-content": {
            "name": "justify-content",
            "value": "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
            "initial": "normal",
            "appliesTo": "multicol containers, flex containers, and grid containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "left",
                    "prose": "Aligns the alignment subject to be flush with the alignment container’s line-left or physical left edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "right",
                    "prose": "Aligns the alignment subject to be flush with the alignment container’s line-right or physical right edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "normal",
                    "prose": "Aligns the contents of the box as a whole (as the alignment subject) within the box itself (as the alignment container): along the inline/row/main axis of the box (for justify-content) or the block/column/cross axis of the box (for align-content). Values other than normal are defined in § 4 Alignment Keywords, above.",
                    "type": "value",
                    "value": "normal"
                }
            ],
            "styleDeclaration": ["justify-content", "justifyContent"],
            "styleDeclarationProperty": "justifyContent",
            "referenceValues": [
                "<content-distribution>",
                "<overflow-position>? [ <content-position>"
            ]
        },
        "place-content": {
            "name": "place-content",
            "value": "<'align-content'> <'justify-content'>?",
            "initial": "normal",
            "appliesTo": "block containers, flex containers, and grid containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["place-content", "placeContent"],
            "styleDeclarationProperty": "placeContent",
            "referenceValues": ["<'align-content'> <'justify-content'>?"]
        },
        "justify-self": {
            "name": "justify-self",
            "value": "auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]",
            "initial": "auto",
            "appliesTo": "block-level boxes, absolutely-positioned boxes, and grid items",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "left",
                    "prose": "Aligns the alignment subject to be flush with the alignment container’s line-left or physical left edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "right",
                    "prose": "Aligns the alignment subject to be flush with the alignment container’s line-right or physical right edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "auto",
                    "prose": "Behaves as normal if the box has no parent, or when determining the actual position of an absolutely positioned box. It behaves as the computed justify-items value of the parent box (minus any legacy keywords) otherwise (including when determining the static position of an absolutely positioned box).",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "normal",
                    "prose": "Represents the “default” alignment for the layout mode. Its behavior depends on the layout mode, as described below.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "stretch",
                    "prose": "When the box’s computed width/height (as appropriate to the axis) is auto and neither of its margins (in the appropriate axis) are auto, sets the box’s used size to the length necessary to make its outer size as close to filling the alignment container as possible while still respecting the constraints imposed by min-height/min-width/max-height/max-width. Unless otherwise specified, this value falls back to flex-start generally, and to self-start or self-end if the box has also specified first baseline or last baseline baseline content-alignment (respectively) in the same axis.",
                    "type": "value",
                    "value": "stretch"
                }
            ],
            "styleDeclaration": ["justify-self", "justifySelf"],
            "styleDeclarationProperty": "justifySelf",
            "referenceValues": [
                "<baseline-position>",
                "<overflow-position>? [ <self-position>"
            ]
        },
        "align-self": {
            "name": "align-self",
            "value": "auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>",
            "initial": "auto",
            "appliesTo": "flex items, grid items, and absolutely-positioned boxes",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Behaves as normal if the box has no parent, or when determining the actual position of an absolutely positioned box. It behaves as the computed align-items value of the parent box (minus any legacy keywords) otherwise (including when determining the static position of an absolutely positioned box).",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "normal",
                    "prose": "Represents the “default” alignment for the layout mode, as defined below.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "stretch",
                    "prose": "As defined for justify-self in § 6.1 Inline-Axis (or Main-Axis) Alignment: the justify-self property.",
                    "type": "value",
                    "value": "stretch"
                }
            ],
            "styleDeclaration": ["align-self", "alignSelf"],
            "styleDeclarationProperty": "alignSelf",
            "referenceValues": [
                "<baseline-position>",
                "<overflow-position>? <self-position>"
            ]
        },
        "place-self": {
            "name": "place-self",
            "value": "<'align-self'> <'justify-self'>?",
            "initial": "auto",
            "appliesTo": "block-level boxes, absolutely-positioned boxes, and grid items",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["place-self", "placeSelf"],
            "styleDeclarationProperty": "placeSelf",
            "referenceValues": ["<'align-self'> <'justify-self'>?"]
        },
        "justify-items": {
            "name": "justify-items",
            "value": "normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]",
            "initial": "legacy",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword(s), except for legacy (see prose)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "left",
                    "prose": "Aligns the alignment subject to be flush with the alignment container’s line-left or physical left edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "right",
                    "prose": "Aligns the alignment subject to be flush with the alignment container’s line-right or physical right edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "legacy",
                    "prose": "This keyword causes the value to effectively inherit into descendants. If the legacy keyword appears on its own (without an accompanying left, right, or center keyword): if the inherited value of justify-items includes the legacy keyword, this value computes to the inherited value; otherwise it computes to normal. When justify-self:auto references the value of justify-items, only the alignment keyword, not the legacy keyword, is referenced by it. It exists to implement the legacy alignment behavior of HTML’s <center> element and align attribute.",
                    "type": "value",
                    "value": "legacy"
                }
            ],
            "styleDeclaration": ["justify-items", "justifyItems"],
            "styleDeclarationProperty": "justifyItems",
            "referenceValues": [
                "<baseline-position>",
                "<overflow-position>? [ <self-position>"
            ]
        },
        "align-items": {
            "name": "align-items",
            "value": "normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]",
            "initial": "normal",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["align-items", "alignItems"],
            "styleDeclarationProperty": "alignItems",
            "referenceValues": ["<baseline-position>"]
        },
        "place-items": {
            "name": "place-items",
            "value": "<'align-items'> <'justify-items'>?",
            "initial": "see individual properties",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["place-items", "placeItems"],
            "styleDeclarationProperty": "placeItems",
            "referenceValues": ["<'align-items'> <'justify-items'>?"]
        },
        "row-gap": {
            "name": "row-gap",
            "value": "normal | <length-percentage [0,∞]>",
            "initial": "normal",
            "appliesTo": "multi-column containers, flex containers, grid containers",
            "inherited": "no",
            "percentages": "see § 8.3 Percentages In gap Properties",
            "computedValue": "specified keyword, else a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "normal",
                    "prose": "The normal represents a used value of 1em on multi-column containers, and a used value of 0px in all other contexts.",
                    "type": "value",
                    "value": "normal"
                }
            ],
            "styleDeclaration": ["row-gap", "rowGap"],
            "styleDeclarationProperty": "rowGap",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "column-gap": {
            "name": "column-gap",
            "value": "normal | <length-percentage [0,∞]>",
            "initial": "normal",
            "appliesTo": "multi-column containers, flex containers, grid containers",
            "inherited": "no",
            "percentages": "see § 8.3 Percentages In gap Properties",
            "computedValue": "specified keyword, else a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "normal",
                    "prose": "The normal represents a used value of 1em on multi-column containers, and a used value of 0px in all other contexts.",
                    "type": "value",
                    "value": "normal"
                }
            ],
            "styleDeclaration": ["column-gap", "columnGap"],
            "styleDeclarationProperty": "columnGap",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "gap": {
            "name": "gap",
            "value": "<'row-gap'> <'column-gap'>?",
            "initial": "see individual properties",
            "appliesTo": "multi-column containers, flex containers, grid containers",
            "inherited": "no",
            "percentages": "refer to corresponding dimension of the content area",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "normal",
                    "prose": "The normal represents a used value of 1em on multi-column containers, and a used value of 0px in all other contexts.",
                    "type": "value",
                    "value": "normal"
                }
            ],
            "styleDeclaration": ["gap"],
            "styleDeclarationProperty": "gap",
            "referenceValues": ["<'row-gap'> <'column-gap'>?"]
        },
        "grid-row-gap": {
            "name": "grid-row-gap",
            "styleDeclaration": ["grid-row-gap", "gridRowGap"],
            "styleDeclarationProperty": "gridRowGap",
            "referenceValues": []
        },
        "grid-column-gap": {
            "name": "grid-column-gap",
            "styleDeclaration": ["grid-column-gap", "gridColumnGap"],
            "styleDeclarationProperty": "gridColumnGap",
            "referenceValues": []
        },
        "grid-gap": {
            "name": "grid-gap",
            "styleDeclaration": ["grid-gap", "gridGap"],
            "styleDeclarationProperty": "gridGap",
            "referenceValues": []
        },
        "anchor-scroll": {
            "name": "anchor-scroll",
            "value": "none | default | <anchor-element>",
            "initial": "none",
            "appliesTo": "absolutely-positioned elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "No effect.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "default",
                    "prose": "Behaves identically to <anchor-element>, but draws its value from anchor-default on the element.",
                    "type": "value",
                    "value": "default"
                },
                {
                    "name": "<anchor-element>",
                    "prose": "Selects a target anchor element the same as anchor(), which will be compensated for in positioning and fallback.",
                    "type": "value",
                    "value": "<anchor-element>"
                }
            ],
            "styleDeclaration": ["anchor-scroll", "anchorScroll"],
            "styleDeclarationProperty": "anchorScroll",
            "referenceValues": ["<anchor-element>"]
        },
        "anchor-name": {
            "name": "anchor-name",
            "value": "none | <dashed-ident>",
            "initial": "none",
            "appliesTo": "all elements that generate a principal box",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "The property has no effect.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<dashed-ident>",
                    "prose": "If the element generates a principal box, the element is an anchor element, with an anchor name equal to the <dashed-ident>. The anchor name is a tree-scoped name. Otherwise, the property has no effect.",
                    "type": "value",
                    "value": "<dashed-ident>"
                }
            ],
            "styleDeclaration": ["anchor-name", "anchorName"],
            "styleDeclarationProperty": "anchorName",
            "referenceValues": ["<dashed-ident>"]
        },
        "anchor-default": {
            "name": "anchor-default",
            "value": "<anchor-element>",
            "initial": "implicit",
            "appliesTo": "absolutely positioned elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["anchor-default", "anchorDefault"],
            "styleDeclarationProperty": "anchorDefault",
            "referenceValues": ["<anchor-element>"]
        },
        "position-fallback": {
            "name": "position-fallback",
            "value": "none | <dashed-ident>",
            "initial": "none",
            "appliesTo": "absolutely-positioned elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "The property has no effect; the element does not use a position fallback list.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<dashed-ident>",
                    "prose": "If there is a @position-fallback rule with a name matching the specified ident, then the element uses that position fallback list. Otherwise, this value has no effect.",
                    "type": "value",
                    "value": "<dashed-ident>"
                }
            ],
            "styleDeclaration": ["position-fallback", "positionFallback"],
            "styleDeclarationProperty": "positionFallback",
            "referenceValues": ["<dashed-ident>"]
        },
        "animation-duration": {
            "name": "animation-duration",
            "value": "<time [0s,∞]>#",
            "initial": "0s",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a duration",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "<time [0s,∞]>",
                    "prose": "The <time> specifies the length of time that an animation takes to complete one cycle. A negative <time> is invalid. If the <time> is 0s, like the initial value, the keyframes of the animation have no effect, but the animation itself still occurs instantaneously. Specifically, start and end events are fired; if animation-fill-mode is set to backwards or both, the first frame of the animation, as defined by animation-direction, will be displayed during the animation-delay. After the animation-delay the last frame of the animation, as defined by animation-direction, will be displayed if animation-fill-mode is set to forwards or both. If animation-fill-mode is set to none the animation will have no visible effect.",
                    "type": "value",
                    "value": "<time [0s,∞]>"
                }
            ],
            "styleDeclaration": ["animation-duration", "animationDuration"],
            "styleDeclarationProperty": "animationDuration",
            "referenceValues": ["<time [0s,∞]>#"]
        },
        "animation-composition": {
            "name": "animation-composition",
            "value": "<single-animation-composition>#",
            "initial": "replace",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a keyword as specified",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "styleDeclaration": [
                "animation-composition",
                "animationComposition"
            ],
            "styleDeclarationProperty": "animationComposition",
            "referenceValues": ["<single-animation-composition>#"]
        },
        "animation-timeline": {
            "name": "animation-timeline",
            "value": "<single-animation-timeline>#",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item either a case-sensitive css identifier or the keywords none, auto.",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "styleDeclaration": ["animation-timeline", "animationTimeline"],
            "styleDeclarationProperty": "animationTimeline",
            "referenceValues": ["<single-animation-timeline>#"]
        },
        "animation-name": {
            "name": "animation-name",
            "value": "[ none | <keyframes-name> ]#",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item either a case-sensitive css identifier or the keyword none",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "none",
                    "prose": "No keyframes are specified at all, so there will be no animation. Any other animations properties specified for this animation have no effect.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<keyframes-name>",
                    "prose": "The animation will use the keyframes with the name specified by the <keyframes-name>, if they exist. If no @keyframes rule with that name exists, there is no animation.",
                    "type": "value",
                    "value": "<keyframes-name>"
                }
            ],
            "styleDeclaration": ["animation-name", "animationName"],
            "styleDeclarationProperty": "animationName",
            "referenceValues": ["<keyframes-name> ]#"]
        },
        "animation-timing-function": {
            "name": "animation-timing-function",
            "value": "<easing-function>#",
            "initial": "ease",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a computed <easing-function>",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "styleDeclaration": [
                "animation-timing-function",
                "animationTimingFunction"
            ],
            "styleDeclarationProperty": "animationTimingFunction",
            "referenceValues": ["<easing-function>#"]
        },
        "animation-iteration-count": {
            "name": "animation-iteration-count",
            "value": "<single-animation-iteration-count>#",
            "initial": "1",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item either a number or the keyword infinite",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "infinite",
                    "prose": "The animation will repeat forever.",
                    "type": "value",
                    "value": "infinite"
                },
                {
                    "name": "<number [0,∞]>",
                    "prose": "The animation will repeat the specified number of times. If the number is not an integer, the animation will end partway through its last cycle. Negative numbers are invalid. A value of 0 is valid and, similar to an animation-duration of 0s, causes the animation to occur instantaneously.",
                    "type": "value",
                    "value": "<number [0,∞]>"
                }
            ],
            "styleDeclaration": [
                "animation-iteration-count",
                "animationIterationCount"
            ],
            "styleDeclarationProperty": "animationIterationCount",
            "referenceValues": ["<single-animation-iteration-count>#"]
        },
        "animation-direction": {
            "name": "animation-direction",
            "value": "<single-animation-direction>#",
            "initial": "normal",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a keyword as specified",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "normal",
                    "prose": "All iterations of the animation are played as specified.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "reverse",
                    "prose": "All iterations of the animation are played in the reverse direction from the way they were specified.",
                    "type": "value",
                    "value": "reverse"
                },
                {
                    "name": "alternate",
                    "prose": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.",
                    "type": "value",
                    "value": "alternate"
                },
                {
                    "name": "alternate-reverse",
                    "prose": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.",
                    "type": "value",
                    "value": "alternate-reverse"
                }
            ],
            "styleDeclaration": ["animation-direction", "animationDirection"],
            "styleDeclarationProperty": "animationDirection",
            "referenceValues": ["<single-animation-direction>#"]
        },
        "animation-play-state": {
            "name": "animation-play-state",
            "value": "<single-animation-play-state>#",
            "initial": "running",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a keyword as specified",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "running",
                    "prose": "While this property is set to running, the animation proceeds as normal.",
                    "type": "value",
                    "value": "running"
                },
                {
                    "name": "paused",
                    "prose": "While this property is set to paused, the animation is paused. The animation continues to apply to the element with the progress it had made before being paused. When unpaused (set back to running), it restarts from where it left off, as if the \"clock\" that controls the animation had stopped and started again. If the property is set to paused during the delay phase of the animation, the delay clock is also paused and resumes as soon as animation-play-state is set back to running.",
                    "type": "value",
                    "value": "paused"
                }
            ],
            "styleDeclaration": ["animation-play-state", "animationPlayState"],
            "styleDeclarationProperty": "animationPlayState",
            "referenceValues": ["<single-animation-play-state>#"]
        },
        "animation-delay": {
            "name": "animation-delay",
            "value": "<time>#",
            "initial": "0s",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a duration",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "<time>",
                    "prose": "The <time> defines how long of a delay there is between the start of the animation (when the animation is applied to the element via these properties) and when it begins executing. A delay of 0s (the initial value) means that the animation will execute as soon as it is applied. A negative delay is valid. Similar to a delay of 0s, it means that the animation executes immediately, but is automatically progressed by the absolute value of the delay, as if the animation had started the specified time in the past, and so it appears to start partway through its active duration. If an animation’s keyframes have an implied starting value, the values are taken from the time the animation starts, not some time in the past.",
                    "type": "value",
                    "value": "<time>"
                }
            ],
            "styleDeclaration": ["animation-delay", "animationDelay"],
            "styleDeclarationProperty": "animationDelay",
            "referenceValues": ["<time>#"]
        },
        "animation-fill-mode": {
            "name": "animation-fill-mode",
            "value": "<single-animation-fill-mode>#",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a keyword as specified",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "none",
                    "prose": "The animation has no effect when it is applied but not executing.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "forwards",
                    "prose": "After the animation ends (as determined by its animation-iteration-count), the animation will apply the property values for the time the animation ended. When animation-iteration-count is an integer greater than zero, the values applied will be those for the end of the last completed iteration of the animation (rather than the values for the start of the iteration that would be next). When animation-iteration-count is zero, the values applied will be those that would start the first iteration (just as when animation-fill-mode is backwards).",
                    "type": "value",
                    "value": "forwards"
                },
                {
                    "name": "backwards",
                    "prose": "During the period defined by animation-delay, the animation will apply the property values defined in the keyframe that will start the first iteration of the animation. These are either the values of the from keyframe (when animation-direction is normal or alternate) or those of the to keyframe (when animation-direction is reverse or alternate-reverse).",
                    "type": "value",
                    "value": "backwards"
                },
                {
                    "name": "both",
                    "prose": "The effects of both forwards and backwards fill apply.",
                    "type": "value",
                    "value": "both"
                }
            ],
            "styleDeclaration": ["animation-fill-mode", "animationFillMode"],
            "styleDeclarationProperty": "animationFillMode",
            "referenceValues": ["<single-animation-fill-mode>#"]
        },
        "animation": {
            "name": "animation",
            "value": "<single-animation>#",
            "initial": "see individual properties",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "styleDeclaration": ["animation"],
            "styleDeclarationProperty": "animation",
            "referenceValues": ["<single-animation>#"]
        },
        "background-position": {
            "name": "background-position",
            "value": "<bg-position>#",
            "initial": "0% 0%",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "refer to size of background positioning area minus size of background image; see text",
            "computedValue": "list, each item a pair of offsets (horizontal and vertical) from the top left origin each given as a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "repeatable list",
            "values": [
                {
                    "name": "<percentage>",
                    "prose": "A percentage for the horizontal offset is relative to (width of background positioning area - width of background image). A percentage for the vertical offset is relative to (height of background positioning area - height of background image), where the size of the image is the size given by background-size. For example, with a value pair of 0% 0%, the upper left corner of the image is aligned with the upper left corner of, usually, the box’s padding edge. A value pair of 100% 100% places the lower right corner of the image in the lower right corner of the area. With a value pair of 75% 50%, the point 75% across and 50% down the image is to be placed at the point 75% across and 50% down the area. Diagram of the meaning of background-position: 75% 50%.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "<length>",
                    "prose": "A length value gives a fixed length as the offset. For example, with a value pair of 2cm 1cm, the upper left corner of the image is placed 2cm to the right and 1cm below the upper left corner of the background positioning area.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "top",
                    "prose": "Computes to 0% for the vertical position if one or two values are given, otherwise specifies the top edge as the origin for the next offset.",
                    "type": "value",
                    "value": "top"
                },
                {
                    "name": "right",
                    "prose": "Computes to 100% for the horizontal position if one or two values are given, otherwise specifies the right edge as the origin for the next offset.",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "bottom",
                    "prose": "Computes to 100% for the vertical position if one or two values are given, otherwise specifies the bottom edge as the origin for the next offset.",
                    "type": "value",
                    "value": "bottom"
                },
                {
                    "name": "left",
                    "prose": "Computes to 0% for the horizontal position if one or two values are given, otherwise specifies the left edge as the origin for the next offset.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "center",
                    "prose": "Computes to 50% (left 50%) for the horizontal position if the horizontal position is not otherwise specified, or 50% (top 50%) for the vertical position if it is.",
                    "type": "value",
                    "value": "center"
                }
            ],
            "styleDeclaration": ["background-position", "backgroundPosition"],
            "styleDeclarationProperty": "backgroundPosition",
            "referenceValues": ["<bg-position>#"]
        },
        "background-position-x": {
            "name": "background-position-x",
            "value": "[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#",
            "initial": "0%",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "refer to width of background positioning area minus width of background image",
            "computedValue": "A list, each item consisting of: an offset given as a computed <length-percentage> value, plus an origin keyword",
            "canonicalOrder": "per grammar",
            "animationType": "repeatable list",
            "logicalPropertyGroup": "background-position",
            "styleDeclaration": [
                "background-position-x",
                "backgroundPositionX"
            ],
            "styleDeclarationProperty": "backgroundPositionX",
            "referenceValues": []
        },
        "background-position-y": {
            "name": "background-position-y",
            "value": "[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#",
            "initial": "0%",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "refer to height of background positioning area minus height of background image",
            "computedValue": "A list, each item consisting of: an offset given as a computed <length-percentage> value, plus an origin keyword",
            "canonicalOrder": "per grammar",
            "animationType": "repeatable list",
            "logicalPropertyGroup": "background-position",
            "styleDeclaration": [
                "background-position-y",
                "backgroundPositionY"
            ],
            "styleDeclarationProperty": "backgroundPositionY",
            "referenceValues": []
        },
        "background-position-inline": {
            "name": "background-position-inline",
            "value": "[ center | [ start | end ]? <length-percentage>? ]#",
            "initial": "0%",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "refer to inline-size of background positioning area minus inline-size of background image",
            "computedValue": "A list, each item consisting of: an offset given as a computed <length-percentage> value, plus an origin keyword",
            "canonicalOrder": "per grammar",
            "animationType": "repeatable list",
            "logicalPropertyGroup": "background-position",
            "styleDeclaration": [
                "background-position-inline",
                "backgroundPositionInline"
            ],
            "styleDeclarationProperty": "backgroundPositionInline",
            "referenceValues": []
        },
        "background-position-block": {
            "name": "background-position-block",
            "value": "[ center | [ start | end ]? <length-percentage>? ]#",
            "initial": "0%",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "refer to size of background positioning area minus size of background image",
            "computedValue": "A list, each item consisting of: an offset given as a computed <length-percentage> value, plus an origin keyword",
            "canonicalOrder": "per grammar",
            "animationType": "repeatable list",
            "logicalPropertyGroup": "background-position",
            "styleDeclaration": [
                "background-position-block",
                "backgroundPositionBlock"
            ],
            "styleDeclarationProperty": "backgroundPositionBlock",
            "referenceValues": []
        },
        "background-clip": {
            "name": "background-clip",
            "value": "<box>#",
            "initial": "border-box",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a keyword as specified",
            "canonicalOrder": "per grammar",
            "animationType": "repeatable list",
            "values": [
                {
                    "name": "border-box",
                    "prose": "The background is painted within (clipped to) the border box.",
                    "type": "value",
                    "value": "border-box"
                },
                {
                    "name": "padding-box",
                    "prose": "The background is painted within (clipped to) the padding box.",
                    "type": "value",
                    "value": "padding-box"
                },
                {
                    "name": "content-box",
                    "prose": "The background is painted within (clipped to) the content box.",
                    "type": "value",
                    "value": "content-box"
                }
            ],
            "styleDeclaration": ["background-clip", "backgroundClip"],
            "styleDeclarationProperty": "backgroundClip",
            "referenceValues": ["<box>#"]
        },
        "border-top-color": {
            "name": "border-top-color",
            "value": "<color>",
            "initial": "currentColor",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "computed color",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "logicalPropertyGroup": "border-color",
            "styleDeclaration": ["border-top-color", "borderTopColor"],
            "styleDeclarationProperty": "borderTopColor",
            "referenceValues": ["<color>"]
        },
        "border-right-color": {
            "name": "border-right-color",
            "value": "<color>",
            "initial": "currentColor",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "computed color",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "logicalPropertyGroup": "border-color",
            "styleDeclaration": ["border-right-color", "borderRightColor"],
            "styleDeclarationProperty": "borderRightColor",
            "referenceValues": ["<color>"]
        },
        "border-bottom-color": {
            "name": "border-bottom-color",
            "value": "<color>",
            "initial": "currentColor",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "computed color",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "logicalPropertyGroup": "border-color",
            "styleDeclaration": ["border-bottom-color", "borderBottomColor"],
            "styleDeclarationProperty": "borderBottomColor",
            "referenceValues": ["<color>"]
        },
        "border-left-color": {
            "name": "border-left-color",
            "value": "<color>",
            "initial": "currentColor",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "computed color",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "logicalPropertyGroup": "border-color",
            "styleDeclaration": ["border-left-color", "borderLeftColor"],
            "styleDeclarationProperty": "borderLeftColor",
            "referenceValues": ["<color>"]
        },
        "border-color": {
            "name": "border-color",
            "value": "<color>{1,4}",
            "initial": "(see individual properties)",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "see individual properties",
            "styleDeclaration": ["border-color", "borderColor"],
            "styleDeclarationProperty": "borderColor",
            "referenceValues": ["<color>{1,4}"]
        },
        "border-top-radius": {
            "name": "border-top-radius",
            "value": "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?",
            "initial": "0",
            "appliesTo": "all elements (but see prose)",
            "inherited": "no",
            "percentages": "Refer to corresponding dimension of the border box.",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animatable": "see individual properties",
            "styleDeclaration": ["border-top-radius", "borderTopRadius"],
            "styleDeclarationProperty": "borderTopRadius",
            "referenceValues": [
                "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?"
            ]
        },
        "border-right-radius": {
            "name": "border-right-radius",
            "value": "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?",
            "initial": "0",
            "appliesTo": "all elements (but see prose)",
            "inherited": "no",
            "percentages": "Refer to corresponding dimension of the border box.",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animatable": "see individual properties",
            "styleDeclaration": ["border-right-radius", "borderRightRadius"],
            "styleDeclarationProperty": "borderRightRadius",
            "referenceValues": [
                "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?"
            ]
        },
        "border-bottom-radius": {
            "name": "border-bottom-radius",
            "value": "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?",
            "initial": "0",
            "appliesTo": "all elements (but see prose)",
            "inherited": "no",
            "percentages": "Refer to corresponding dimension of the border box.",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animatable": "see individual properties",
            "styleDeclaration": ["border-bottom-radius", "borderBottomRadius"],
            "styleDeclarationProperty": "borderBottomRadius",
            "referenceValues": [
                "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?"
            ]
        },
        "border-left-radius": {
            "name": "border-left-radius",
            "value": "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?",
            "initial": "0",
            "appliesTo": "all elements (but see prose)",
            "inherited": "no",
            "percentages": "Refer to corresponding dimension of the border box.",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animatable": "see individual properties",
            "styleDeclaration": ["border-left-radius", "borderLeftRadius"],
            "styleDeclarationProperty": "borderLeftRadius",
            "referenceValues": [
                "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?"
            ]
        },
        "border-block-start-radius": {
            "name": "border-block-start-radius",
            "value": "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?",
            "initial": "0",
            "appliesTo": "all elements (but see prose)",
            "inherited": "no",
            "percentages": "Refer to corresponding dimension of the border box.",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animatable": "see individual properties",
            "styleDeclaration": [
                "border-block-start-radius",
                "borderBlockStartRadius"
            ],
            "styleDeclarationProperty": "borderBlockStartRadius",
            "referenceValues": [
                "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?"
            ]
        },
        "border-block-end-radius": {
            "name": "border-block-end-radius",
            "value": "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?",
            "initial": "0",
            "appliesTo": "all elements (but see prose)",
            "inherited": "no",
            "percentages": "Refer to corresponding dimension of the border box.",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animatable": "see individual properties",
            "styleDeclaration": [
                "border-block-end-radius",
                "borderBlockEndRadius"
            ],
            "styleDeclarationProperty": "borderBlockEndRadius",
            "referenceValues": [
                "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?"
            ]
        },
        "border-inline-start-radius": {
            "name": "border-inline-start-radius",
            "value": "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?",
            "initial": "0",
            "appliesTo": "all elements (but see prose)",
            "inherited": "no",
            "percentages": "Refer to corresponding dimension of the border box.",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animatable": "see individual properties",
            "styleDeclaration": [
                "border-inline-start-radius",
                "borderInlineStartRadius"
            ],
            "styleDeclarationProperty": "borderInlineStartRadius",
            "referenceValues": [
                "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?"
            ]
        },
        "border-inline-end-radius": {
            "name": "border-inline-end-radius",
            "value": "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?",
            "initial": "0",
            "appliesTo": "all elements (but see prose)",
            "inherited": "no",
            "percentages": "Refer to corresponding dimension of the border box.",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animatable": "see individual properties",
            "styleDeclaration": [
                "border-inline-end-radius",
                "borderInlineEndRadius"
            ],
            "styleDeclarationProperty": "borderInlineEndRadius",
            "referenceValues": [
                "<length-percentage [0,∞]>{1,2} [ / <length-percentage [0,∞]>{1,2} ]?"
            ]
        },
        "border-radius": {
            "name": "border-radius",
            "value": "<length-percentage [0,∞]>{1,4} [ / <length-percentage [0,∞]>{1,4} ]?",
            "initial": "see individual properties",
            "appliesTo": "all elements (but see prose)",
            "inherited": "no",
            "percentages": "Refer to corresponding dimension of the border box.",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "see individual properties",
            "styleDeclaration": ["border-radius", "borderRadius"],
            "styleDeclarationProperty": "borderRadius",
            "referenceValues": [
                "<length-percentage [0,∞]>{1,4} [ / <length-percentage [0,∞]>{1,4} ]?"
            ]
        },
        "corner-shape": {
            "name": "corner-shape",
            "value": "[ round | angle ]{1,4}",
            "initial": "round",
            "appliesTo": "all elements, except table element when border-collapse is collapse",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "round",
                    "prose": "Border radii define a convex elliptical curve at the corner.",
                    "type": "value",
                    "value": "round"
                },
                {
                    "name": "angle",
                    "prose": "Border radii define a diagonal slice at the corner.",
                    "type": "value",
                    "value": "angle"
                }
            ],
            "styleDeclaration": ["corner-shape", "cornerShape"],
            "styleDeclarationProperty": "cornerShape",
            "referenceValues": []
        },
        "corners": {
            "name": "corners",
            "value": "<'corner-shape'> || <'border-radius'>",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["corners"],
            "styleDeclarationProperty": "corners",
            "referenceValues": ["<'corner-shape'>", "<'border-radius'>"]
        },
        "border-limit": {
            "name": "border-limit",
            "value": "all | [ sides | corners ] <length-percentage [0,∞]>? | [ top | right | bottom | left ] <length-percentage [0,∞]>",
            "initial": "round",
            "appliesTo": "all elements, except table element when border-collapse is collapse",
            "inherited": "no",
            "percentages": "relative to border-box",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "sides",
                    "prose": "The sides are drawn up to but not including the corners (as defined by the border radii). A length or percentage is measured from the center of each side: 50% draws the middle 50% of the border; by default the entire side is drawn.",
                    "type": "value",
                    "value": "sides"
                },
                {
                    "name": "corners",
                    "prose": "The corners are drawn plus the specified distance into the sides if specified. A length is measured from the closest edge of the corner area. A percentage is measured from the absolute corner of the border box.",
                    "type": "value",
                    "value": "corners"
                },
                {
                    "name": "left",
                    "prose": "For the left and right (vertical) sides, draws the entire side and corner. For the top and bottom (horizontal) sides, draws the left/right portion, as specified. Distances are measured as for corners.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "right",
                    "prose": "For the left and right (vertical) sides, draws the entire side and corner. For the top and bottom (horizontal) sides, draws the left/right portion, as specified. Distances are measured as for corners.",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "top",
                    "prose": "For the top and bottom (horizontal) sides, draws the entire side and corner. For the left and right (vertical) sides, draws the top/bottom portion, as specified. Distances are measured as for corners.",
                    "type": "value",
                    "value": "top"
                },
                {
                    "name": "bottom",
                    "prose": "For the top and bottom (horizontal) sides, draws the entire side and corner. For the left and right (vertical) sides, draws the top/bottom portion, as specified. Distances are measured as for corners.",
                    "type": "value",
                    "value": "bottom"
                }
            ],
            "styleDeclaration": ["border-limit", "borderLimit"],
            "styleDeclarationProperty": "borderLimit",
            "referenceValues": []
        },
        "border-clip": {
            "name": "border-clip",
            "value": "normal | [ <length-percentage [0,∞]> | <flex> ]+",
            "initial": "normal",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "refer to length of border-edge side",
            "computedValue": "normal, or a list consisting of absolute lengths, or percentages as specified",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "styleDeclaration": ["border-clip", "borderClip"],
            "styleDeclarationProperty": "borderClip",
            "referenceValues": ["<flex> ]+"]
        },
        "border-clip-top": {
            "name": "border-clip-top",
            "value": "normal | [ <length-percentage [0,∞]> | <flex> ]+",
            "initial": "normal",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "refer to length of border-edge side",
            "computedValue": "normal, or a list consisting of absolute lengths, or percentages as specified",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "styleDeclaration": ["border-clip-top", "borderClipTop"],
            "styleDeclarationProperty": "borderClipTop",
            "referenceValues": ["<flex> ]+"]
        },
        "border-clip-right": {
            "name": "border-clip-right",
            "value": "normal | [ <length-percentage [0,∞]> | <flex> ]+",
            "initial": "normal",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "refer to length of border-edge side",
            "computedValue": "normal, or a list consisting of absolute lengths, or percentages as specified",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "styleDeclaration": ["border-clip-right", "borderClipRight"],
            "styleDeclarationProperty": "borderClipRight",
            "referenceValues": ["<flex> ]+"]
        },
        "border-clip-bottom": {
            "name": "border-clip-bottom",
            "value": "normal | [ <length-percentage [0,∞]> | <flex> ]+",
            "initial": "normal",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "refer to length of border-edge side",
            "computedValue": "normal, or a list consisting of absolute lengths, or percentages as specified",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "styleDeclaration": ["border-clip-bottom", "borderClipBottom"],
            "styleDeclarationProperty": "borderClipBottom",
            "referenceValues": ["<flex> ]+"]
        },
        "border-clip-left": {
            "name": "border-clip-left",
            "value": "normal | [ <length-percentage [0,∞]> | <flex> ]+",
            "initial": "normal",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "refer to length of border-edge side",
            "computedValue": "normal, or a list consisting of absolute lengths, or percentages as specified",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "styleDeclaration": ["border-clip-left", "borderClipLeft"],
            "styleDeclarationProperty": "borderClipLeft",
            "referenceValues": ["<flex> ]+"]
        },
        "box-shadow-color": {
            "name": "box-shadow-color",
            "value": "<color>#",
            "initial": "currentcolor",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a computed color",
            "canonicalOrder": "per grammar",
            "animatable": "by computed value",
            "styleDeclaration": ["box-shadow-color", "boxShadowColor"],
            "styleDeclarationProperty": "boxShadowColor",
            "referenceValues": ["<color>#"]
        },
        "box-shadow-offset": {
            "name": "box-shadow-offset",
            "value": "[ none | <length>{2} ]#",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "either none or a list, each item a pair of offsets (horizontal and vertical) from the element‘s box",
            "canonicalOrder": "per grammar",
            "animatable": "by computed value",
            "styleDeclaration": ["box-shadow-offset", "boxShadowOffset"],
            "styleDeclarationProperty": "boxShadowOffset",
            "referenceValues": ["<length>{2} ]#"]
        },
        "box-shadow-blur": {
            "name": "box-shadow-blur",
            "value": "<length [0,∞]>#",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a <length>",
            "canonicalOrder": "per grammar",
            "animatable": "by computed value",
            "styleDeclaration": ["box-shadow-blur", "boxShadowBlur"],
            "styleDeclarationProperty": "boxShadowBlur",
            "referenceValues": ["<length [0,∞]>#"]
        },
        "box-shadow-spread": {
            "name": "box-shadow-spread",
            "value": "<length>#",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a <length>",
            "canonicalOrder": "per grammar",
            "animatable": "by computed value",
            "styleDeclaration": ["box-shadow-spread", "boxShadowSpread"],
            "styleDeclarationProperty": "boxShadowSpread",
            "referenceValues": ["<length>#"]
        },
        "box-shadow-position": {
            "name": "box-shadow-position",
            "value": "[ outset | inset ]#",
            "initial": "outset",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item one of the keywords",
            "canonicalOrder": "per grammar",
            "animatable": "by computed value",
            "values": [
                {
                    "name": "outset",
                    "prose": "Causes the drop shadow to be an outer box-shadow. That means, one that shadows the box onto the canvas, as if it were lifted above the canvas.",
                    "type": "value",
                    "value": "outset"
                },
                {
                    "name": "outer box-shadow",
                    "type": "value",
                    "value": "outer box-shadow"
                },
                {
                    "name": "inset",
                    "prose": "Causes the drop shadow to be an inner box-shadow. That means, one that shadows the canvas onto the box, as if the box were cut out of the canvas and shifted behind it.",
                    "type": "value",
                    "value": "inset"
                },
                {
                    "name": "inner box-shadow",
                    "type": "value",
                    "value": "inner box-shadow"
                }
            ],
            "styleDeclaration": ["box-shadow-position", "boxShadowPosition"],
            "styleDeclarationProperty": "boxShadowPosition",
            "referenceValues": []
        },
        "box-shadow": {
            "name": "box-shadow",
            "value": "none | <shadow>#",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "either the keyword none or a list, each item consisting of four absolute lengths plus a computed color and optionally also a inset keyword",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value, treating none as a zero-item list and appending blank shadows (transparent 0 0 0 0) with a corresponding inset keyword as needed to match the longer list if the shorter list is otherwise compatible with the longer one",
            "values": [
                {
                    "name": "none",
                    "prose": "The box-shadow property attaches one or more drop-shadows to the box. The property accepts either the none value, which indicates no shadows, or a comma-separated list of shadows, ordered front to back.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<color>",
                    "prose": "Specifies the color of the shadow. If the color is absent, it defaults to currentColor.",
                    "type": "value",
                    "value": "<color>"
                },
                {
                    "name": "inset",
                    "prose": "If present, the inset keyword changes the drop shadow from an outer box-shadow (one that shadows the box onto the canvas, as if it were lifted above the canvas) to an inner box-shadow (one that shadows the canvas onto the box, as if the box were cut out of the canvas and shifted behind it).",
                    "type": "value",
                    "value": "inset"
                }
            ],
            "styleDeclaration": ["box-shadow", "boxShadow"],
            "styleDeclarationProperty": "boxShadow",
            "referenceValues": ["<shadow>#"]
        },
        "background-color": {
            "name": "background-color",
            "value": "<color>",
            "initial": "transparent",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "computed color",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "styleDeclaration": ["background-color", "backgroundColor"],
            "styleDeclarationProperty": "backgroundColor",
            "referenceValues": ["<color>"]
        },
        "background-image": {
            "name": "background-image",
            "value": "<bg-image>#",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "computed <image>",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "A value of none counts as an image layer but draws nothing. An image that is empty (zero width or zero height), that fails to download, or that cannot be displayed (e.g., because it is not in a supported image format) likewise counts as a layer but draws nothing.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["background-image", "backgroundImage"],
            "styleDeclarationProperty": "backgroundImage",
            "referenceValues": ["<bg-image>#"]
        },
        "background-repeat": {
            "name": "background-repeat",
            "value": "<repeat-style>#",
            "initial": "repeat",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a pair of keywords, one per dimension",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "repeat-x",
                    "prose": "Computes to repeat no-repeat.",
                    "type": "value",
                    "value": "repeat-x"
                },
                {
                    "name": "repeat-y",
                    "prose": "Computes to no-repeat repeat.",
                    "type": "value",
                    "value": "repeat-y"
                },
                {
                    "name": "repeat",
                    "prose": "The image is repeated in this direction as often as needed to cover the background painting area.",
                    "type": "value",
                    "value": "repeat"
                },
                {
                    "name": "space",
                    "prose": "The image is repeated as often as will fit within the background positioning area without being clipped and then the images are spaced out to fill the area. The first and last images touch the edges of the area. If the background painting area is larger than the background positioning area, then the pattern repeats to fill the background painting area. The value of background-position for this direction is ignored, unless there is not enough space for two copies of the image in this direction, in which case only one image is placed and background-position determines its position in this direction.",
                    "type": "value",
                    "value": "space"
                },
                {
                    "name": "round",
                    "prose": "The image is repeated as often as will fit within the background positioning area. If it doesn’t fit a whole number of times, it is rescaled so that it does. See the formula under background-size. If the background painting area is larger than the background positioning area, then the pattern repeats to fill the background painting area.",
                    "type": "value",
                    "value": "round"
                },
                {
                    "name": "no-repeat",
                    "prose": "The image is placed once and not repeated in this direction.",
                    "type": "value",
                    "value": "no-repeat"
                }
            ],
            "styleDeclaration": ["background-repeat", "backgroundRepeat"],
            "styleDeclarationProperty": "backgroundRepeat",
            "referenceValues": ["<repeat-style>#"]
        },
        "background-attachment": {
            "name": "background-attachment",
            "value": "<attachment>#",
            "initial": "scroll",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item the keyword as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "fixed",
                    "prose": "The background is fixed with regard to the viewport. In paged media where there is no viewport, a fixed background is fixed with respect to the page box and therefore replicated on every page.",
                    "type": "value",
                    "value": "fixed"
                },
                {
                    "name": "local",
                    "prose": "The background is fixed with regard to the element’s contents: if the element has a scrolling mechanism, the background scrolls with the element’s contents, and the background painting area and background positioning area are relative to the scrollable area of the element rather than to the border framing them. Because the scrollable area does not include the border area, for scrollable elements the border-box value of background-clip may be treated the same as padding-box.",
                    "type": "value",
                    "value": "local"
                },
                {
                    "name": "scroll",
                    "prose": "The background is fixed with regard to the element itself and does not scroll with its contents. (It is effectively attached to the element’s border.)",
                    "type": "value",
                    "value": "scroll"
                }
            ],
            "styleDeclaration": [
                "background-attachment",
                "backgroundAttachment"
            ],
            "styleDeclarationProperty": "backgroundAttachment",
            "referenceValues": ["<attachment>#"]
        },
        "background-origin": {
            "name": "background-origin",
            "value": "<box>#",
            "initial": "padding-box",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a keyword as specified",
            "canonicalOrder": "per grammar",
            "animationType": "repeatable list",
            "values": [
                {
                    "name": "padding-box",
                    "prose": "The position is relative to the padding box. (For single boxes 0 0 is the upper left corner of the padding edge, 100% 100% is the lower right corner.)",
                    "type": "value",
                    "value": "padding-box"
                },
                {
                    "name": "border-box",
                    "prose": "The position is relative to the border box.",
                    "type": "value",
                    "value": "border-box"
                },
                {
                    "name": "content-box",
                    "prose": "The position is relative to the content box.",
                    "type": "value",
                    "value": "content-box"
                }
            ],
            "styleDeclaration": ["background-origin", "backgroundOrigin"],
            "styleDeclarationProperty": "backgroundOrigin",
            "referenceValues": ["<box>#"]
        },
        "background-size": {
            "name": "background-size",
            "value": "<bg-size>#",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "see text",
            "computedValue": "list, each item a pair of sizes (one per axis) each represented as either a keyword or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "repeatable list",
            "values": [
                {
                    "name": "contain",
                    "prose": "Scale the image, while preserving its natural aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area.",
                    "type": "value",
                    "value": "contain"
                },
                {
                    "name": "cover",
                    "prose": "Scale the image, while preserving its natural aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area.",
                    "type": "value",
                    "value": "cover"
                },
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "The first value gives the width of the corresponding image, the second value its height. If only one value is given the second is assumed to be auto. A percentage is relative to the background positioning area. An auto value for one dimension is resolved by using the image’s natural aspect ratio and the size of the other dimension, or failing that, using the image’s natural size, or failing that, treating it as 100%. If both values are auto then the natural width and/or height of the image should be used, if any, the missing dimension (if any) behaving as auto as described above. If the image has neither natural size, its size is determined as for contain. Negative values are invalid.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "auto",
                    "prose": "The first value gives the width of the corresponding image, the second value its height. If only one value is given the second is assumed to be auto. A percentage is relative to the background positioning area. An auto value for one dimension is resolved by using the image’s natural aspect ratio and the size of the other dimension, or failing that, using the image’s natural size, or failing that, treating it as 100%. If both values are auto then the natural width and/or height of the image should be used, if any, the missing dimension (if any) behaving as auto as described above. If the image has neither natural size, its size is determined as for contain. Negative values are invalid.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["background-size", "backgroundSize"],
            "styleDeclarationProperty": "backgroundSize",
            "referenceValues": ["<bg-size>#"]
        },
        "background": {
            "name": "background",
            "value": "[<bg-layer># ,]? <final-bg-layer>",
            "initial": "see individual properties",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "see individual properties",
            "styleDeclaration": ["background"],
            "styleDeclarationProperty": "background",
            "referenceValues": []
        },
        "border-top-style": {
            "name": "border-top-style",
            "value": "<line-style>",
            "initial": "none",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "border-style",
            "styleDeclaration": ["border-top-style", "borderTopStyle"],
            "styleDeclarationProperty": "borderTopStyle",
            "referenceValues": ["<line-style>"]
        },
        "border-right-style": {
            "name": "border-right-style",
            "value": "<line-style>",
            "initial": "none",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "border-style",
            "styleDeclaration": ["border-right-style", "borderRightStyle"],
            "styleDeclarationProperty": "borderRightStyle",
            "referenceValues": ["<line-style>"]
        },
        "border-bottom-style": {
            "name": "border-bottom-style",
            "value": "<line-style>",
            "initial": "none",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "border-style",
            "styleDeclaration": ["border-bottom-style", "borderBottomStyle"],
            "styleDeclarationProperty": "borderBottomStyle",
            "referenceValues": ["<line-style>"]
        },
        "border-left-style": {
            "name": "border-left-style",
            "value": "<line-style>",
            "initial": "none",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "border-style",
            "styleDeclaration": ["border-left-style", "borderLeftStyle"],
            "styleDeclarationProperty": "borderLeftStyle",
            "referenceValues": ["<line-style>"]
        },
        "border-style": {
            "name": "border-style",
            "value": "<line-style>{1,4}",
            "initial": "(see individual properties)",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "see individual properties",
            "styleDeclaration": ["border-style", "borderStyle"],
            "styleDeclarationProperty": "borderStyle",
            "referenceValues": ["<line-style>{1,4}"]
        },
        "border-top-width": {
            "name": "border-top-width",
            "value": "<line-width>",
            "initial": "medium",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "absolute length, snapped as a border width; zero if the border style is none or hidden",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "logicalPropertyGroup": "border-width",
            "styleDeclaration": ["border-top-width", "borderTopWidth"],
            "styleDeclarationProperty": "borderTopWidth",
            "referenceValues": ["<line-width>"]
        },
        "border-right-width": {
            "name": "border-right-width",
            "value": "<line-width>",
            "initial": "medium",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "absolute length, snapped as a border width; zero if the border style is none or hidden",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "logicalPropertyGroup": "border-width",
            "styleDeclaration": ["border-right-width", "borderRightWidth"],
            "styleDeclarationProperty": "borderRightWidth",
            "referenceValues": ["<line-width>"]
        },
        "border-bottom-width": {
            "name": "border-bottom-width",
            "value": "<line-width>",
            "initial": "medium",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "absolute length, snapped as a border width; zero if the border style is none or hidden",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "logicalPropertyGroup": "border-width",
            "styleDeclaration": ["border-bottom-width", "borderBottomWidth"],
            "styleDeclarationProperty": "borderBottomWidth",
            "referenceValues": ["<line-width>"]
        },
        "border-left-width": {
            "name": "border-left-width",
            "value": "<line-width>",
            "initial": "medium",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "absolute length, snapped as a border width; zero if the border style is none or hidden",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "logicalPropertyGroup": "border-width",
            "styleDeclaration": ["border-left-width", "borderLeftWidth"],
            "styleDeclarationProperty": "borderLeftWidth",
            "referenceValues": ["<line-width>"]
        },
        "border-width": {
            "name": "border-width",
            "value": "<line-width>{1,4}",
            "initial": "(see individual properties)",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "see individual properties",
            "styleDeclaration": ["border-width", "borderWidth"],
            "styleDeclarationProperty": "borderWidth",
            "referenceValues": ["<line-width>{1,4}"]
        },
        "border-top": {
            "name": "border-top",
            "value": "<line-width> || <line-style> || <color>",
            "initial": "See individual properties",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "see individual properties",
            "styleDeclaration": ["border-top", "borderTop"],
            "styleDeclarationProperty": "borderTop",
            "referenceValues": ["<line-width>", "<line-style>", "<color>"]
        },
        "border-right": {
            "name": "border-right",
            "value": "<line-width> || <line-style> || <color>",
            "initial": "See individual properties",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "see individual properties",
            "styleDeclaration": ["border-right", "borderRight"],
            "styleDeclarationProperty": "borderRight",
            "referenceValues": ["<line-width>", "<line-style>", "<color>"]
        },
        "border-bottom": {
            "name": "border-bottom",
            "value": "<line-width> || <line-style> || <color>",
            "initial": "See individual properties",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "see individual properties",
            "styleDeclaration": ["border-bottom", "borderBottom"],
            "styleDeclarationProperty": "borderBottom",
            "referenceValues": ["<line-width>", "<line-style>", "<color>"]
        },
        "border-left": {
            "name": "border-left",
            "value": "<line-width> || <line-style> || <color>",
            "initial": "See individual properties",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "see individual properties",
            "styleDeclaration": ["border-left", "borderLeft"],
            "styleDeclarationProperty": "borderLeft",
            "referenceValues": ["<line-width>", "<line-style>", "<color>"]
        },
        "border": {
            "name": "border",
            "value": "<line-width> || <line-style> || <color>",
            "initial": "See individual properties",
            "appliesTo": "all elements except ruby base containers and ruby annotation containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "see individual properties",
            "styleDeclaration": ["border"],
            "styleDeclarationProperty": "border",
            "referenceValues": ["<line-width>", "<line-style>", "<color>"]
        },
        "border-top-left-radius": {
            "name": "border-top-left-radius",
            "value": "<length-percentage [0,∞]>{1,2}",
            "initial": "0",
            "appliesTo": "all elements (but see prose)",
            "inherited": "no",
            "percentages": "Refer to corresponding dimension of the border box.",
            "computedValue": "pair of computed <length-percentage> values",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "logicalPropertyGroup": "border-radius",
            "styleDeclaration": [
                "border-top-left-radius",
                "borderTopLeftRadius"
            ],
            "styleDeclarationProperty": "borderTopLeftRadius",
            "referenceValues": ["<length-percentage [0,∞]>{1,2}"]
        },
        "border-top-right-radius": {
            "name": "border-top-right-radius",
            "value": "<length-percentage [0,∞]>{1,2}",
            "initial": "0",
            "appliesTo": "all elements (but see prose)",
            "inherited": "no",
            "percentages": "Refer to corresponding dimension of the border box.",
            "computedValue": "pair of computed <length-percentage> values",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "logicalPropertyGroup": "border-radius",
            "styleDeclaration": [
                "border-top-right-radius",
                "borderTopRightRadius"
            ],
            "styleDeclarationProperty": "borderTopRightRadius",
            "referenceValues": ["<length-percentage [0,∞]>{1,2}"]
        },
        "border-bottom-right-radius": {
            "name": "border-bottom-right-radius",
            "value": "<length-percentage [0,∞]>{1,2}",
            "initial": "0",
            "appliesTo": "all elements (but see prose)",
            "inherited": "no",
            "percentages": "Refer to corresponding dimension of the border box.",
            "computedValue": "pair of computed <length-percentage> values",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "logicalPropertyGroup": "border-radius",
            "styleDeclaration": [
                "border-bottom-right-radius",
                "borderBottomRightRadius"
            ],
            "styleDeclarationProperty": "borderBottomRightRadius",
            "referenceValues": ["<length-percentage [0,∞]>{1,2}"]
        },
        "border-bottom-left-radius": {
            "name": "border-bottom-left-radius",
            "value": "<length-percentage [0,∞]>{1,2}",
            "initial": "0",
            "appliesTo": "all elements (but see prose)",
            "inherited": "no",
            "percentages": "Refer to corresponding dimension of the border box.",
            "computedValue": "pair of computed <length-percentage> values",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "logicalPropertyGroup": "border-radius",
            "styleDeclaration": [
                "border-bottom-left-radius",
                "borderBottomLeftRadius"
            ],
            "styleDeclarationProperty": "borderBottomLeftRadius",
            "referenceValues": ["<length-percentage [0,∞]>{1,2}"]
        },
        "border-image-source": {
            "name": "border-image-source",
            "value": "none | <image>",
            "initial": "none",
            "appliesTo": "All elements, except internal table elements when border-collapse is collapse",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "the keyword none or the computed <image>",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["border-image-source", "borderImageSource"],
            "styleDeclarationProperty": "borderImageSource",
            "referenceValues": ["<image>"]
        },
        "border-image-slice": {
            "name": "border-image-slice",
            "value": "[<number [0,∞]> | <percentage [0,∞]>]{1,4} && fill?",
            "initial": "100%",
            "appliesTo": "All elements, except internal table elements when border-collapse is collapse",
            "inherited": "no",
            "percentages": "refer to size of the border image",
            "computedValue": "four values, each either a number or percentage; plus a fill keyword if specified",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "<percentage [0,∞]>",
                    "prose": "Percentages are relative to the size of the image: the width of the image for the horizontal offsets, the height for vertical offsets.",
                    "type": "value",
                    "value": "<percentage [0,∞]>"
                },
                {
                    "name": "<number [0,∞]>",
                    "prose": "Numbers represent pixels in the image (if the image is a raster image) or vector coordinates (if the image is a vector image).",
                    "type": "value",
                    "value": "<number [0,∞]>"
                },
                {
                    "name": "fill",
                    "prose": "The fill keyword, if present, causes the middle part of the border-image to be preserved. (By default it is discarded, i.e., treated as empty.)",
                    "type": "value",
                    "value": "fill"
                }
            ],
            "styleDeclaration": ["border-image-slice", "borderImageSlice"],
            "styleDeclarationProperty": "borderImageSlice",
            "referenceValues": ["<percentage [0,∞]>]{1,4} && fill?"]
        },
        "border-image-width": {
            "name": "border-image-width",
            "value": "[ <length-percentage [0,∞]> | <number [0,∞]> | auto ]{1,4}",
            "initial": "1",
            "appliesTo": "All elements, except internal table elements when border-collapse is collapse",
            "inherited": "no",
            "percentages": "Relative to width/height of the border image area",
            "computedValue": "four values, each either a number, the keyword auto, or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Percentages refer to the size of the border image area: the width of the area for horizontal offsets, the height for vertical offsets.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "<number [0,∞]>",
                    "prose": "Numbers represent multiples of the corresponding computed border-width.",
                    "type": "value",
                    "value": "<number [0,∞]>"
                },
                {
                    "name": "auto",
                    "prose": "If auto is specified then the border image width is the natural width or height (whichever is applicable) of the corresponding image slice (see border-image-slice). If the image does not have the required natural dimension then the corresponding computed border-width is used instead.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["border-image-width", "borderImageWidth"],
            "styleDeclarationProperty": "borderImageWidth",
            "referenceValues": ["<number [0,∞]>"]
        },
        "border-image-outset": {
            "name": "border-image-outset",
            "value": "[ <length [0,∞]> | <number [0,∞]> ]{1,4}",
            "initial": "0",
            "appliesTo": "All elements, except internal table elements when border-collapse is collapse",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "four values, each a number or absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "styleDeclaration": ["border-image-outset", "borderImageOutset"],
            "styleDeclarationProperty": "borderImageOutset",
            "referenceValues": ["<number [0,∞]> ]{1,4}"]
        },
        "border-image-repeat": {
            "name": "border-image-repeat",
            "value": "[ stretch | repeat | round | space ]{1,2}",
            "initial": "stretch",
            "appliesTo": "All elements, except internal table elements when border-collapse is collapse",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "two keywords, one per axis",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "stretch",
                    "prose": "The image is stretched to fill the area.",
                    "type": "value",
                    "value": "stretch"
                },
                {
                    "name": "repeat",
                    "prose": "The image is tiled (repeated) to fill the area.",
                    "type": "value",
                    "value": "repeat"
                },
                {
                    "name": "round",
                    "prose": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does.",
                    "type": "value",
                    "value": "round"
                },
                {
                    "name": "space",
                    "prose": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles.",
                    "type": "value",
                    "value": "space"
                }
            ],
            "styleDeclaration": ["border-image-repeat", "borderImageRepeat"],
            "styleDeclarationProperty": "borderImageRepeat",
            "referenceValues": []
        },
        "border-image": {
            "name": "border-image",
            "value": "<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>",
            "initial": "See individual properties",
            "appliesTo": "See individual properties",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "See individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "See individual properties",
            "styleDeclaration": ["border-image", "borderImage"],
            "styleDeclarationProperty": "borderImage",
            "referenceValues": [
                "<'border-image-source'>",
                "<'border-image-slice'> [ / <'border-image-width'>",
                "<'border-image-repeat'>"
            ]
        },
        "margin-top": {
            "name": "margin-top",
            "value": "<length-percentage> | auto",
            "initial": "0",
            "appliesTo": "all elements except internal table elements, ruby base containers, and ruby annotation containers",
            "inherited": "no",
            "percentages": "refer to logical width of containing block",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "margin",
            "styleDeclaration": ["margin-top", "marginTop"],
            "styleDeclarationProperty": "marginTop",
            "referenceValues": ["<length-percentage>"]
        },
        "margin-right": {
            "name": "margin-right",
            "value": "<length-percentage> | auto",
            "initial": "0",
            "appliesTo": "all elements except internal table elements, ruby base containers, and ruby annotation containers",
            "inherited": "no",
            "percentages": "refer to logical width of containing block",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "margin",
            "styleDeclaration": ["margin-right", "marginRight"],
            "styleDeclarationProperty": "marginRight",
            "referenceValues": ["<length-percentage>"]
        },
        "margin-bottom": {
            "name": "margin-bottom",
            "value": "<length-percentage> | auto",
            "initial": "0",
            "appliesTo": "all elements except internal table elements, ruby base containers, and ruby annotation containers",
            "inherited": "no",
            "percentages": "refer to logical width of containing block",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "margin",
            "styleDeclaration": ["margin-bottom", "marginBottom"],
            "styleDeclarationProperty": "marginBottom",
            "referenceValues": ["<length-percentage>"]
        },
        "margin-left": {
            "name": "margin-left",
            "value": "<length-percentage> | auto",
            "initial": "0",
            "appliesTo": "all elements except internal table elements, ruby base containers, and ruby annotation containers",
            "inherited": "no",
            "percentages": "refer to logical width of containing block",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "margin",
            "styleDeclaration": ["margin-left", "marginLeft"],
            "styleDeclarationProperty": "marginLeft",
            "referenceValues": ["<length-percentage>"]
        },
        "margin": {
            "name": "margin",
            "value": "<'margin-top'>{1,4}",
            "initial": "0",
            "appliesTo": "all elements except internal table elements, ruby base containers, and ruby annotation containers",
            "inherited": "no",
            "percentages": "refer to logical width of containing block",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["margin"],
            "styleDeclarationProperty": "margin",
            "referenceValues": ["<'margin-top'>{1,4}"]
        },
        "margin-trim": {
            "name": "margin-trim",
            "value": "none | block | inline | [ block-start || inline-start || block-end || inline-end ]",
            "initial": "none",
            "appliesTo": "block containers, multi-column containers, flex containers, grid containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "a set of zero to four keywords indicating which sides to trim",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "Margins are not trimmed by the container.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "block-start",
                    "prose": "For in-flow boxes and floats contained by this box, margins adjacent to the box’s specified edges are truncated to zero. It also truncates any descendant margins collapsed with such a margin (but not its own, its siblings’, or its ancestors’).",
                    "type": "value",
                    "value": "block-start"
                },
                {
                    "name": "inline-start",
                    "prose": "For in-flow boxes and floats contained by this box, margins adjacent to the box’s specified edges are truncated to zero. It also truncates any descendant margins collapsed with such a margin (but not its own, its siblings’, or its ancestors’).",
                    "type": "value",
                    "value": "inline-start"
                },
                {
                    "name": "inline-end",
                    "prose": "For in-flow boxes and floats contained by this box, margins adjacent to the box’s specified edges are truncated to zero. It also truncates any descendant margins collapsed with such a margin (but not its own, its siblings’, or its ancestors’).",
                    "type": "value",
                    "value": "inline-end"
                },
                {
                    "name": "block-end",
                    "prose": "For in-flow boxes and floats contained by this box, margins adjacent to the box’s specified edges are truncated to zero. It also truncates any descendant margins collapsed with such a margin (but not its own, its siblings’, or its ancestors’).",
                    "type": "value",
                    "value": "block-end"
                },
                {
                    "name": "block",
                    "prose": "Computes to block-start block-end.",
                    "type": "value",
                    "value": "block"
                },
                {
                    "name": "inline",
                    "prose": "Computes to inline-start inline-end.",
                    "type": "value",
                    "value": "inline"
                }
            ],
            "styleDeclaration": ["margin-trim", "marginTrim"],
            "styleDeclarationProperty": "marginTrim",
            "referenceValues": []
        },
        "padding-top": {
            "name": "padding-top",
            "value": "<length-percentage [0,∞]>",
            "initial": "0",
            "appliesTo": "all elements except: internal table elements other than table cells, ruby base containers, and ruby annotation containers",
            "inherited": "no",
            "percentages": "refer to logical width of containing block",
            "computedValue": "a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "padding",
            "styleDeclaration": ["padding-top", "paddingTop"],
            "styleDeclarationProperty": "paddingTop",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "padding-right": {
            "name": "padding-right",
            "value": "<length-percentage [0,∞]>",
            "initial": "0",
            "appliesTo": "all elements except: internal table elements other than table cells, ruby base containers, and ruby annotation containers",
            "inherited": "no",
            "percentages": "refer to logical width of containing block",
            "computedValue": "a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "padding",
            "styleDeclaration": ["padding-right", "paddingRight"],
            "styleDeclarationProperty": "paddingRight",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "padding-bottom": {
            "name": "padding-bottom",
            "value": "<length-percentage [0,∞]>",
            "initial": "0",
            "appliesTo": "all elements except: internal table elements other than table cells, ruby base containers, and ruby annotation containers",
            "inherited": "no",
            "percentages": "refer to logical width of containing block",
            "computedValue": "a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "padding",
            "styleDeclaration": ["padding-bottom", "paddingBottom"],
            "styleDeclarationProperty": "paddingBottom",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "padding-left": {
            "name": "padding-left",
            "value": "<length-percentage [0,∞]>",
            "initial": "0",
            "appliesTo": "all elements except: internal table elements other than table cells, ruby base containers, and ruby annotation containers",
            "inherited": "no",
            "percentages": "refer to logical width of containing block",
            "computedValue": "a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "padding",
            "styleDeclaration": ["padding-left", "paddingLeft"],
            "styleDeclarationProperty": "paddingLeft",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "padding": {
            "name": "padding",
            "value": "<'padding-top'>{1,4}",
            "initial": "0",
            "appliesTo": "all elements except: internal table elements other than table cells, ruby base containers, and ruby annotation containers",
            "inherited": "no",
            "percentages": "refer to logical width of containing block",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["padding"],
            "styleDeclarationProperty": "padding",
            "referenceValues": ["<'padding-top'>{1,4}"]
        },
        "break-before": {
            "name": "break-before",
            "value": "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
            "initial": "auto",
            "appliesTo": "block-level boxes, grid items, flex items, table row groups, table rows (but see prose)",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Neither force nor forbid a break before/after the principal box.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "avoid",
                    "prose": "Avoid a break before/after the principal box.",
                    "type": "value",
                    "value": "avoid"
                },
                {
                    "name": "always",
                    "prose": "Always force a break before/after the principal box. The type of this break is that of the immediately-containing fragmentation context. For example, in a multi-column container forces a column break; in paged media not inside a multi-column container, forces a page break.",
                    "type": "value",
                    "value": "always"
                },
                {
                    "name": "all",
                    "prose": "Always force a break before/after the principal box. This value breaks through all containing fragmentation contexts. For example, inside a multi-column container in a region in a multi-column container in paged media, it forces simultaneously a column break in the inner multi-column container, a region break, a column break in the outer multi-column container, and a page break. It’s unclear if this value is needed.",
                    "type": "value",
                    "value": "all"
                },
                {
                    "name": "avoid-page",
                    "prose": "Avoid a page break before/after the principal box.",
                    "type": "value",
                    "value": "avoid-page"
                },
                {
                    "name": "page",
                    "prose": "Always force a page break before/after the principal box.",
                    "type": "value",
                    "value": "page"
                },
                {
                    "name": "left",
                    "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as a left page.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "right",
                    "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as a right page.",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "recto",
                    "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as either a left page or a right page, whichever is second (according to the page progression) in a page spread.",
                    "type": "value",
                    "value": "recto"
                },
                {
                    "name": "verso",
                    "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as either a left page or a right page, whichever is first (according to the page progression) in a page spread.",
                    "type": "value",
                    "value": "verso"
                },
                {
                    "name": "avoid-column",
                    "prose": "Avoid a column break before/after the principal box.",
                    "type": "value",
                    "value": "avoid-column"
                },
                {
                    "name": "column",
                    "prose": "Always force a column break before/after the principal box.",
                    "type": "value",
                    "value": "column"
                },
                {
                    "name": "avoid-region",
                    "prose": "Avoid a region break before/after the principal box.",
                    "type": "value",
                    "value": "avoid-region"
                },
                {
                    "name": "region",
                    "prose": "Always force a region break before/after the principal box.",
                    "type": "value",
                    "value": "region"
                }
            ],
            "styleDeclaration": ["break-before", "breakBefore"],
            "styleDeclarationProperty": "breakBefore",
            "referenceValues": []
        },
        "break-after": {
            "name": "break-after",
            "value": "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
            "initial": "auto",
            "appliesTo": "block-level boxes, grid items, flex items, table row groups, table rows (but see prose)",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Neither force nor forbid a break before/after the principal box.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "avoid",
                    "prose": "Avoid a break before/after the principal box.",
                    "type": "value",
                    "value": "avoid"
                },
                {
                    "name": "always",
                    "prose": "Always force a break before/after the principal box. The type of this break is that of the immediately-containing fragmentation context. For example, in a multi-column container forces a column break; in paged media not inside a multi-column container, forces a page break.",
                    "type": "value",
                    "value": "always"
                },
                {
                    "name": "all",
                    "prose": "Always force a break before/after the principal box. This value breaks through all containing fragmentation contexts. For example, inside a multi-column container in a region in a multi-column container in paged media, it forces simultaneously a column break in the inner multi-column container, a region break, a column break in the outer multi-column container, and a page break. It’s unclear if this value is needed.",
                    "type": "value",
                    "value": "all"
                },
                {
                    "name": "avoid-page",
                    "prose": "Avoid a page break before/after the principal box.",
                    "type": "value",
                    "value": "avoid-page"
                },
                {
                    "name": "page",
                    "prose": "Always force a page break before/after the principal box.",
                    "type": "value",
                    "value": "page"
                },
                {
                    "name": "left",
                    "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as a left page.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "right",
                    "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as a right page.",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "recto",
                    "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as either a left page or a right page, whichever is second (according to the page progression) in a page spread.",
                    "type": "value",
                    "value": "recto"
                },
                {
                    "name": "verso",
                    "prose": "Force one or two page breaks before/after the principal box so that the next page is formatted as either a left page or a right page, whichever is first (according to the page progression) in a page spread.",
                    "type": "value",
                    "value": "verso"
                },
                {
                    "name": "avoid-column",
                    "prose": "Avoid a column break before/after the principal box.",
                    "type": "value",
                    "value": "avoid-column"
                },
                {
                    "name": "column",
                    "prose": "Always force a column break before/after the principal box.",
                    "type": "value",
                    "value": "column"
                },
                {
                    "name": "avoid-region",
                    "prose": "Avoid a region break before/after the principal box.",
                    "type": "value",
                    "value": "avoid-region"
                },
                {
                    "name": "region",
                    "prose": "Always force a region break before/after the principal box.",
                    "type": "value",
                    "value": "region"
                }
            ],
            "styleDeclaration": ["break-after", "breakAfter"],
            "styleDeclarationProperty": "breakAfter",
            "referenceValues": []
        },
        "break-inside": {
            "name": "break-inside",
            "value": "auto | avoid | avoid-page | avoid-column | avoid-region",
            "initial": "auto",
            "appliesTo": "all elements except inline-level boxes, internal ruby boxes, table column boxes, table column group boxes, absolutely-positioned boxes",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Impose no additional breaking constraints within the box.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "avoid",
                    "prose": "Avoid breaks within the box.",
                    "type": "value",
                    "value": "avoid"
                },
                {
                    "name": "avoid-page",
                    "prose": "Avoid a page break within the box.",
                    "type": "value",
                    "value": "avoid-page"
                },
                {
                    "name": "avoid-column",
                    "prose": "Avoid a column break within the box.",
                    "type": "value",
                    "value": "avoid-column"
                },
                {
                    "name": "avoid-region",
                    "prose": "Avoid a region break within the box.",
                    "type": "value",
                    "value": "avoid-region"
                }
            ],
            "styleDeclaration": ["break-inside", "breakInside"],
            "styleDeclarationProperty": "breakInside",
            "referenceValues": []
        },
        "orphans": {
            "name": "orphans",
            "value": "<integer [1,∞]>",
            "initial": "2",
            "appliesTo": "block containers that establish an inline formatting context",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified integer",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["orphans"],
            "styleDeclarationProperty": "orphans",
            "referenceValues": ["<integer [1,∞]>"]
        },
        "widows": {
            "name": "widows",
            "value": "<integer [1,∞]>",
            "initial": "2",
            "appliesTo": "block containers that establish an inline formatting context",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified integer",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["widows"],
            "styleDeclarationProperty": "widows",
            "referenceValues": ["<integer [1,∞]>"]
        },
        "margin-break": {
            "name": "margin-break",
            "value": "auto | keep | discard",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "When an unforced break occurs before or after the box, any margins adjoining the break truncate to the remaining fragmentainer extent before the break, and are truncated to zero after the break. When a forced break occurs there, adjoining margins before the break are truncated, but margins after the break are preserved. Cloned margins are always truncated to zero.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "keep",
                    "prose": "Margins adjoining a fragmentation break are not truncated.",
                    "type": "value",
                    "value": "keep"
                },
                {
                    "name": "discard",
                    "prose": "Margins adjoining a fragmentation break are always truncated, including at the start and end of a fragmentation context.",
                    "type": "value",
                    "value": "discard"
                }
            ],
            "styleDeclaration": ["margin-break", "marginBreak"],
            "styleDeclarationProperty": "marginBreak",
            "referenceValues": []
        },
        "box-decoration-break": {
            "name": "box-decoration-break",
            "value": "slice | clone",
            "initial": "slice",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "clone",
                    "prose": "Each box fragment is independently wrapped with the border, padding, and margin. The border-radius and border-image and box-shadow, if any, are applied to each fragment independently. The background is drawn independently in each fragment of the element. A no-repeat background image will thus be rendered once in each fragment of the element.",
                    "type": "value",
                    "value": "clone"
                },
                {
                    "name": "slice",
                    "prose": "The effect is as though the element were rendered with no breaks present, and then sliced by the breaks afterward: no border and no padding are inserted at a break; no box-shadow is drawn at a broken edge; and backgrounds, border-radius, and the border-image are applied to the geometry of the whole box as if it were unbroken.",
                    "type": "value",
                    "value": "slice"
                }
            ],
            "styleDeclaration": ["box-decoration-break", "boxDecorationBreak"],
            "styleDeclarationProperty": "boxDecorationBreak",
            "referenceValues": []
        },
        "all": {
            "name": "all",
            "value": "initial | inherit | unset | revert | revert-layer",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "initial",
                    "prose": "The initial CSS-wide keyword represents the value defined as the property’s initial value.",
                    "type": "value",
                    "value": "initial"
                },
                {
                    "name": "inherit",
                    "prose": "The inherit CSS-wide keyword represents the property’s computed value on the parent element.",
                    "type": "value",
                    "value": "inherit"
                },
                {
                    "name": "unset",
                    "prose": "The unset CSS-wide keyword acts as either inherit or initial, depending on whether the property is inherited or not.",
                    "type": "value",
                    "value": "unset"
                },
                {
                    "name": "revert-layer",
                    "prose": "The revert-layer CSS-wide keyword rolls back the cascade similar to revert, except it works by cascade layer rather than by cascade origin.",
                    "type": "value",
                    "value": "revert-layer"
                }
            ],
            "styleDeclaration": ["all"],
            "styleDeclarationProperty": "all",
            "referenceValues": []
        },
        "color-scheme": {
            "name": "color-scheme",
            "value": "normal | [ light | dark | <custom-ident> ]+ && only?",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "the keyword normal, or an ordered list of specified color scheme keywords",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "Indicates that the element supports the page’s supported color schemes, if they are set, or that it supports no color schemes at all otherwise.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "light",
                    "prose": "Indicates that the element supports a light color scheme.",
                    "type": "value",
                    "value": "light"
                },
                {
                    "name": "dark",
                    "prose": "Indicates that the element supports a dark color scheme.",
                    "type": "value",
                    "value": "dark"
                },
                {
                    "name": "only",
                    "prose": "Forbids the user agent from overriding the color scheme for the element.",
                    "type": "value",
                    "value": "only"
                },
                {
                    "name": "<custom-ident>",
                    "prose": "<custom-ident> values are meaningless, and exist only for future compatibility, so that future added color schemes do not invalidate the color-scheme declaration in legacy user agents. User agents must not interpret any <custom-ident> values as having a meaning; any additional recognized color schemes must be explicitly added to this property’s grammar. The normal, light, dark, and only keywords are not valid <custom-ident>s in this property.",
                    "type": "value",
                    "value": "<custom-ident>"
                }
            ],
            "styleDeclaration": ["color-scheme", "colorScheme"],
            "styleDeclarationProperty": "colorScheme",
            "referenceValues": ["<custom-ident> ]+ && only?"]
        },
        "forced-color-adjust": {
            "name": "forced-color-adjust",
            "value": "auto | none | preserve-parent-color",
            "initial": "auto",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "auto",
                    "prose": "The element’s colors are automatically adjusted by the UA in forced colors mode.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "none",
                    "prose": "The element’s colors are not automatically adjusted by the UA in forced colors mode. Authors should only use this value when they are themselves adjusting the colors to support the user’s color and contrast needs and need to make changes to the UA’s default adjustments to provide a more appropriate user experience for those elements.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "preserve-parent-color",
                    "prose": "In forced colors mode, if the color property inherits from its parent (i.e. there is no cascaded value or the cascaded value is currentColor, inherit, or another keyword that inherits from the parent), then it computes to the used color of its parent’s color value. In all other respects, behaves the same as none.",
                    "type": "value",
                    "value": "preserve-parent-color"
                }
            ],
            "styleDeclaration": ["forced-color-adjust", "forcedColorAdjust"],
            "styleDeclarationProperty": "forcedColorAdjust",
            "referenceValues": []
        },
        "print-color-adjust": {
            "name": "print-color-adjust",
            "value": "economy | exact",
            "initial": "economy",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "economy",
                    "prose": "The user agent should make adjustments to the page’s styling as it deems necessary and prudent for the output device. For example, if the document is being printed, a user agent might ignore any backgrounds and adjust text color to be sufficiently dark, to minimize ink usage.",
                    "type": "value",
                    "value": "economy"
                },
                {
                    "name": "exact",
                    "prose": "This value indicates that the page is using color and styling on the specified element in a way which is important and significant, and which should not be tweaked or changed except at the user’s request. For example, a mapping website offering printed directions might \"zebra-stripe\" the steps in the directions, alternating between white and light gray backgrounds. Losing this zebra-striping and having a pure-white background would make the directions harder to read with a quick glance when distracted in a car.",
                    "type": "value",
                    "value": "exact"
                }
            ],
            "styleDeclaration": ["print-color-adjust", "printColorAdjust"],
            "styleDeclarationProperty": "printColorAdjust",
            "referenceValues": []
        },
        "color-adjust": {
            "name": "color-adjust",
            "value": "<'print-color-adjust'>",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["color-adjust", "colorAdjust"],
            "styleDeclarationProperty": "colorAdjust",
            "referenceValues": ["<'print-color-adjust'>"]
        },
        "color": {
            "name": "color",
            "value": "<color>",
            "initial": "CanvasText",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "computed color, see resolving color values",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["color"],
            "styleDeclarationProperty": "color",
            "referenceValues": ["<color>"]
        },
        "opacity": {
            "name": "opacity",
            "value": "<alpha-value>",
            "initial": "1",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "map to the range [0,1]",
            "computedValue": "specified number, clamped to the range [0,1]",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["opacity"],
            "styleDeclarationProperty": "opacity",
            "referenceValues": ["<alpha-value>"]
        },
        "contain": {
            "name": "contain",
            "value": "none | strict | content | [ size || layout || style || paint ]",
            "initial": "none",
            "appliesTo": "See below",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the keyword none or one or more of size, layout, paint",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "none",
                    "prose": "This value indicates that the property has no effect. The element renders as normal, with no containment effects applied.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "strict",
                    "prose": "This value computes to size layout paint style, and thus turns on all forms of containment for the element.",
                    "type": "value",
                    "value": "strict"
                },
                {
                    "name": "content",
                    "prose": "This value computes to layout paint style, and thus turns on all forms of containment except size containment for the element.",
                    "type": "value",
                    "value": "content"
                },
                {
                    "name": "size",
                    "prose": "The value turns on size containment for the element. This ensures that the containment box can be laid out without needing to examine its descendants.",
                    "type": "value",
                    "value": "size"
                },
                {
                    "name": "layout",
                    "prose": "This value turns on layout containment for the element. This ensures that the containment box is totally opaque for layout purposes; nothing outside can affect its internal layout, and vice versa.",
                    "type": "value",
                    "value": "layout"
                },
                {
                    "name": "style",
                    "prose": "This value turns on style containment for the element. This ensures that, for properties which can have effects on more than just an element and its descendants, those effects don’t escape the element.",
                    "type": "value",
                    "value": "style"
                },
                {
                    "name": "paint",
                    "prose": "This value turns on paint containment for the element. This ensures that the descendants of the containment box don’t display outside its bounds, so if an element is off-screen or otherwise not visible, its descendants are also guaranteed to be not visible.",
                    "type": "value",
                    "value": "paint"
                }
            ],
            "styleDeclaration": ["contain"],
            "styleDeclarationProperty": "contain",
            "referenceValues": []
        },
        "container-type": {
            "name": "container-type",
            "value": "normal | size | inline-size",
            "initial": "normal",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the keyword normal or one or more of size, inline-size",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "size",
                    "prose": "Establishes a query container for container size queries on both the inline and block axis. Applies layout containment, style containment, and size containment to the principal box.",
                    "type": "value",
                    "value": "size"
                },
                {
                    "name": "inline-size",
                    "prose": "Establishes a query container for container size queries on the container’s own inline axis. Applies layout containment, style containment, and inline-size containment to the principal box.",
                    "type": "value",
                    "value": "inline-size"
                },
                {
                    "name": "normal",
                    "prose": "The element is not a query container for any container size queries, but remains a query container for container style queries.",
                    "type": "value",
                    "value": "normal"
                }
            ],
            "styleDeclaration": ["container-type", "containerType"],
            "styleDeclarationProperty": "containerType",
            "referenceValues": []
        },
        "container-name": {
            "name": "container-name",
            "value": "none | <custom-ident>+",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the keyword none, or an ordered list of identifiers",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "none",
                    "prose": "The query container has no query container name.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<custom-ident>",
                    "prose": "Specifies a query container name as an identifier. The keywords none, and, not, and or are excluded from this <custom-ident>.",
                    "type": "value",
                    "value": "<custom-ident>"
                }
            ],
            "styleDeclaration": ["container-name", "containerName"],
            "styleDeclarationProperty": "containerName",
            "referenceValues": ["<custom-ident>+"]
        },
        "container": {
            "name": "container",
            "value": "<'container-name'> [ / <'container-type'> ]?",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["container"],
            "styleDeclarationProperty": "container",
            "referenceValues": ["<'container-name'> [ / <'container-type'> ]?"]
        },
        "content-visibility": {
            "name": "content-visibility",
            "value": "visible | auto | hidden",
            "initial": "visible",
            "appliesTo": "elements for which size containment can apply",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "visible",
                    "prose": "No effect. The element’s contents are laid out and rendered as normal.",
                    "type": "value",
                    "value": "visible"
                },
                {
                    "name": "hidden",
                    "prose": "The element skips its contents. The skipped contents must not be accessible to user-agent features, such as find-in-page, tab-order navigation, etc., nor be selectable or focusable.",
                    "type": "value",
                    "value": "hidden"
                },
                {
                    "name": "auto",
                    "prose": "Changes the used value of the contain property so as to turn on layout containment, style containment, and paint containment for the element. If the element is not relevant to the user, it also skips its contents. Unlike hidden, the skipped contents must still be available as normal to user-agent features such as find-in-page, tab order navigation, etc., and must be focusable and selectable as normal.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["content-visibility", "contentVisibility"],
            "styleDeclarationProperty": "contentVisibility",
            "referenceValues": []
        },
        "content": {
            "name": "content",
            "newValues": "element()",
            "styleDeclaration": ["content"],
            "styleDeclarationProperty": "content",
            "referenceValues": []
        },
        "quotes": {
            "name": "quotes",
            "value": "auto | none | [ <string> <string> ]+",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "the keyword none, the keyword auto, or a list, each item a pair of string values",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "The open-quote and close-quote values of the content property produce no quotations marks, as if they were no-open-quote and no-close-quote respectively.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "auto",
                    "prose": "A typographically appropriate used value for quotes is automatically chosen by the UA based on the content language of the element and/or its parent.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["quotes"],
            "styleDeclarationProperty": "quotes",
            "referenceValues": []
        },
        "string-set": {
            "name": "string-set",
            "value": "none | [ <custom-ident> <string>+ ]#",
            "initial": "none",
            "appliesTo": "all elements, but not pseudo-elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "the keyword none or a list, each item an identifier paired with a list of string values",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "The element does not set any named strings.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["string-set", "stringSet"],
            "styleDeclarationProperty": "stringSet",
            "referenceValues": []
        },
        "bookmark-level": {
            "name": "bookmark-level",
            "value": "none | <integer [1,∞]>",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "the keyword none or the specified integer",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "<integer [1,∞]>",
                    "prose": "defines the level of the bookmark, with the top level being 1 (negative and zero values are invalid).",
                    "type": "value",
                    "value": "<integer [1,∞]>"
                },
                {
                    "name": "none",
                    "prose": "no bookmark is generated.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["bookmark-level", "bookmarkLevel"],
            "styleDeclarationProperty": "bookmarkLevel",
            "referenceValues": ["<integer [1,∞]>"]
        },
        "bookmark-label": {
            "name": "bookmark-label",
            "value": "<content-list>",
            "initial": "content(text)",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "<content-list>",
                    "prose": "<content-list> is defined above, in the section on the string-set property. The value of <content-list> becomes the text content of the bookmark label.",
                    "type": "value",
                    "value": "<content-list>",
                    "values": [
                        {
                            "name": "<string>",
                            "prose": "Represents an anonymous inline box filled with the specified text.",
                            "type": "value",
                            "value": "<string>"
                        },
                        {
                            "name": "<image>",
                            "prose": "Represents an anonymous inline replaced element filled with the specified <image>. If the <image> represents an invalid image, this value instead represents nothing. (No inline content is added to the element, as if this value were \"skipped\".)",
                            "type": "value",
                            "value": "<image>"
                        },
                        {
                            "name": "contents",
                            "prose": "The element’s descendants. Since this can only be used once per element (you can’t duplicate the children if, e.g., one is a plugin or form control), it is handled as follows:",
                            "type": "value",
                            "value": "contents"
                        },
                        {
                            "name": "leader()",
                            "value": "leader( <leader-type> )",
                            "type": "function"
                        }
                    ]
                }
            ],
            "styleDeclaration": ["bookmark-label", "bookmarkLabel"],
            "styleDeclarationProperty": "bookmarkLabel",
            "referenceValues": ["<content-list>"]
        },
        "bookmark-state": {
            "name": "bookmark-state",
            "value": "open | closed",
            "initial": "open",
            "appliesTo": "block-level elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "open",
                    "prose": "Subsequent bookmarks with bookmark-level greater than the given bookmark are displayed, until reaching another bookmark of the same level or lower. If one of subsequent bookmark is closed, apply the same test to determine if its subsequent bookmarks should be displayed.",
                    "type": "value",
                    "value": "open"
                },
                {
                    "name": "closed",
                    "prose": "Subsequent bookmarks of bookmark-level greater than the given bookmark are not displayed, until reaching another bookmark of the same level or lower.",
                    "type": "value",
                    "value": "closed"
                }
            ],
            "styleDeclaration": ["bookmark-state", "bookmarkState"],
            "styleDeclarationProperty": "bookmarkState",
            "referenceValues": []
        },
        "display": {
            "name": "display",
            "newValues": "<display-outside> || [ <display-inside> | math ]",
            "styleDeclaration": ["display"],
            "styleDeclarationProperty": "display",
            "referenceValues": []
        },
        "order": {
            "name": "order",
            "value": "[ <'layout-order'> <'reading-order'>? ] | [ [ reading || layout ] && <integer> ]",
            "initial": "see individual properties",
            "appliesTo": "flex items and grid items",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<integer>",
                    "prose": "If one integer and no keyword is specified, then sets layout-order to the specified integer, and sets reading-order to its initial value. If two integers are specified, the first sets layout-order and the second sets reading-order. Otherwise sets the appropriate longhand(s) to the specified integer(s).",
                    "type": "value",
                    "value": "<integer>"
                },
                {
                    "name": "layout",
                    "prose": "Indicates setting layout-order to the specified integer. If reading is not specified, reading-order is set to its initial value.",
                    "type": "value",
                    "value": "layout"
                },
                {
                    "name": "reading",
                    "prose": "Indicates setting reading-order to the specified integer. If layout is not specified, layout-order is set to its initial value.",
                    "type": "value",
                    "value": "reading"
                }
            ],
            "styleDeclaration": ["order"],
            "styleDeclarationProperty": "order",
            "referenceValues": []
        },
        "reading-order": {
            "name": "reading-order",
            "value": "<integer>",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified integer",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "<integer>",
                    "prose": "The reading-order property controls the order in which elements are rendered to speech or are navigated to when using (linear) sequention navigation methods. It takes a single <integer> value, which specifies which ordinal group the item belongs to. Sibling elements are ordered starting from the lowest numbered ordinal group and going up; elements with the same ordinal group are keep the order they appear in the source document.",
                    "type": "value",
                    "value": "<integer>"
                }
            ],
            "styleDeclaration": ["reading-order", "readingOrder"],
            "styleDeclarationProperty": "readingOrder",
            "referenceValues": ["<integer>"]
        },
        "layout-order": {
            "name": "layout-order",
            "value": "<integer>",
            "initial": "0",
            "appliesTo": "flex items and grid items",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified integer",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "<integer>",
                    "prose": "Specifically, the layout-order property controls the order in which flex items or grid items appear within their container by assigning them to the ordinal groups, as specified by its <integer> value.",
                    "type": "value",
                    "value": "<integer>"
                }
            ],
            "styleDeclaration": ["layout-order", "layoutOrder"],
            "styleDeclarationProperty": "layoutOrder",
            "referenceValues": ["<integer>"]
        },
        "visibility": {
            "name": "visibility",
            "value": "visible | hidden | collapse",
            "initial": "visible",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "values": [
                {
                    "name": "visible",
                    "prose": "The generated box is visible, as normal.",
                    "type": "value",
                    "value": "visible"
                },
                {
                    "name": "hidden",
                    "prose": "Any boxes generated by the element are invisible. Descendants of the element can, however, be visible if they have visibility: visible.",
                    "type": "value",
                    "value": "hidden"
                },
                {
                    "name": "collapse",
                    "prose": "Indicates that the box is collapsed, which can cause it to take up less space than otherwise in a formatting-context–specific way. See dynamic row and column effects in tables [CSS2] and collapsed flex items in flex layout [CSS-FLEXBOX-1]. In all other cases, however, (i.e. unless otherwise specified) this simply makes the box invisible, just like hidden.",
                    "type": "value",
                    "value": "collapse"
                }
            ],
            "styleDeclaration": ["visibility"],
            "styleDeclarationProperty": "visibility",
            "referenceValues": []
        },
        "wrap-flow": {
            "name": "wrap-flow",
            "value": "auto | both | start | end | minimum | maximum | clear",
            "initial": "auto",
            "appliesTo": "block-level elements.",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified except for element’s whose float computed value is not none, in which case the computed value is auto.",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "auto",
                    "prose": "No exclusion is created. Inline flow content interacts with the element as usual. In particular, if the element is a float (see [CSS21]), the behavior is unchanged.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "both",
                    "prose": "Inline flow content can flow on all sides of the exclusion.",
                    "type": "value",
                    "value": "both"
                },
                {
                    "name": "start",
                    "prose": "Inline flow content can flow around the start edge of the exclusion area but must leave the area next to the end edge of the exclusion empty.",
                    "type": "value",
                    "value": "start"
                },
                {
                    "name": "end",
                    "prose": "Inline flow content can flow around the end edge of the exclusion area but must leave the area next to the start edge of the exclusion empty.",
                    "type": "value",
                    "value": "end"
                },
                {
                    "name": "minimum",
                    "prose": "Inline flow content can flow around the edge of the exclusion with the smallest available space within the flow content’s containing block, and must leave the other edge of the exclusion empty.",
                    "type": "value",
                    "value": "minimum"
                },
                {
                    "name": "maximum",
                    "prose": "Inline flow content can flow around the edge of the exclusion with the largest available space within the flow content’s containing block, and must leave the other edge of the exclusion empty.",
                    "type": "value",
                    "value": "maximum"
                },
                {
                    "name": "clear",
                    "prose": "Inline flow content can only flow before and after the exclusion in the flow content’s block direction and must leave the areas next to the start and end edges of the exclusion empty.",
                    "type": "value",
                    "value": "clear"
                }
            ],
            "styleDeclaration": ["wrap-flow", "wrapFlow"],
            "styleDeclarationProperty": "wrapFlow",
            "referenceValues": []
        },
        "wrap-through": {
            "name": "wrap-through",
            "value": "wrap | none",
            "initial": "wrap",
            "appliesTo": "block-level elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "wrap",
                    "prose": "The element inherits its parent node’s wrapping context. Its descendant inline content wraps around exclusions defined outside the element.",
                    "type": "value",
                    "value": "wrap"
                },
                {
                    "name": "none",
                    "prose": "The element does not inherit its parent node’s wrapping context. Its descendants are only subject to exclusion areas defined inside the element.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["wrap-through", "wrapThrough"],
            "styleDeclarationProperty": "wrapThrough",
            "referenceValues": []
        },
        "flex-direction": {
            "name": "flex-direction",
            "value": "row | row-reverse | column | column-reverse",
            "initial": "row",
            "appliesTo": "flex containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "row",
                    "prose": "The flex container’s main axis has the same orientation as the inline axis of the current writing mode. The main-start and main-end directions are equivalent to the inline-start and inline-end directions, respectively, of the current writing mode.",
                    "type": "value",
                    "value": "row"
                },
                {
                    "name": "row-reverse",
                    "prose": "Same as row, except the main-start and main-end directions are swapped.",
                    "type": "value",
                    "value": "row-reverse"
                },
                {
                    "name": "column",
                    "prose": "The flex container’s main axis has the same orientation as the block axis of the current writing mode. The main-start and main-end directions are equivalent to the block-start and block-end directions, respectively, of the current writing mode.",
                    "type": "value",
                    "value": "column"
                },
                {
                    "name": "column-reverse",
                    "prose": "Same as column, except the main-start and main-end directions are swapped.",
                    "type": "value",
                    "value": "column-reverse"
                }
            ],
            "styleDeclaration": ["flex-direction", "flexDirection"],
            "styleDeclarationProperty": "flexDirection",
            "referenceValues": []
        },
        "flex-wrap": {
            "name": "flex-wrap",
            "value": "nowrap | wrap | wrap-reverse",
            "initial": "nowrap",
            "appliesTo": "flex containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "nowrap",
                    "prose": "The flex container is single-line.",
                    "type": "value",
                    "value": "nowrap"
                },
                {
                    "name": "wrap",
                    "prose": "The flex container is multi-line.",
                    "type": "value",
                    "value": "wrap"
                },
                {
                    "name": "wrap-reverse",
                    "prose": "Same as wrap.",
                    "type": "value",
                    "value": "wrap-reverse"
                }
            ],
            "styleDeclaration": ["flex-wrap", "flexWrap"],
            "styleDeclarationProperty": "flexWrap",
            "referenceValues": []
        },
        "flex-flow": {
            "name": "flex-flow",
            "value": "<'flex-direction'> || <'flex-wrap'>",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["flex-flow", "flexFlow"],
            "styleDeclarationProperty": "flexFlow",
            "referenceValues": ["<'flex-direction'>", "<'flex-wrap'>"]
        },
        "flex": {
            "name": "flex",
            "value": "none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]",
            "initial": "0 1 auto",
            "appliesTo": "flex items",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "by computed value type",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<'flex-grow'>",
                    "prose": "This <number [0,∞]> component sets flex-grow longhand and specifies the flex grow factor, which determines how much the flex item will grow relative to the rest of the flex items in the flex container when positive free space is distributed. When omitted, it is set to 1.",
                    "type": "value",
                    "value": "<'flex-grow'>"
                },
                {
                    "name": "<'flex-shrink'>",
                    "prose": "This <number [0,∞]> component sets flex-shrink longhand and specifies the flex shrink factor, which determines how much the flex item will shrink relative to the rest of the flex items in the flex container when negative free space is distributed. When omitted, it is set to 1.",
                    "type": "value",
                    "value": "<'flex-shrink'>"
                },
                {
                    "name": "<'flex-basis'>",
                    "prose": "This component sets the flex-basis longhand, which specifies the flex basis: the initial main size of the flex item, before free space is distributed according to the flex factors. <'flex-basis'> accepts the same values as the width and height properties (except that auto is treated differently) plus the content keyword: When omitted from the flex shorthand, its specified value is 0.",
                    "type": "value",
                    "value": "<'flex-basis'>"
                },
                {
                    "name": "none",
                    "prose": "The keyword none expands to 0 0 auto.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["flex"],
            "styleDeclarationProperty": "flex",
            "referenceValues": ["<'flex-basis'> ]"]
        },
        "flex-grow": {
            "name": "flex-grow",
            "value": "<number [0,∞]>",
            "initial": "0",
            "appliesTo": "flex items",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified number",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "<number>",
                    "prose": "The flex-grow property sets the flex grow factor to the provided <number>. Negative values are not allowed.",
                    "type": "value",
                    "value": "<number>"
                }
            ],
            "styleDeclaration": ["flex-grow", "flexGrow"],
            "styleDeclarationProperty": "flexGrow",
            "referenceValues": ["<number [0,∞]>"]
        },
        "flex-shrink": {
            "name": "flex-shrink",
            "value": "<number [0,∞]>",
            "initial": "1",
            "appliesTo": "flex items",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "animationType": "number",
            "values": [
                {
                    "name": "<number>",
                    "prose": "The flex-shrink property sets the flex shrink factor to the provided <number>. Negative values are not allowed.",
                    "type": "value",
                    "value": "<number>"
                }
            ],
            "styleDeclaration": ["flex-shrink", "flexShrink"],
            "styleDeclarationProperty": "flexShrink",
            "referenceValues": ["<number [0,∞]>"]
        },
        "flex-basis": {
            "name": "flex-basis",
            "value": "content | <'width'>",
            "initial": "auto",
            "appliesTo": "flex items",
            "inherited": "no",
            "percentages": "relative to the flex container’s inner main size",
            "computedValue": "specified keyword or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "auto",
                    "prose": "When specified on a flex item, the auto keyword retrieves the value of the main size property as the used flex-basis. If that value is itself auto, then the used value is content.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "content",
                    "prose": "Indicates an automatic size based on the flex item’s content. (This is typically equivalent to the max-content size, but with adjustments to handle preferred aspect ratios, intrinsic sizing constraints, and orthogonal flows; see details in § 9 Flex Layout Algorithm.)",
                    "type": "value",
                    "value": "content"
                }
            ],
            "styleDeclaration": ["flex-basis", "flexBasis"],
            "styleDeclarationProperty": "flexBasis",
            "referenceValues": ["<'width'>"]
        },
        "font-size-adjust": {
            "name": "font-size-adjust",
            "value": "none | <number [0,∞]>",
            "initial": "none",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "a number or the keyword none",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "none",
                    "prose": "Do not preserve the font’s x-height.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<number [0,∞]>",
                    "prose": "Specifies the aspect value used in the calculation below to calculate the adjusted font size: c = ( a / a' ) s where: s = font-size value a = aspect value as specified by the 'font-size-adjust' property a' = aspect value of actual font c = adjusted font-size to use Negative values are invalid. This value applies to any font that is selected but in typical usage it should be based on the aspect value of the first font in the font-family list. If this is specified accurately, the (a/a') term in the formula above is effectively 1 for the first font and no adjustment occurs. If the value is specified inaccurately, text rendered using the first font in the family list will display differently in older user agents that don’t support font-size-adjust.",
                    "type": "value",
                    "value": "<number [0,∞]>"
                }
            ],
            "styleDeclaration": ["font-size-adjust", "fontSizeAdjust"],
            "styleDeclarationProperty": "fontSizeAdjust",
            "referenceValues": ["<number [0,∞]>"]
        },
        "font-family": {
            "name": "font-family",
            "value": "[ <family-name> | <generic-family> ]#",
            "initial": "depends on user agent",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "list, each item a string and/or <generic-family> keywords",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["font-family", "fontFamily"],
            "styleDeclarationProperty": "fontFamily",
            "referenceValues": ["<generic-family> ]#"]
        },
        "font-weight": {
            "name": "font-weight",
            "value": "<font-weight-absolute> | bolder | lighter",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "a number, see below",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "<number [1,1000]>",
                    "prose": "Each number indicates a weight that is at least as dark as its predecessor. Only values greater than or equal to 1, and less than or equal to 1000, are valid, and all other values are invalid. Numeric values typically correspond to the commonly used weight names below. 100 - Thin 200 - Extra Light (Ultra Light) 300 - Light 400 - Normal 500 - Medium 600 - Semi Bold (Demi Bold) 700 - Bold 800 - Extra Bold (Ultra Bold) 900 - Black (Heavy)",
                    "type": "value",
                    "value": "<number [1,1000]>"
                },
                {
                    "name": "normal",
                    "prose": "Same as 400.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "bold",
                    "prose": "Same as 700.",
                    "type": "value",
                    "value": "bold"
                },
                {
                    "name": "bolder",
                    "prose": "Specifies a bolder weight than the inherited value. See § 2.2.1 Relative Weights.",
                    "type": "value",
                    "value": "bolder"
                },
                {
                    "name": "lighter",
                    "prose": "Specifies a lighter weight than the inherited value. See § 2.2.1 Relative Weights.",
                    "type": "value",
                    "value": "lighter"
                }
            ],
            "styleDeclaration": ["font-weight", "fontWeight"],
            "styleDeclarationProperty": "fontWeight",
            "referenceValues": ["<font-weight-absolute>"]
        },
        "font-stretch": {
            "name": "font-stretch",
            "value": "normal | <percentage [0,∞]> | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "Not resolved",
            "computedValue": "a percentage, see below",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "ultra-condensed",
                    "type": "value",
                    "value": "ultra-condensed"
                },
                {
                    "name": "extra-condensed",
                    "type": "value",
                    "value": "extra-condensed"
                },
                {
                    "name": "condensed",
                    "type": "value",
                    "value": "condensed"
                },
                {
                    "name": "semi-condensed",
                    "type": "value",
                    "value": "semi-condensed"
                },
                {
                    "name": "normal",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "semi-expanded",
                    "type": "value",
                    "value": "semi-expanded"
                },
                {
                    "name": "expanded",
                    "type": "value",
                    "value": "expanded"
                },
                {
                    "name": "extra-expanded",
                    "type": "value",
                    "value": "extra-expanded"
                },
                {
                    "name": "ultra-expanded",
                    "type": "value",
                    "value": "ultra-expanded"
                },
                {
                    "name": "<percentage [0,∞]>",
                    "prose": "<percentage [0,∞]> values represent the fractional width of the glyphs, with 100% representing “normal” glyph widths (as defined by the font designer). Values less than 0% are invalid.",
                    "type": "value",
                    "value": "<percentage [0,∞]>"
                }
            ],
            "styleDeclaration": ["font-stretch", "fontStretch"],
            "styleDeclarationProperty": "fontStretch",
            "referenceValues": ["<percentage [0,∞]>"]
        },
        "font-style": {
            "name": "font-style",
            "value": "normal | italic | oblique <angle [-90deg,90deg]>?",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "the keyword specified, plus angle in degrees if specified",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type; normal animates as oblique 0deg",
            "values": [
                {
                    "name": "normal",
                    "prose": "Matches against a face that is classified as a normal face, one that is neither italic or obliqued. This represents an oblique value of \"0\".",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "italic",
                    "prose": "Matches against a font that is labeled as an italic face, or an oblique face if one does not exist.",
                    "type": "value",
                    "value": "italic"
                },
                {
                    "name": "oblique <angle [-90deg,90deg]>?",
                    "prose": "Controls matching against an oblique face. Positive angles represent a clockwise slant; negative angles represent a counter-clockwise slant. The lack of an <angle> represents 14deg. (Note that a font might internally provide its own mapping for \"oblique\", but the mapping within the font is disregarded.) Fractional and negative values are accepted; however, values less than -90deg or values greater than 90deg are invalid. If no oblique faces exist, and font-synthesis-style has the value auto, a synthetic oblique face will be generated.",
                    "type": "value",
                    "value": "oblique <angle [-90deg,90deg]>?"
                }
            ],
            "styleDeclaration": ["font-style", "fontStyle"],
            "styleDeclarationProperty": "fontStyle",
            "referenceValues": []
        },
        "font-size": {
            "name": "font-size",
            "value": "<absolute-size> | <relative-size> | <length-percentage [0,∞]> | math",
            "initial": "medium",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "refer to parent element’s font size",
            "computedValue": "an absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "<absolute-size>",
                    "value": "<absolute-size>",
                    "type": "value"
                },
                {
                    "name": "<relative-size>",
                    "value": "<relative-size>",
                    "type": "value"
                },
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "A length value specifies an absolute font size (independent of the user agent’s font table). Negative lengths are invalid. A percentage value specifies an absolute font size relative to the parent element’s computed font-size. Negative percentages are invalid.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "math",
                    "prose": "Special mathematical scaling rules must be applied when determining the computed value of the font-size property.",
                    "type": "value",
                    "value": "math"
                }
            ],
            "styleDeclaration": ["font-size", "fontSize"],
            "styleDeclarationProperty": "fontSize",
            "referenceValues": [
                "<absolute-size>",
                "<relative-size>",
                "<length-percentage [0,∞]>"
            ]
        },
        "font": {
            "name": "font",
            "value": "[ [ <'font-style'> || <font-variant-css2> || <'font-weight'> || <font-stretch-css3> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar",
            "initial": "see individual properties",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "see individual properties",
            "values": [
                {
                    "name": "caption",
                    "prose": "The font used for captioned controls (e.g., buttons, drop-downs, etc.).",
                    "type": "value",
                    "value": "caption"
                },
                {
                    "name": "icon",
                    "prose": "The font used to label icons.",
                    "type": "value",
                    "value": "icon"
                },
                {
                    "name": "menu",
                    "prose": "The font used in menus (e.g., dropdown menus and menu lists).",
                    "type": "value",
                    "value": "menu"
                },
                {
                    "name": "message-box",
                    "prose": "The font used in dialog boxes.",
                    "type": "value",
                    "value": "message-box"
                },
                {
                    "name": "small-caption",
                    "prose": "The font used for labeling small controls.",
                    "type": "value",
                    "value": "small-caption"
                },
                {
                    "name": "status-bar",
                    "prose": "The font used in window status bars.",
                    "type": "value",
                    "value": "status-bar"
                }
            ],
            "styleDeclaration": ["font"],
            "styleDeclarationProperty": "font",
            "referenceValues": [
                "<font-variant-css2>",
                "<'font-weight'>",
                "<font-stretch-css3> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ]"
            ]
        },
        "font-synthesis-weight": {
            "name": "font-synthesis-weight",
            "value": "auto | none",
            "initial": "auto",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "values": [
                {
                    "name": "auto",
                    "prose": "Synthesis of bold faces is allowed",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "none",
                    "prose": "Synthesis of bold faces is not allowed",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": [
                "font-synthesis-weight",
                "fontSynthesisWeight"
            ],
            "styleDeclarationProperty": "fontSynthesisWeight",
            "referenceValues": []
        },
        "font-synthesis-style": {
            "name": "font-synthesis-style",
            "value": "auto | none",
            "initial": "auto",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "values": [
                {
                    "name": "auto",
                    "prose": "Synthesis of oblique faces is allowed",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "none",
                    "prose": "Synthesis of oblique faces is not allowed",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["font-synthesis-style", "fontSynthesisStyle"],
            "styleDeclarationProperty": "fontSynthesisStyle",
            "referenceValues": []
        },
        "font-synthesis-small-caps": {
            "name": "font-synthesis-small-caps",
            "value": "auto | none",
            "initial": "auto",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Synthesis of small caps faces is allowed",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "none",
                    "prose": "Synthesis of small caps faces is not allowed",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": [
                "font-synthesis-small-caps",
                "fontSynthesisSmallCaps"
            ],
            "styleDeclarationProperty": "fontSynthesisSmallCaps",
            "referenceValues": []
        },
        "font-synthesis": {
            "name": "font-synthesis",
            "value": "none | [ weight || style || small-caps]",
            "initial": "weight style small-caps",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["font-synthesis", "fontSynthesis"],
            "styleDeclarationProperty": "fontSynthesis",
            "referenceValues": []
        },
        "font-kerning": {
            "name": "font-kerning",
            "value": "auto | normal | none",
            "initial": "auto",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Specifies that kerning is applied at the discretion of the user agent",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "normal",
                    "prose": "Specifies that kerning is applied",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "none",
                    "prose": "Specifies that kerning is not applied",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["font-kerning", "fontKerning"],
            "styleDeclarationProperty": "fontKerning",
            "referenceValues": []
        },
        "font-variant-ligatures": {
            "name": "font-variant-ligatures",
            "value": "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "A value of normal specifies that common default features are enabled, as described in detail in the next section. For OpenType fonts, common ligatures and contextual forms are on by default, discretionary and historical ligatures are not.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "none",
                    "prose": "Specifies that all types of ligatures and contextual forms covered by this property are explicitly disabled. In situations where ligatures are not considered necessary, this may improve the speed of text rendering.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "common-ligatures",
                    "prose": "Enables display of common ligatures (OpenType features: liga, clig). For OpenType fonts, common ligatures are enabled by default.",
                    "type": "value",
                    "value": "common-ligatures"
                },
                {
                    "name": "no-common-ligatures",
                    "prose": "Disables display of common ligatures (OpenType features: liga, clig).",
                    "type": "value",
                    "value": "no-common-ligatures"
                },
                {
                    "name": "discretionary-ligatures",
                    "prose": "Enables display of discretionary ligatures (OpenType feature: dlig). Which ligatures are discretionary or optional is decided by the type designer, so authors will need to refer to the documentation of a given font to understand which ligatures are considered discretionary.",
                    "type": "value",
                    "value": "discretionary-ligatures"
                },
                {
                    "name": "no-discretionary-ligatures",
                    "prose": "Disables display of discretionary ligatures (OpenType feature: dlig).",
                    "type": "value",
                    "value": "no-discretionary-ligatures"
                },
                {
                    "name": "historical-ligatures",
                    "prose": "Enables display of historical ligatures (OpenType feature: hlig).",
                    "type": "value",
                    "value": "historical-ligatures"
                },
                {
                    "name": "no-historical-ligatures",
                    "prose": "Disables display of historical ligatures (OpenType feature: hlig).",
                    "type": "value",
                    "value": "no-historical-ligatures"
                },
                {
                    "name": "contextual",
                    "prose": "Enables display of contextual alternates (OpenType feature: calt). Although not strictly a ligature feature, like ligatures this feature is commonly used to harmonize the shapes of glyphs with the surrounding context. For OpenType fonts, this feature is on by default.",
                    "type": "value",
                    "value": "contextual"
                },
                {
                    "name": "no-contextual",
                    "prose": "Disables display of contextual alternates (OpenType feature: calt).",
                    "type": "value",
                    "value": "no-contextual"
                }
            ],
            "styleDeclaration": [
                "font-variant-ligatures",
                "fontVariantLigatures"
            ],
            "styleDeclarationProperty": "fontVariantLigatures",
            "referenceValues": [
                "<discretionary-lig-values>",
                "<historical-lig-values>",
                "<contextual-alt-values> ]"
            ]
        },
        "font-variant-position": {
            "name": "font-variant-position",
            "value": "normal | sub | super",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "None of the features listed below are enabled.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "sub",
                    "prose": "Enables display of subscript variants (OpenType feature: subs).",
                    "type": "value",
                    "value": "sub"
                },
                {
                    "name": "super",
                    "prose": "Enables display of superscript variants (OpenType feature: sups).",
                    "type": "value",
                    "value": "super"
                }
            ],
            "styleDeclaration": [
                "font-variant-position",
                "fontVariantPosition"
            ],
            "styleDeclarationProperty": "fontVariantPosition",
            "referenceValues": []
        },
        "font-variant-caps": {
            "name": "font-variant-caps",
            "value": "normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "None of the features listed below are enabled.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "small-caps",
                    "prose": "Enables display of small capitals (OpenType feature: smcp). Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters.",
                    "type": "value",
                    "value": "small-caps"
                },
                {
                    "name": "all-small-caps",
                    "prose": "Enables display of small capitals for both upper and lowercase letters (OpenType features: c2sc, smcp).",
                    "type": "value",
                    "value": "all-small-caps"
                },
                {
                    "name": "petite-caps",
                    "prose": "Enables display of petite capitals (OpenType feature: pcap).",
                    "type": "value",
                    "value": "petite-caps"
                },
                {
                    "name": "all-petite-caps",
                    "prose": "Enables display of petite capitals for both upper and lowercase letters (OpenType features: c2pc, pcap).",
                    "type": "value",
                    "value": "all-petite-caps"
                },
                {
                    "name": "unicase",
                    "prose": "Enables display of mixture of small capitals for uppercase letters with normal lowercase letters (OpenType feature: unic).",
                    "type": "value",
                    "value": "unicase"
                },
                {
                    "name": "titling-caps",
                    "prose": "Enables display of titling capitals (OpenType feature: titl). Uppercase letter glyphs are often designed for use with lowercase letters. When used in all uppercase titling sequences they can appear too strong. Titling capitals are designed specifically for this situation.",
                    "type": "value",
                    "value": "titling-caps"
                }
            ],
            "styleDeclaration": ["font-variant-caps", "fontVariantCaps"],
            "styleDeclarationProperty": "fontVariantCaps",
            "referenceValues": []
        },
        "font-variant-numeric": {
            "name": "font-variant-numeric",
            "value": "normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "None of the features listed below are enabled.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "lining-nums",
                    "prose": "Enables display of lining numerals (OpenType feature: lnum).",
                    "type": "value",
                    "value": "lining-nums"
                },
                {
                    "name": "oldstyle-nums",
                    "prose": "Enables display of old-style numerals (OpenType feature: onum).",
                    "type": "value",
                    "value": "oldstyle-nums"
                },
                {
                    "name": "proportional-nums",
                    "prose": "Enables display of proportional numerals (OpenType feature: pnum).",
                    "type": "value",
                    "value": "proportional-nums"
                },
                {
                    "name": "tabular-nums",
                    "prose": "Enables display of tabular numerals (OpenType feature: tnum).",
                    "type": "value",
                    "value": "tabular-nums"
                },
                {
                    "name": "diagonal-fractions",
                    "prose": "Enables display of lining diagonal fractions (OpenType feature: frac).",
                    "type": "value",
                    "value": "diagonal-fractions"
                },
                {
                    "name": "stacked-fractions",
                    "prose": "Enables display of lining stacked fractions (OpenType feature: afrc).",
                    "type": "value",
                    "value": "stacked-fractions"
                },
                {
                    "name": "ordinal",
                    "prose": "Enables display of letter forms used with ordinal numbers (OpenType feature: ordn).",
                    "type": "value",
                    "value": "ordinal"
                },
                {
                    "name": "slashed-zero",
                    "prose": "Enables display of slashed zeros (OpenType feature: zero).",
                    "type": "value",
                    "value": "slashed-zero"
                }
            ],
            "styleDeclaration": ["font-variant-numeric", "fontVariantNumeric"],
            "styleDeclarationProperty": "fontVariantNumeric",
            "referenceValues": [
                "<numeric-spacing-values>",
                "<numeric-fraction-values>"
            ]
        },
        "font-variant-alternates": {
            "name": "font-variant-alternates",
            "value": "normal | [ stylistic(<feature-value-name>) || historical-forms || styleset(<feature-value-name>#) || character-variant(<feature-value-name>#) || swash(<feature-value-name>) || ornaments(<feature-value-name>) || annotation(<feature-value-name>) ]",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "None of the features listed below are enabled.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "historical-forms",
                    "prose": "Enables display of historical forms (OpenType feature: hist).",
                    "type": "value",
                    "value": "historical-forms"
                },
                {
                    "name": "stylistic()",
                    "value": "stylistic()",
                    "type": "value"
                },
                {
                    "name": "styleset()",
                    "value": "styleset()",
                    "type": "value"
                },
                {
                    "name": "character-variant()",
                    "value": "character-variant()",
                    "type": "value"
                },
                {
                    "name": "swash()",
                    "value": "swash()",
                    "type": "value"
                },
                {
                    "name": "ornaments()",
                    "value": "ornaments()",
                    "type": "value"
                },
                {
                    "name": "annotation()",
                    "value": "annotation()",
                    "type": "value"
                }
            ],
            "styleDeclaration": [
                "font-variant-alternates",
                "fontVariantAlternates"
            ],
            "styleDeclarationProperty": "fontVariantAlternates",
            "referenceValues": []
        },
        "font-variant-east-asian": {
            "name": "font-variant-east-asian",
            "value": "normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "None of the features listed below are enabled.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "jis78",
                    "prose": "Enables rendering of JIS78 forms (OpenType feature: jp78).",
                    "type": "value",
                    "value": "jis78"
                },
                {
                    "name": "jis83",
                    "prose": "Enables rendering of JIS83 forms (OpenType feature: jp83).",
                    "type": "value",
                    "value": "jis83"
                },
                {
                    "name": "jis90",
                    "prose": "Enables rendering of JIS90 forms (OpenType feature: jp90).",
                    "type": "value",
                    "value": "jis90"
                },
                {
                    "name": "jis04",
                    "prose": "Enables rendering of JIS2004 forms (OpenType feature: jp04). The various JIS variants reflect the glyph forms defined in different Japanese national standards. Fonts generally include glyphs defined by the most recent national standard, but it’s sometimes necessary to use older variants, to match signage for example.",
                    "type": "value",
                    "value": "jis04"
                },
                {
                    "name": "simplified",
                    "prose": "Enables rendering of simplified forms (OpenType feature: smpl).",
                    "type": "value",
                    "value": "simplified"
                },
                {
                    "name": "traditional",
                    "prose": "Enables rendering of traditional forms (OpenType feature: trad).",
                    "type": "value",
                    "value": "traditional"
                },
                {
                    "name": "full-width",
                    "prose": "Enables rendering of full-width variants (OpenType feature: fwid).",
                    "type": "value",
                    "value": "full-width"
                },
                {
                    "name": "proportional-width",
                    "prose": "Enables rendering of proportionally-spaced variants (OpenType feature: pwid).",
                    "type": "value",
                    "value": "proportional-width"
                },
                {
                    "name": "ruby",
                    "prose": "Enables display of ruby variant glyphs (OpenType feature: ruby). Since ruby text is generally smaller than the associated body text, font designers can design special glyphs for use with ruby that are more readable than scaled down versions of the default glyphs. Only glyph selection is affected, there is no associated font scaling or other change that affects line layout. The red ruby text below is shown with default glyphs (top) and with ruby variant glyphs (bottom). Note the slight difference in stroke thickness.",
                    "type": "value",
                    "value": "ruby"
                }
            ],
            "styleDeclaration": [
                "font-variant-east-asian",
                "fontVariantEastAsian"
            ],
            "styleDeclarationProperty": "fontVariantEastAsian",
            "referenceValues": ["<east-asian-width-values>"]
        },
        "font-variant": {
            "name": "font-variant",
            "value": "normal | none | [ [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ] || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || [ stylistic(<feature-value-name>) || historical-forms || styleset(<feature-value-name>#) || character-variant(<feature-value-name>#) || swash(<feature-value-name>) || ornaments(<feature-value-name>) || annotation(<feature-value-name>) ] || [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ] || [ <east-asian-variant-values> || <east-asian-width-values> || ruby ] || [ sub | super ] || [ text | emoji | unicode ] ]",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "The value normal resets all subproperties of font-variant to their initial value. The none value sets font-variant-ligatures to none and resets all other font feature properties to their initial value. Like other shorthands, using font-variant resets unspecified font-variant subproperties to their initial values.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "none",
                    "prose": "The value normal resets all subproperties of font-variant to their initial value. The none value sets font-variant-ligatures to none and resets all other font feature properties to their initial value. Like other shorthands, using font-variant resets unspecified font-variant subproperties to their initial values.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["font-variant", "fontVariant"],
            "styleDeclarationProperty": "fontVariant",
            "referenceValues": [
                "<discretionary-lig-values>",
                "<historical-lig-values>",
                "<contextual-alt-values> ]",
                "<numeric-spacing-values>",
                "<numeric-fraction-values>",
                "<east-asian-width-values>"
            ]
        },
        "font-feature-settings": {
            "name": "font-feature-settings",
            "value": "normal | <feature-tag-value>#",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "A value of normal means that no change in glyph selection or positioning occurs due to this property.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "<feature-tag-value>",
                    "type": "value",
                    "value": "<string> [ <integer> | on | off ]?"
                }
            ],
            "styleDeclaration": [
                "font-feature-settings",
                "fontFeatureSettings"
            ],
            "styleDeclarationProperty": "fontFeatureSettings",
            "referenceValues": ["<feature-tag-value>#"]
        },
        "font-language-override": {
            "name": "font-language-override",
            "value": "normal | <string>",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified string or the keyword none",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "<string>",
                    "prose": "single four-character case-sensitive OpenType language system tag, specifies the OpenType language system to be used instead of the language system implied by the language of the element. If the string is shorter than four characters, it is padded at the end with space (U+0020) characters such that the length is 4, before being matched.",
                    "type": "value",
                    "value": "<string>"
                }
            ],
            "styleDeclaration": [
                "font-language-override",
                "fontLanguageOverride"
            ],
            "styleDeclarationProperty": "fontLanguageOverride",
            "referenceValues": ["<string>"]
        },
        "font-optical-sizing": {
            "name": "font-optical-sizing",
            "value": "auto | none",
            "initial": "auto",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "The user agent may modify the shape of glyphs based on the font-size and the pixel density of the screen. For OpenType and TrueType fonts using font variations, this is often done by using the \"opsz\" font variation.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "none",
                    "prose": "The user agent must not modify the shape of glyphs for optical size.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["font-optical-sizing", "fontOpticalSizing"],
            "styleDeclarationProperty": "fontOpticalSizing",
            "referenceValues": []
        },
        "font-variation-settings": {
            "name": "font-variation-settings",
            "value": "normal | [ <string> <number>]#",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "the keyword normal or a list, each item a string paired with a number",
            "canonicalOrder": "per grammar",
            "animationType": "(see prose)",
            "styleDeclaration": [
                "font-variation-settings",
                "fontVariationSettings"
            ],
            "styleDeclarationProperty": "fontVariationSettings",
            "referenceValues": []
        },
        "font-palette": {
            "name": "font-palette",
            "value": "normal | light | dark | <palette-identifier>",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "N/a",
            "computedValue": "specified keyword or identifier",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "User-Agents display the color font with the default palette or default glyph colorisation. User-agents should take the computed value of the color property into consideration when a color font format requires use of the foreground color In the COLR [OPENTYPE] table, color index 0xFFFF should be rendered according the color property. For COLR/CPAL [OPENTYPE] fonts, font-palette: normal usually means rendering the font with the palette in the font at index 0.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "light",
                    "prose": "Some color font formats include metadata marking certain palettes as applicable on a light (close to white) background. This keyword causes the user-agent to use the first available palette in the font file marked this way. If the font file format does not account for this metadata, or no palette in the font is marked this way, this value behaves as normal.",
                    "type": "value",
                    "value": "light"
                },
                {
                    "name": "dark",
                    "prose": "Some color font formats include metadata marking certain palettes as applicable on a dark (close to black) background. This keyword causes the user-agent to use the first available palette in the font file marked this way. If the font file format does not account for this metadata, or no palette in the font is marked this way, this value behaves as normal.",
                    "type": "value",
                    "value": "dark"
                },
                {
                    "name": "<palette-identifier>",
                    "prose": "This value identifies an CSS-defined palette to use. Users can define a palette by using the @font-palette-values rule. If no applicable @font-palette-values rule is present, this value behaves as normal. <palette-identifier> is parsed as a <dashed-ident>.",
                    "type": "type"
                }
            ],
            "styleDeclaration": ["font-palette", "fontPalette"],
            "styleDeclarationProperty": "fontPalette",
            "referenceValues": ["<palette-identifier>"]
        },
        "font-variant-emoji": {
            "name": "font-variant-emoji",
            "value": "normal | text | emoji | unicode",
            "initial": "normal",
            "appliesTo": "all elements and text",
            "inherited": "yes",
            "percentages": "N/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "User agents can choose to draw a Presentation Participating Code Point in either emoji style or text style. User agents typically follow platform conventions when performing this decision.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "text",
                    "prose": "Code points are rendered as if U+FE0E VARIATION SELECTOR-15 was appended to every Presentation Participating Code Point.",
                    "type": "value",
                    "value": "text"
                },
                {
                    "name": "emoji",
                    "prose": "Code points are rendered as if U+FE0F VARIATION SELECTOR-16 was appended to every Presentation Participating Code Point.",
                    "type": "value",
                    "value": "emoji"
                },
                {
                    "name": "unicode",
                    "prose": "Code points are rendered in accordance with [UTS51] as either emoji-default, text-default, or text-only, depending on the values of the Emoji and Emoji_Presentation properties for each Presentation Participating Code Point. If present, FE0E VARIATION SELECTOR-15 and U+FE0F VARIATION SELECTOR-16 will override the default presentation of individual Presentation Participating Code Points.",
                    "type": "value",
                    "value": "unicode"
                }
            ],
            "styleDeclaration": ["font-variant-emoji", "fontVariantEmoji"],
            "styleDeclarationProperty": "fontVariantEmoji",
            "referenceValues": []
        },
        "copy-into": {
            "name": "copy-into",
            "value": "none | [ [ <custom-ident> <content-level>] [, <custom-ident> <content-level>]* ]?",
            "initial": "none",
            "appliesTo": "all elements and pseudo-elements, but not ::first-line or ::first-letter.",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["copy-into", "copyInto"],
            "styleDeclarationProperty": "copyInto",
            "referenceValues": []
        },
        "position": {
            "name": "position",
            "value": "static | relative | absolute | sticky | fixed",
            "initial": "static",
            "appliesTo": "all elements except table-column-group and table-column",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "static",
                    "prose": "The box is not a positioned box, and is laid out according to the rules of its parent formatting context. The inset properties do not apply.",
                    "type": "value",
                    "value": "static"
                },
                {
                    "name": "relative",
                    "prose": "The box is laid out as for static, then offset from the resulting position. This offsetting is a purely visual effect, and does not affect the size or position of any other box, except insofar as it increases the scrollable overflow area of its ancestors. This positioning scheme is called relative positioning.",
                    "type": "value",
                    "value": "relative"
                },
                {
                    "name": "sticky",
                    "prose": "Identical to relative, except that its offsets are automatically adjusted in reference to the nearest ancestor scroll container’s scrollport (as modified by the inset properties) in whichever axes the inset properties are not both auto, to try to keep the box in view within its containing block as the user scrolls. This positioning scheme is called sticky positioning.",
                    "type": "value",
                    "value": "sticky"
                },
                {
                    "name": "absolute",
                    "prose": "The box is taken out of flow such that it has no impact on the size or position of its siblings and ancestors, and does not participate in its parent’s formatting context. Instead, the box is positioned and sized solely in reference to its absolute positioning containing block, as modified by the box’s inset properties, see § 4 Absolute Positioning Layout Model. It can overlap in-flow content or other absolutely positioned elements, and is included in the scrollable overflow area of the box that generates is containing block. This positioning scheme is called absolute positioning.",
                    "type": "value",
                    "value": "absolute"
                },
                {
                    "name": "fixed",
                    "prose": "Same as absolute, except the box is positioned and sized relative to a fixed positioning containing block (usually the viewport in continuous media, or the page area in paged media). The box’s position is fixed with respect to this reference rectangle: when attached to the viewport it does not move when the document is scrolled, and when attached to the page area is replicated on every page when the document is paginated. This positioning scheme is called fixed positioning and is considered a subset of absolute positioning. Authors may wish to specify fixed in a media-dependent way. For instance, an author may want a box to remain at the top of the viewport on the screen, but not at the top of each printed page. The two specifications may be separated by using an '@media' rule, as in: @media screen { h1#first { position: fixed } } @media print { h1#first { position: static } }",
                    "type": "value",
                    "value": "fixed"
                }
            ],
            "styleDeclaration": ["position"],
            "styleDeclarationProperty": "position",
            "referenceValues": []
        },
        "float": {
            "name": "float",
            "value": "block-start | block-end | inline-start | inline-end | snap-block | <snap-block()> | snap-inline | <snap-inline()> | left | right | top | bottom | none",
            "initial": "none",
            "appliesTo": "all elements.",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "inline-start",
                    "prose": "If the float reference is a line box, the element generates a box that is floated to the line-start outer edge of the float reference and content flows on the line-end side of the box. If the float reference is not a line box, the element generates a box that is floated to the line-start and block-start outer edges of the float reference.",
                    "type": "value",
                    "value": "inline-start"
                },
                {
                    "name": "inline-end",
                    "prose": "If the float reference is a line box, the element generates a box that is floated to the line-ebd outer edge of the float reference and content flows on the line-start side of the box. If the float reference is not a line box, the element generates a box that is floated to the line-end and block-end outer edges of the float reference.",
                    "type": "value",
                    "value": "inline-end"
                },
                {
                    "name": "block-start",
                    "prose": "If the float reference is a line box, block-start behaves like inline-start. If the float reference is not a line box, the element generates a box that is floated to the block-start and line-start outer edges of the float reference. The initial value of the max-width or max-height property that refers to the inline size of the float is '100%'. Content flows on the block-end side of the box.",
                    "type": "value",
                    "value": "block-start"
                },
                {
                    "name": "block-end",
                    "prose": "If the float reference is a line box, block-end behaves like inline-end. If the float reference is not a line box, the element generates a box that is floated to the block-end and line-end outer edges of the float reference. The initial value of the max-width or max-height property that refers to the inline size of the float is '100%'. Content flows on the block-start side of the box.",
                    "type": "value",
                    "value": "block-end"
                },
                {
                    "name": "left",
                    "prose": "If the float reference is a line box, behaves like inline-start or inline-end, whichever corresponds to line-left for the float reference. Otherwise, behaves like block-end, inline-start or inline-end depending on the float containing block’s direction and writing-mode.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "right",
                    "prose": "If the float reference is a line box, behaves like inline-start or inline-end, whichever corresponds to line-right for the float reference. Otherwise, behaves like block-start, inline-start or inline-end depending on the float containing block’s direction and writing-mode.",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "top",
                    "prose": "Behave like block-start or inline-start depending on the float containing block’s direction and writing-mode.",
                    "type": "value",
                    "value": "top"
                },
                {
                    "name": "bottom",
                    "prose": "Behave like block-end or inline-end depending on the float containing block’s direction and writing-mode.",
                    "type": "value",
                    "value": "bottom"
                },
                {
                    "name": "snap-block()",
                    "value": "snap-block( <length> , [ start | end | near ]? )",
                    "type": "function"
                },
                {
                    "name": "snap-block",
                    "prose": "Behaves as snap-block(2em, near)",
                    "type": "value",
                    "value": "snap-block"
                },
                {
                    "name": "snap-inline()",
                    "value": "snap-inline( <length> , [ left | right | near ]? )",
                    "type": "function"
                },
                {
                    "name": "snap-inline",
                    "prose": "same as snap-inline(2em, near)",
                    "type": "value",
                    "value": "snap-inline"
                },
                {
                    "name": "none",
                    "prose": "The box is not floated.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["float"],
            "styleDeclarationProperty": "float",
            "referenceValues": ["<snap-block()>", "<snap-inline()>"]
        },
        "footnote-display": {
            "name": "footnote-display",
            "value": "block | inline | compact",
            "initial": "block",
            "appliesTo": "elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["footnote-display", "footnoteDisplay"],
            "styleDeclarationProperty": "footnoteDisplay",
            "referenceValues": []
        },
        "footnote-policy": {
            "name": "footnote-policy",
            "value": "auto | line | block",
            "initial": "auto",
            "appliesTo": "elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "The user agent chooses how to render footnotes, and may place the footnote body on a later page than the footnote reference. A footnote body must never be placed on a page before the footnote reference.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "line",
                    "prose": "If a given footnote body cannot be placed on the current page due to lack of space, the user agent introduces a forced page break at the start of the line containing the footnote reference, so that both the reference and the footnote body fall on the next page. Note that the user agent must honor widow and orphan settings when doing this, and so may need to insert the page break on an earlier line.",
                    "type": "value",
                    "value": "line"
                },
                {
                    "name": "block",
                    "prose": "As with line, except a forced page break is introduced before the paragraph that contains the footnote.",
                    "type": "value",
                    "value": "block"
                }
            ],
            "styleDeclaration": ["footnote-policy", "footnotePolicy"],
            "styleDeclarationProperty": "footnotePolicy",
            "referenceValues": []
        },
        "grid-template-columns": {
            "name": "grid-template-columns",
            "value": "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
            "initial": "none",
            "appliesTo": "grid containers",
            "inherited": "no",
            "percentages": "refer to corresponding dimension of the content area",
            "computedValue": "the keyword none or a computed track list",
            "canonicalOrder": "per grammar",
            "animationType": "if the list lengths match, by computed value type per item in the computed track list (see § 7.2.5 Computed Value of a Track Listing and § 7.2.3.3 Interpolation/Combination of repeat()); discrete otherwise",
            "values": [
                {
                    "name": "none",
                    "prose": "Indicates that no explicit grid tracks are created by this property (though explicit grid tracks could still be created by grid-template-areas).",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<track-list> | <auto-track-list>",
                    "prose": "Specifies the track list as a series of track sizing functions and line names. Each track sizing function can be specified as a length, a percentage of the grid container’s size, a measurement of the contents occupying the column or row, or a fraction of the free space in the grid. It can also be specified as a range using the minmax() notation, which can combine any of the previously mentioned mechanisms to specify separate min and max track sizing functions for the column or row.",
                    "type": "value",
                    "value": "<track-list> | <auto-track-list>"
                },
                {
                    "name": "subgrid <line-name-list>?",
                    "prose": "The subgrid value indicates that the grid will adopt the spanned portion of its parent grid in that axis (the subgridded axis). Rather than being specified explicitly, the sizes of the grid rows/columns will be taken from the parent grid's definition, and the subgrid’s items will participate in the intrinsic size calculations (CSS Grid Layout 1 § 11.5 Resolve Intrinsic Track Sizes) of any tracks shared with the parent grid. Essentially, subgrids provide the ability to pass grid parameters down through nested elements, and content-based sizing information back up to their parent grid. The <line-name-list> argument allows local naming of the grid lines shared with the parent grid: if a <line-name-list> is given, the specified <line-names>s are assigned to the lines of the subgrid’s explicit grid, one per line, starting with line 1. Excess <line-names> are ignored. If there is no parent grid, or if the grid container is otherwised forced to establish an independent formatting context (for example, due to layout containment [CSS-CONTAIN-2] or absolute positioning [CSS-POSITION-3]), the used value is the initial value, none, and the grid container is not a subgrid. An axis that is not subgridded is a standalone axis.",
                    "type": "value",
                    "value": "subgrid <line-name-list>?"
                },
                {
                    "name": "subgrid",
                    "type": "value",
                    "value": "subgrid"
                },
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "A non-negative length or percentage, as defined by CSS3 Values. [CSS-VALUES-3] <percentage> values are relative to the inner inline size of the grid container in column grid tracks, and the inner block size of the grid container in row grid tracks. If the size of the grid container depends on the size of its tracks, then the <percentage> must be treated as auto, for the purpose of calculating the intrinsic sizes of the grid container and then resolve against that resulting grid container size for the purpose of laying out the grid and its items.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "<flex [0,∞]>",
                    "prose": "A non-negative dimension with the unit fr specifying the track’s flex factor. Each <flex>-sized track takes a share of the remaining space in proportion to its flex factor. For example, given a track listing of 1fr 2fr, the tracks will take up ⅓ and ⅔ of the leftover space, respectively. See § 7.2.4 Flexible Lengths: the fr unit for more details. When appearing outside a minmax() notation, implies an automatic minimum (i.e. ''minmax(auto, <flex>)'').",
                    "type": "value",
                    "value": "<flex [0,∞]>"
                },
                {
                    "name": "minmax()",
                    "value": "minmax()",
                    "type": "value"
                },
                {
                    "name": "auto",
                    "prose": "As a maximum: represents the largest max-content contribution of the grid items occupying the grid track; however, unlike max-content, allows expansion of the track by the align-content and justify-content properties. As a minimum: represents the largest minimum size (specified by min-width/min-height) of the grid items occupying the grid track. (This initially is often, but not always, equal to a min-content minimum—see § 6.6 Automatic Minimum Size of Grid Items.) When appearing outside a minmax() notation: equivalent to minmax(auto, auto), representing the range between the minimum and maximum described above. (This behaves similar to minmax(min-content, max-content) in the most basic cases, but with extra abilities.)",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "max-content",
                    "prose": "Represents the largest max-content contribution of the grid items occupying the grid track.",
                    "type": "value",
                    "value": "max-content"
                },
                {
                    "name": "min-content",
                    "prose": "Represents the largest min-content contribution of the grid items occupying the grid track.",
                    "type": "value",
                    "value": "min-content"
                },
                {
                    "name": "fit-content()",
                    "value": "fit-content()",
                    "type": "value"
                }
            ],
            "styleDeclaration": [
                "grid-template-columns",
                "gridTemplateColumns"
            ],
            "styleDeclarationProperty": "gridTemplateColumns",
            "referenceValues": ["<track-list>", "<auto-track-list>"]
        },
        "grid-template-rows": {
            "name": "grid-template-rows",
            "value": "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
            "initial": "none",
            "appliesTo": "grid containers",
            "inherited": "no",
            "percentages": "refer to corresponding dimension of the content area",
            "computedValue": "the keyword none or a computed track list",
            "canonicalOrder": "per grammar",
            "animationType": "if the list lengths match, by computed value type per item in the computed track list (see § 7.2.5 Computed Value of a Track Listing and § 7.2.3.3 Interpolation/Combination of repeat()); discrete otherwise",
            "values": [
                {
                    "name": "none",
                    "prose": "Indicates that no explicit grid tracks are created by this property (though explicit grid tracks could still be created by grid-template-areas).",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<track-list> | <auto-track-list>",
                    "prose": "Specifies the track list as a series of track sizing functions and line names. Each track sizing function can be specified as a length, a percentage of the grid container’s size, a measurement of the contents occupying the column or row, or a fraction of the free space in the grid. It can also be specified as a range using the minmax() notation, which can combine any of the previously mentioned mechanisms to specify separate min and max track sizing functions for the column or row.",
                    "type": "value",
                    "value": "<track-list> | <auto-track-list>"
                },
                {
                    "name": "subgrid <line-name-list>?",
                    "prose": "The subgrid value indicates that the grid will adopt the spanned portion of its parent grid in that axis (the subgridded axis). Rather than being specified explicitly, the sizes of the grid rows/columns will be taken from the parent grid's definition, and the subgrid’s items will participate in the intrinsic size calculations (CSS Grid Layout 1 § 11.5 Resolve Intrinsic Track Sizes) of any tracks shared with the parent grid. Essentially, subgrids provide the ability to pass grid parameters down through nested elements, and content-based sizing information back up to their parent grid. The <line-name-list> argument allows local naming of the grid lines shared with the parent grid: if a <line-name-list> is given, the specified <line-names>s are assigned to the lines of the subgrid’s explicit grid, one per line, starting with line 1. Excess <line-names> are ignored. If there is no parent grid, or if the grid container is otherwised forced to establish an independent formatting context (for example, due to layout containment [CSS-CONTAIN-2] or absolute positioning [CSS-POSITION-3]), the used value is the initial value, none, and the grid container is not a subgrid. An axis that is not subgridded is a standalone axis.",
                    "type": "value",
                    "value": "subgrid <line-name-list>?"
                },
                {
                    "name": "subgrid",
                    "type": "value",
                    "value": "subgrid"
                },
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "A non-negative length or percentage, as defined by CSS3 Values. [CSS-VALUES-3] <percentage> values are relative to the inner inline size of the grid container in column grid tracks, and the inner block size of the grid container in row grid tracks. If the size of the grid container depends on the size of its tracks, then the <percentage> must be treated as auto, for the purpose of calculating the intrinsic sizes of the grid container and then resolve against that resulting grid container size for the purpose of laying out the grid and its items.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "<flex [0,∞]>",
                    "prose": "A non-negative dimension with the unit fr specifying the track’s flex factor. Each <flex>-sized track takes a share of the remaining space in proportion to its flex factor. For example, given a track listing of 1fr 2fr, the tracks will take up ⅓ and ⅔ of the leftover space, respectively. See § 7.2.4 Flexible Lengths: the fr unit for more details. When appearing outside a minmax() notation, implies an automatic minimum (i.e. ''minmax(auto, <flex>)'').",
                    "type": "value",
                    "value": "<flex [0,∞]>"
                },
                {
                    "name": "minmax()",
                    "value": "minmax()",
                    "type": "value"
                },
                {
                    "name": "auto",
                    "prose": "As a maximum: represents the largest max-content contribution of the grid items occupying the grid track; however, unlike max-content, allows expansion of the track by the align-content and justify-content properties. As a minimum: represents the largest minimum size (specified by min-width/min-height) of the grid items occupying the grid track. (This initially is often, but not always, equal to a min-content minimum—see § 6.6 Automatic Minimum Size of Grid Items.) When appearing outside a minmax() notation: equivalent to minmax(auto, auto), representing the range between the minimum and maximum described above. (This behaves similar to minmax(min-content, max-content) in the most basic cases, but with extra abilities.)",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "max-content",
                    "prose": "Represents the largest max-content contribution of the grid items occupying the grid track.",
                    "type": "value",
                    "value": "max-content"
                },
                {
                    "name": "min-content",
                    "prose": "Represents the largest min-content contribution of the grid items occupying the grid track.",
                    "type": "value",
                    "value": "min-content"
                },
                {
                    "name": "fit-content()",
                    "value": "fit-content()",
                    "type": "value"
                }
            ],
            "styleDeclaration": ["grid-template-rows", "gridTemplateRows"],
            "styleDeclarationProperty": "gridTemplateRows",
            "referenceValues": ["<track-list>", "<auto-track-list>"]
        },
        "masonry-auto-flow": {
            "name": "masonry-auto-flow",
            "value": "[ pack | next ] || [definite-first | ordered ]",
            "initial": "pack",
            "appliesTo": "grid containers with masonry layout",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["masonry-auto-flow", "masonryAutoFlow"],
            "styleDeclarationProperty": "masonryAutoFlow",
            "referenceValues": []
        },
        "align-tracks": {
            "name": "align-tracks",
            "value": "[normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>]#",
            "initial": "normal",
            "appliesTo": "grid containers with masonry layout in their block axis",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["align-tracks", "alignTracks"],
            "styleDeclarationProperty": "alignTracks",
            "referenceValues": [
                "<baseline-position>",
                "<content-distribution>",
                "<overflow-position>? <content-position>]#"
            ]
        },
        "justify-tracks": {
            "name": "justify-tracks",
            "value": "[normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#",
            "initial": "normal",
            "appliesTo": "grid containers with masonry layout in their inline axis",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["justify-tracks", "justifyTracks"],
            "styleDeclarationProperty": "justifyTracks",
            "referenceValues": [
                "<content-distribution>",
                "<overflow-position>? [ <content-position>"
            ]
        },
        "grid-template-areas": {
            "name": "grid-template-areas",
            "value": "none | <string>+",
            "initial": "none",
            "appliesTo": "grid containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the keyword none or a list of string values",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "Indicates that no named grid areas, and likewise no explicit grid tracks, are defined by this property (though explicit grid tracks could still be created by grid-template-columns or grid-template-rows).",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<string>+",
                    "prose": "A row is created for every separate string listed for the grid-template-areas property, and a column is created for each cell in the string, when parsed as follows: Tokenize the string into a list of the following tokens, using longest-match semantics: A sequence of ident code points, representing a named cell token with a name consisting of its code points. A sequence of one or more \".\" (U+002E FULL STOP), representing a null cell token. A sequence of whitespace, representing nothing (do not produce a token). A sequence of any other characters, representing a trash token. A null cell token represents an unnamed area in the grid container. A named cell token creates a named grid area with the same name. Multiple named cell tokens within and between rows create a single named grid area that spans the corresponding grid cells. A trash token is a syntax error, and makes the declaration invalid. All strings must define the same number of cell tokens (named cell tokens and/or null cell tokens), and at least one cell token, or else the declaration is invalid. If a named grid area spans multiple grid cells, but those cells do not form a single filled-in rectangle, the declaration is invalid.",
                    "type": "value",
                    "value": "<string>+"
                }
            ],
            "styleDeclaration": ["grid-template-areas", "gridTemplateAreas"],
            "styleDeclarationProperty": "gridTemplateAreas",
            "referenceValues": ["<string>+"]
        },
        "grid-template": {
            "name": "grid-template",
            "value": "none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?",
            "initial": "none",
            "appliesTo": "grid containers",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "none",
                    "prose": "Sets all three properties to their initial values (none).",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<'grid-template-rows'> / <'grid-template-columns'>",
                    "prose": "Sets grid-template-rows and grid-template-columns to the specified values, respectively, and sets grid-template-areas to none. grid-template: auto 1fr / auto 1fr auto; is equivalent to grid-template-rows: auto 1fr; grid-template-columns: auto 1fr auto; grid-template-areas: none;",
                    "type": "value",
                    "value": "<'grid-template-rows'> / <'grid-template-columns'>"
                },
                {
                    "name": "[ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?",
                    "prose": "Sets grid-template-areas to the strings listed. Sets grid-template-rows to the <track-size>s following each string (filling in auto for any missing sizes), and splicing in the named lines defined before/after each size. Sets grid-template-columns to the track listing specified after the slash (or none, if not specified). This syntax allows the author to align track names and sizes inline with their respective grid areas. grid-template: [header-top] \"a a a\" [header-bottom] [main-top] \"b b b\" 1fr [main-bottom] / auto 1fr auto; is equivalent to grid-template-areas: \"a a a\" \"b b b\"; grid-template-rows: [header-top] auto [header-bottom main-top] 1fr [main-bottom]; grid-template-columns: auto 1fr auto; and creates the following grid: Three columns, sized auto, 1fr, and auto, respectively Two rows sized as auto and 1fr, respectively. A line named both “header-top” and “a-start” at the top, a line with four names—“header-bottom”, “main-top”, “a-end”, and “b-start”—in the middle, a line named “main-bottom” and “b-end” at the bottom. A line named “a-start” and “b-start” on the left edge, and a line named “a-end” and “b-end” on the right edge. The grid created by the declarations above. (The “a/b-start/end” names are implicitly assigned by the named grid areas.)",
                    "type": "value",
                    "value": "[ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?"
                }
            ],
            "styleDeclaration": ["grid-template", "gridTemplate"],
            "styleDeclarationProperty": "gridTemplate",
            "referenceValues": []
        },
        "grid-auto-columns": {
            "name": "grid-auto-columns",
            "value": "<track-size>+",
            "initial": "auto",
            "appliesTo": "grid containers",
            "inherited": "no",
            "percentages": "see Track Sizing",
            "computedValue": "see Track Sizing",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["grid-auto-columns", "gridAutoColumns"],
            "styleDeclarationProperty": "gridAutoColumns",
            "referenceValues": ["<track-size>+"]
        },
        "grid-auto-rows": {
            "name": "grid-auto-rows",
            "value": "<track-size>+",
            "initial": "auto",
            "appliesTo": "grid containers",
            "inherited": "no",
            "percentages": "see Track Sizing",
            "computedValue": "see Track Sizing",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["grid-auto-rows", "gridAutoRows"],
            "styleDeclarationProperty": "gridAutoRows",
            "referenceValues": ["<track-size>+"]
        },
        "grid-auto-flow": {
            "name": "grid-auto-flow",
            "value": "[ row | column ] || dense",
            "initial": "row",
            "appliesTo": "grid containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "row",
                    "prose": "The auto-placement algorithm places items by filling each row in turn, adding new rows as necessary. If neither row nor column is provided, row is assumed.",
                    "type": "value",
                    "value": "row"
                },
                {
                    "name": "column",
                    "prose": "The auto-placement algorithm places items by filling each column in turn, adding new columns as necessary.",
                    "type": "value",
                    "value": "column"
                },
                {
                    "name": "dense",
                    "prose": "If specified, the auto-placement algorithm uses a “dense” packing algorithm, which attempts to fill in holes earlier in the grid if smaller items come up later. This may cause items to appear out-of-order, when doing so would fill in holes left by larger items. If omitted, a “sparse” algorithm is used, where the placement algorithm only ever moves “forward” in the grid when placing items, never backtracking to fill holes. This ensures that all of the auto-placed items appear “in order”, even if this leaves holes that could have been filled by later items.",
                    "type": "value",
                    "value": "dense"
                }
            ],
            "styleDeclaration": ["grid-auto-flow", "gridAutoFlow"],
            "styleDeclarationProperty": "gridAutoFlow",
            "referenceValues": []
        },
        "grid": {
            "name": "grid",
            "value": "<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>",
            "initial": "none",
            "appliesTo": "grid containers",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>?",
                    "prose": "Sets up auto-flow, by setting the tracks in one axis explicitly (setting either grid-template-rows or grid-template-columns as specified, and setting the other to none), and specifying how to auto-repeat the tracks in the other axis (setting either grid-auto-rows or grid-auto-columns as specified, and setting the other to auto). grid-auto-flow is also set to either row or column accordingly, with dense if it’s specified. All other grid sub-properties are reset to their initial values.",
                    "type": "value",
                    "value": "<'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>?"
                },
                {
                    "name": "[ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>",
                    "prose": "Sets up auto-flow, by setting the tracks in one axis explicitly (setting either grid-template-rows or grid-template-columns as specified, and setting the other to none), and specifying how to auto-repeat the tracks in the other axis (setting either grid-auto-rows or grid-auto-columns as specified, and setting the other to auto). grid-auto-flow is also set to either row or column accordingly, with dense if it’s specified. All other grid sub-properties are reset to their initial values.",
                    "type": "value",
                    "value": "[ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>"
                }
            ],
            "styleDeclaration": ["grid"],
            "styleDeclarationProperty": "grid",
            "referenceValues": [
                "<'grid-template'>",
                "<'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>?"
            ]
        },
        "grid-row-start": {
            "name": "grid-row-start",
            "value": "<grid-line>",
            "initial": "auto",
            "appliesTo": "grid items and absolutely-positioned boxes whose containing block is a grid container",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword, identifier, and/or integer",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "<grid-line>",
                    "type": "type",
                    "value": "auto | <custom-ident> | [ [ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>? ] | [ span && [ <integer [1,∞]> || <custom-ident> ] ]",
                    "values": [
                        {
                            "name": "<custom-ident>",
                            "prose": "First attempt to match the grid area’s edge to a named grid area: if there is a grid line whose line name is <custom-ident>-start (for grid-*-start) / <custom-ident>-end (for grid-*-end), contributes the first such line to the grid item’s placement. Otherwise, treat this as if the integer 1 had been specified along with the <custom-ident>.",
                            "type": "value",
                            "value": "<custom-ident>"
                        },
                        {
                            "name": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?",
                            "prose": "Contributes the Nth grid line to the grid item’s placement. If a negative integer is given, it instead counts in reverse, starting from the end edge of the explicit grid. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines are assumed to have that name for the purpose of finding this position. An <integer> value of zero makes the declaration invalid.",
                            "type": "value",
                            "value": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?"
                        },
                        {
                            "name": "span && [ <integer [1,∞]> || <custom-ident> ]",
                            "prose": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge in the corresponding direction. For example, grid-column-end: span 2 indicates the second grid line in the endward direction from the grid-column-start line. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines on the side of the explicit grid corresponding to the search direction are assumed to have that name for the purpose of counting this span. For example, given the following declarations: .grid { grid-template-columns: 100px; } .griditem { grid-column: span foo / 4; } The grid container has an explicit grid with two grid lines, numbered 1 and 2. The grid item’s column-end edge is specified to be at line 4, so two lines are generated in the endward side of the implicit grid. Its column-start edge must be the first \"foo\" line it can find startward of that. There is no \"foo\" line in the grid, though, so the only possibility is a line in the implicit grid. Line 3 is not a candidate, because it’s on the endward side of the explicit grid, while the grid-column-start span forces it to search startward. So, the only option is for the implicit grid to generate a line on the startward side of the explicit grid. An illustration of the result. If the <integer> is omitted, it defaults to 1. Negative integers or zero are invalid.",
                            "type": "value",
                            "value": "span && [ <integer [1,∞]> || <custom-ident> ]"
                        },
                        {
                            "name": "auto",
                            "prose": "The property contributes nothing to the grid item’s placement, indicating auto-placement or a default span of one. (See § 8 Placing Grid Items, above.)",
                            "type": "value",
                            "value": "auto"
                        }
                    ]
                }
            ],
            "styleDeclaration": ["grid-row-start", "gridRowStart"],
            "styleDeclarationProperty": "gridRowStart",
            "referenceValues": ["<grid-line>"]
        },
        "grid-column-start": {
            "name": "grid-column-start",
            "value": "<grid-line>",
            "initial": "auto",
            "appliesTo": "grid items and absolutely-positioned boxes whose containing block is a grid container",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword, identifier, and/or integer",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "<grid-line>",
                    "type": "type",
                    "value": "auto | <custom-ident> | [ [ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>? ] | [ span && [ <integer [1,∞]> || <custom-ident> ] ]",
                    "values": [
                        {
                            "name": "<custom-ident>",
                            "prose": "First attempt to match the grid area’s edge to a named grid area: if there is a grid line whose line name is <custom-ident>-start (for grid-*-start) / <custom-ident>-end (for grid-*-end), contributes the first such line to the grid item’s placement. Otherwise, treat this as if the integer 1 had been specified along with the <custom-ident>.",
                            "type": "value",
                            "value": "<custom-ident>"
                        },
                        {
                            "name": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?",
                            "prose": "Contributes the Nth grid line to the grid item’s placement. If a negative integer is given, it instead counts in reverse, starting from the end edge of the explicit grid. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines are assumed to have that name for the purpose of finding this position. An <integer> value of zero makes the declaration invalid.",
                            "type": "value",
                            "value": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?"
                        },
                        {
                            "name": "span && [ <integer [1,∞]> || <custom-ident> ]",
                            "prose": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge in the corresponding direction. For example, grid-column-end: span 2 indicates the second grid line in the endward direction from the grid-column-start line. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines on the side of the explicit grid corresponding to the search direction are assumed to have that name for the purpose of counting this span. For example, given the following declarations: .grid { grid-template-columns: 100px; } .griditem { grid-column: span foo / 4; } The grid container has an explicit grid with two grid lines, numbered 1 and 2. The grid item’s column-end edge is specified to be at line 4, so two lines are generated in the endward side of the implicit grid. Its column-start edge must be the first \"foo\" line it can find startward of that. There is no \"foo\" line in the grid, though, so the only possibility is a line in the implicit grid. Line 3 is not a candidate, because it’s on the endward side of the explicit grid, while the grid-column-start span forces it to search startward. So, the only option is for the implicit grid to generate a line on the startward side of the explicit grid. An illustration of the result. If the <integer> is omitted, it defaults to 1. Negative integers or zero are invalid.",
                            "type": "value",
                            "value": "span && [ <integer [1,∞]> || <custom-ident> ]"
                        },
                        {
                            "name": "auto",
                            "prose": "The property contributes nothing to the grid item’s placement, indicating auto-placement or a default span of one. (See § 8 Placing Grid Items, above.)",
                            "type": "value",
                            "value": "auto"
                        }
                    ]
                }
            ],
            "styleDeclaration": ["grid-column-start", "gridColumnStart"],
            "styleDeclarationProperty": "gridColumnStart",
            "referenceValues": ["<grid-line>"]
        },
        "grid-row-end": {
            "name": "grid-row-end",
            "value": "<grid-line>",
            "initial": "auto",
            "appliesTo": "grid items and absolutely-positioned boxes whose containing block is a grid container",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword, identifier, and/or integer",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "<grid-line>",
                    "type": "type",
                    "value": "auto | <custom-ident> | [ [ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>? ] | [ span && [ <integer [1,∞]> || <custom-ident> ] ]",
                    "values": [
                        {
                            "name": "<custom-ident>",
                            "prose": "First attempt to match the grid area’s edge to a named grid area: if there is a grid line whose line name is <custom-ident>-start (for grid-*-start) / <custom-ident>-end (for grid-*-end), contributes the first such line to the grid item’s placement. Otherwise, treat this as if the integer 1 had been specified along with the <custom-ident>.",
                            "type": "value",
                            "value": "<custom-ident>"
                        },
                        {
                            "name": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?",
                            "prose": "Contributes the Nth grid line to the grid item’s placement. If a negative integer is given, it instead counts in reverse, starting from the end edge of the explicit grid. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines are assumed to have that name for the purpose of finding this position. An <integer> value of zero makes the declaration invalid.",
                            "type": "value",
                            "value": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?"
                        },
                        {
                            "name": "span && [ <integer [1,∞]> || <custom-ident> ]",
                            "prose": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge in the corresponding direction. For example, grid-column-end: span 2 indicates the second grid line in the endward direction from the grid-column-start line. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines on the side of the explicit grid corresponding to the search direction are assumed to have that name for the purpose of counting this span. For example, given the following declarations: .grid { grid-template-columns: 100px; } .griditem { grid-column: span foo / 4; } The grid container has an explicit grid with two grid lines, numbered 1 and 2. The grid item’s column-end edge is specified to be at line 4, so two lines are generated in the endward side of the implicit grid. Its column-start edge must be the first \"foo\" line it can find startward of that. There is no \"foo\" line in the grid, though, so the only possibility is a line in the implicit grid. Line 3 is not a candidate, because it’s on the endward side of the explicit grid, while the grid-column-start span forces it to search startward. So, the only option is for the implicit grid to generate a line on the startward side of the explicit grid. An illustration of the result. If the <integer> is omitted, it defaults to 1. Negative integers or zero are invalid.",
                            "type": "value",
                            "value": "span && [ <integer [1,∞]> || <custom-ident> ]"
                        },
                        {
                            "name": "auto",
                            "prose": "The property contributes nothing to the grid item’s placement, indicating auto-placement or a default span of one. (See § 8 Placing Grid Items, above.)",
                            "type": "value",
                            "value": "auto"
                        }
                    ]
                }
            ],
            "styleDeclaration": ["grid-row-end", "gridRowEnd"],
            "styleDeclarationProperty": "gridRowEnd",
            "referenceValues": ["<grid-line>"]
        },
        "grid-column-end": {
            "name": "grid-column-end",
            "value": "<grid-line>",
            "initial": "auto",
            "appliesTo": "grid items and absolutely-positioned boxes whose containing block is a grid container",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword, identifier, and/or integer",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "<grid-line>",
                    "type": "type",
                    "value": "auto | <custom-ident> | [ [ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>? ] | [ span && [ <integer [1,∞]> || <custom-ident> ] ]",
                    "values": [
                        {
                            "name": "<custom-ident>",
                            "prose": "First attempt to match the grid area’s edge to a named grid area: if there is a grid line whose line name is <custom-ident>-start (for grid-*-start) / <custom-ident>-end (for grid-*-end), contributes the first such line to the grid item’s placement. Otherwise, treat this as if the integer 1 had been specified along with the <custom-ident>.",
                            "type": "value",
                            "value": "<custom-ident>"
                        },
                        {
                            "name": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?",
                            "prose": "Contributes the Nth grid line to the grid item’s placement. If a negative integer is given, it instead counts in reverse, starting from the end edge of the explicit grid. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines are assumed to have that name for the purpose of finding this position. An <integer> value of zero makes the declaration invalid.",
                            "type": "value",
                            "value": "[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?"
                        },
                        {
                            "name": "span && [ <integer [1,∞]> || <custom-ident> ]",
                            "prose": "Contributes a grid span to the grid item’s placement such that the corresponding edge of the grid item’s grid area is N lines from its opposite edge in the corresponding direction. For example, grid-column-end: span 2 indicates the second grid line in the endward direction from the grid-column-start line. If a name is given as a <custom-ident>, only lines with that name are counted. If not enough lines with that name exist, all implicit grid lines on the side of the explicit grid corresponding to the search direction are assumed to have that name for the purpose of counting this span. For example, given the following declarations: .grid { grid-template-columns: 100px; } .griditem { grid-column: span foo / 4; } The grid container has an explicit grid with two grid lines, numbered 1 and 2. The grid item’s column-end edge is specified to be at line 4, so two lines are generated in the endward side of the implicit grid. Its column-start edge must be the first \"foo\" line it can find startward of that. There is no \"foo\" line in the grid, though, so the only possibility is a line in the implicit grid. Line 3 is not a candidate, because it’s on the endward side of the explicit grid, while the grid-column-start span forces it to search startward. So, the only option is for the implicit grid to generate a line on the startward side of the explicit grid. An illustration of the result. If the <integer> is omitted, it defaults to 1. Negative integers or zero are invalid.",
                            "type": "value",
                            "value": "span && [ <integer [1,∞]> || <custom-ident> ]"
                        },
                        {
                            "name": "auto",
                            "prose": "The property contributes nothing to the grid item’s placement, indicating auto-placement or a default span of one. (See § 8 Placing Grid Items, above.)",
                            "type": "value",
                            "value": "auto"
                        }
                    ]
                }
            ],
            "styleDeclaration": ["grid-column-end", "gridColumnEnd"],
            "styleDeclarationProperty": "gridColumnEnd",
            "referenceValues": ["<grid-line>"]
        },
        "grid-row": {
            "name": "grid-row",
            "value": "<grid-line> [ / <grid-line> ]?",
            "initial": "auto",
            "appliesTo": "grid items and absolutely-positioned boxes whose containing block is a grid container",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "animationType": "discrete",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["grid-row", "gridRow"],
            "styleDeclarationProperty": "gridRow",
            "referenceValues": ["<grid-line> [ / <grid-line> ]?"]
        },
        "grid-column": {
            "name": "grid-column",
            "value": "<grid-line> [ / <grid-line> ]?",
            "initial": "auto",
            "appliesTo": "grid items and absolutely-positioned boxes whose containing block is a grid container",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "animationType": "discrete",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["grid-column", "gridColumn"],
            "styleDeclarationProperty": "gridColumn",
            "referenceValues": ["<grid-line> [ / <grid-line> ]?"]
        },
        "grid-area": {
            "name": "grid-area",
            "value": "<grid-line> [ / <grid-line> ]{0,3}",
            "initial": "auto",
            "appliesTo": "grid items and absolutely-positioned boxes whose containing block is a grid container",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "animationType": "discrete",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["grid-area", "gridArea"],
            "styleDeclarationProperty": "gridArea",
            "referenceValues": ["<grid-line> [ / <grid-line> ]{0,3}"]
        },
        "object-fit": {
            "name": "object-fit",
            "value": "fill | contain | cover | none | scale-down",
            "initial": "fill",
            "appliesTo": "replaced elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "fill",
                    "prose": "The replaced content is sized to fill the element’s content box: the object’s concrete object size is the element’s used width and height.",
                    "type": "value",
                    "value": "fill"
                },
                {
                    "name": "contain",
                    "prose": "The replaced content is sized to maintain its natural aspect ratio while fitting within the element’s content box: its concrete object size is resolved as a contain constraint against the element’s used width and height.",
                    "type": "value",
                    "value": "contain"
                },
                {
                    "name": "cover",
                    "prose": "The replaced content is sized to maintain its natural aspect ratio while filling the element’s entire content box: its concrete object size is resolved as a cover constraint against the element’s used width and height.",
                    "type": "value",
                    "value": "cover"
                },
                {
                    "name": "none",
                    "prose": "The replaced content is not resized to fit inside the element’s content box: determine the object’s concrete object size using the default sizing algorithm with no specified size, and a default object size equal to the replaced element’s used width and height.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "scale-down",
                    "prose": "Size the content as if none or contain were specified, whichever would result in a smaller concrete object size.",
                    "type": "value",
                    "value": "scale-down"
                }
            ],
            "styleDeclaration": ["object-fit", "objectFit"],
            "styleDeclarationProperty": "objectFit",
            "referenceValues": []
        },
        "image-resolution": {
            "name": "image-resolution",
            "value": "[ from-image || <resolution> ] && snap?",
            "initial": "1dppx",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword(s) and/or <resolution> (possibly adjusted for snap, see below)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "<resolution>",
                    "prose": "Specifies the preferred resolution explicitly. A \"dot\" in this case corresponds to a single image pixel.",
                    "type": "value",
                    "value": "<resolution>"
                },
                {
                    "name": "from-image",
                    "prose": "The image’s preferred resolution is taken as that specified by the image format (the natural resolution). If the image does not specify its own resolution, the explicitly specified resolution is used (if given), else it defaults to 1dppx.",
                    "type": "value",
                    "value": "from-image"
                },
                {
                    "name": "snap",
                    "prose": "If the \"snap\" keyword is provided, the computed <resolution> (if any) is the specified resolution rounded to the nearest value that would map one image pixel to an integer number of device pixels. If the resolution is taken from the image, then the used natural resolution is the image’s native resolution similarly adjusted.",
                    "type": "value",
                    "value": "snap"
                }
            ],
            "styleDeclaration": ["image-resolution", "imageResolution"],
            "styleDeclarationProperty": "imageResolution",
            "referenceValues": ["<resolution> ] && snap?"]
        },
        "object-view-box": {
            "name": "object-view-box",
            "value": "none | <basic-shape-rect>",
            "initial": "none",
            "appliesTo": "replaced elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword, or computed function",
            "canonicalOrder": "per grammar",
            "animationType": "as if possible, otherwise discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "The element does not have a view box.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<basic-shape-rect>",
                    "prose": "If the element does not have both a natural width and a natural height, this value has no effect, similar to none. Otherwise, specifies a view box for the element. First, resolve the <basic-shape-rect> against a reference box formed by the element’s natural sizes to obtain the element’s view box. For all purposes, the element is now treated as having natural sizes equal to the view box’s width and height. If the element had a natural aspect ratio, it’s now treated as instead having the same ratio as the view box. Further adjustments to the size/position of the element’s contents, such as object-position or object-fit, are similarly performed on the view box instead. When the element is painted, its contents are scaled and translated such that the element’s contents retain the same position and size, relative to the view box’s final size and position, that they had when the view box was determined (above). Have not yet defined what happens if the view box is zero-area. It’s an error case, so precise behavior isn’t important; just need to see what impls want to do about it.",
                    "type": "value",
                    "value": "<basic-shape-rect>"
                }
            ],
            "styleDeclaration": ["object-view-box", "objectViewBox"],
            "styleDeclarationProperty": "objectViewBox",
            "referenceValues": ["<basic-shape-rect>"]
        },
        "object-position": {
            "name": "object-position",
            "value": "<position>",
            "initial": "50% 50%",
            "appliesTo": "replaced elements",
            "inherited": "no",
            "percentages": "refer to width and height of element itself",
            "computedValue": "as for background-position",
            "canonicalOrder": "the horizontal component of the <position>, followed by the vertical component",
            "animationType": "as for background-position",
            "styleDeclaration": ["object-position", "objectPosition"],
            "styleDeclarationProperty": "objectPosition",
            "referenceValues": ["<position>"]
        },
        "image-orientation": {
            "name": "image-orientation",
            "value": "from-image | none | [ <angle> || flip ]",
            "initial": "from-image",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "the specified keyword, or an <angle>, rounded and normalized (see text), plus optionally a flip keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "No additional rotation is applied: the image is oriented as encoded.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "from-image",
                    "prose": "If the image has an orientation specified in its metadata, such as EXIF, this value computes to the angle that the metadata specifies is necessary to correctly orient the image. If necessary, this angle is then rounded and normalized as described above for an <angle> value. If there is no orientation specified in its metadata, this value computes to none.",
                    "type": "value",
                    "value": "from-image"
                },
                {
                    "name": "<angle>",
                    "prose": "Positive <angle> values cause the image to be rotated to the right (in a clockwise direction), while negative values cause a rotation to the left. If the <angle> is omitted, it defaults to 0deg. If flip is specified, after rotation the image is flipped horizontally. This value only applies to content images; decorative images continue to behave as from-image. This value is deprecated and is optional for implementations except those conforming to [CSS-PRINT]. The computed value of the property is calculated by rounding the <angle> to the nearest quarter turn, rounding towards positive infinity when that’s ambiguous, then moduloing the value by 1turn (so that it lies in the half-open range [0turn, 1turn)).",
                    "type": "value",
                    "value": "<angle>"
                }
            ],
            "styleDeclaration": ["image-orientation", "imageOrientation"],
            "styleDeclarationProperty": "imageOrientation",
            "referenceValues": []
        },
        "image-rendering": {
            "name": "image-rendering",
            "value": "auto | smooth | high-quality | pixelated | crisp-edges",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "The scaling algorithm is UA-dependent.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "smooth",
                    "prose": "The image should be scaled with an algorithm that maximizes the appearance of the image. In particular, scaling algorithms that \"smooth\" colors are acceptable, such as bilinear interpolation. This is intended for images such as photos.",
                    "type": "value",
                    "value": "smooth"
                },
                {
                    "name": "high-quality",
                    "prose": "Identical to smooth, but with a preference for higher-quality scaling. If system resources are constrained, images with high-quality should be prioritized over those with any other value, when considering which images to degrade the quality of and to what degree.",
                    "type": "value",
                    "value": "high-quality"
                },
                {
                    "name": "pixelated",
                    "prose": "The image is scaled in a way that preserves the pixelation of the original as much as possible, but allows minor smoothing as necessary to avoid distorting the image when the target size is not a clean multiple of the original. For each axis independently, first determine the integer multiple of its natural size that puts it closest to the target size and is greater than zero. Scale it to this integer-multiple-size using nearest neighbor, then scale it the rest of the way to the target size as for smooth.",
                    "type": "value",
                    "value": "pixelated"
                },
                {
                    "name": "crisp-edges",
                    "prose": "The image is scaled in a way that preserves contrast and edges, and which avoids smoothing colors or introducing blur to the image in the process. This is intended for images such as line drawings. The image may be scaled using nearest neighbor or any other UA-chosen algorithm that does not blur edges or blend colors from the source image. It can, however, detect diagonal or curved lines and render them as such (rather than as jagged-looking “giant pixels”).",
                    "type": "value",
                    "value": "crisp-edges"
                }
            ],
            "styleDeclaration": ["image-rendering", "imageRendering"],
            "styleDeclarationProperty": "imageRendering",
            "referenceValues": []
        },
        "dominant-baseline": {
            "name": "dominant-baseline",
            "value": "auto | text-bottom | alphabetic | ideographic | middle | central | mathematical | hanging | text-top",
            "initial": "auto",
            "appliesTo": "block containers, inline boxes, table rows, grid containers, flex containers, and SVG text content elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Equivalent to alphabetic in horizontal writing modes and in vertical writing modes when text-orientation is sideways. Equivalent to central in vertical writing modes when text-orientation is mixed or upright. However, in SVG text, the origin point of glyphs (used for coordinate-based glyph positioning) is always handled as for central in vertical writing modes.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "text-bottom",
                    "prose": "Use the text-under baselines.",
                    "type": "value",
                    "value": "text-bottom"
                },
                {
                    "name": "alphabetic",
                    "prose": "Use the alphabetic baselines.",
                    "type": "value",
                    "value": "alphabetic"
                },
                {
                    "name": "ideographic",
                    "prose": "Use the ideographic-under baselines.",
                    "type": "value",
                    "value": "ideographic"
                },
                {
                    "name": "middle",
                    "prose": "Use the x-middle baselines; except under text-orientation: upright (where the alphabetic and x-height baselines are essentially meaningless) use the central baseline.",
                    "type": "value",
                    "value": "middle"
                },
                {
                    "name": "central",
                    "prose": "Use the central baselines.",
                    "type": "value",
                    "value": "central"
                },
                {
                    "name": "mathematical",
                    "prose": "Use the math baselines.",
                    "type": "value",
                    "value": "mathematical"
                },
                {
                    "name": "hanging",
                    "prose": "Use the hanging baselines.",
                    "type": "value",
                    "value": "hanging"
                },
                {
                    "name": "text-top",
                    "prose": "Use the text-over baselines.",
                    "type": "value",
                    "value": "text-top"
                }
            ],
            "styleDeclaration": ["dominant-baseline", "dominantBaseline"],
            "styleDeclarationProperty": "dominantBaseline",
            "referenceValues": []
        },
        "vertical-align": {
            "name": "vertical-align",
            "value": "[ first | last] || <'alignment-baseline'> || <'baseline-shift'>",
            "initial": "baseline",
            "appliesTo": "see individual properties",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "auto",
                    "prose": "Specifies last-baseline alignment for inline-block, first-baseline alignment for everything else.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "first",
                    "prose": "Specifies first-baseline alignment.",
                    "type": "value",
                    "value": "first"
                },
                {
                    "name": "last",
                    "prose": "Specifies last-baseline alignment.",
                    "type": "value",
                    "value": "last"
                },
                {
                    "name": "baseline",
                    "prose": "Use the dominant baseline choice of the parent.",
                    "type": "value",
                    "value": "baseline"
                },
                {
                    "name": "text-bottom",
                    "prose": "Use the text-under baseline.",
                    "type": "value",
                    "value": "text-bottom"
                },
                {
                    "name": "alphabetic",
                    "prose": "Use the alphabetic baseline.",
                    "type": "value",
                    "value": "alphabetic"
                },
                {
                    "name": "ideographic",
                    "prose": "Use the ideographic-under baseline.",
                    "type": "value",
                    "value": "ideographic"
                },
                {
                    "name": "middle",
                    "prose": "In general, use the x-middle baselines; except under text-orientation: upright (where the alphabetic and x-height baselines are essentially meaningless) use the central baseline instead.",
                    "type": "value",
                    "value": "middle"
                },
                {
                    "name": "central",
                    "prose": "Use the central baseline.",
                    "type": "value",
                    "value": "central"
                },
                {
                    "name": "mathematical",
                    "prose": "Use the math baseline.",
                    "type": "value",
                    "value": "mathematical"
                },
                {
                    "name": "text-top",
                    "prose": "Use the text-over baseline.",
                    "type": "value",
                    "value": "text-top"
                },
                {
                    "name": "<length>",
                    "prose": "Raise (positive value) or lower (negative value) by the specified length.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "Raise (positive value) or lower (negative value) by the specified percentage of the line-height.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "sub",
                    "prose": "Lower by the offset appropriate for subscripts of the parent’s box. The UA may use the parent’s font metrics to find this offset; otherwise it defaults to dropping by one fifth of the parent’s used font-size.",
                    "type": "value",
                    "value": "sub"
                },
                {
                    "name": "super",
                    "prose": "Raise by the offset appropriate for superscripts of the parent’s box. The UA may use the parent’s font metrics to find this offset; otherwise it defaults to raising by one third of the parent’s used font-size.",
                    "type": "value",
                    "value": "super"
                },
                {
                    "name": "top",
                    "prose": "Align the line-over edge of the aligned subtree with the line-over edge of the line box.",
                    "type": "value",
                    "value": "top"
                },
                {
                    "name": "center",
                    "prose": "Align the center of the aligned subtree with the center of the line box.",
                    "type": "value",
                    "value": "center"
                },
                {
                    "name": "bottom",
                    "prose": "Align the line-under edge of the aligned subtree with the line-under edge of the line box.",
                    "type": "value",
                    "value": "bottom"
                }
            ],
            "styleDeclaration": ["vertical-align", "verticalAlign"],
            "styleDeclarationProperty": "verticalAlign",
            "referenceValues": ["<'alignment-baseline'>", "<'baseline-shift'>"]
        },
        "baseline-source": {
            "name": "baseline-source",
            "value": "auto | first | last",
            "initial": "auto",
            "appliesTo": "inline-level boxes",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Specifies last-baseline alignment for inline-block, first-baseline alignment for everything else.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "first",
                    "prose": "Specifies first-baseline alignment.",
                    "type": "value",
                    "value": "first"
                },
                {
                    "name": "last",
                    "prose": "Specifies last-baseline alignment.",
                    "type": "value",
                    "value": "last"
                }
            ],
            "styleDeclaration": ["baseline-source", "baselineSource"],
            "styleDeclarationProperty": "baselineSource",
            "referenceValues": []
        },
        "alignment-baseline": {
            "name": "alignment-baseline",
            "value": "baseline | text-bottom | alphabetic | ideographic | middle | central | mathematical | text-top",
            "initial": "baseline",
            "appliesTo": "inline-level boxes, flex items, grid items, table cells, and SVG text content elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "baseline",
                    "prose": "Use the dominant baseline choice of the parent.",
                    "type": "value",
                    "value": "baseline"
                },
                {
                    "name": "text-bottom",
                    "prose": "Use the text-under baseline.",
                    "type": "value",
                    "value": "text-bottom"
                },
                {
                    "name": "alphabetic",
                    "prose": "Use the alphabetic baseline.",
                    "type": "value",
                    "value": "alphabetic"
                },
                {
                    "name": "ideographic",
                    "prose": "Use the ideographic-under baseline.",
                    "type": "value",
                    "value": "ideographic"
                },
                {
                    "name": "middle",
                    "prose": "In general, use the x-middle baselines; except under text-orientation: upright (where the alphabetic and x-height baselines are essentially meaningless) use the central baseline instead.",
                    "type": "value",
                    "value": "middle"
                },
                {
                    "name": "central",
                    "prose": "Use the central baseline.",
                    "type": "value",
                    "value": "central"
                },
                {
                    "name": "mathematical",
                    "prose": "Use the math baseline.",
                    "type": "value",
                    "value": "mathematical"
                },
                {
                    "name": "text-top",
                    "prose": "Use the text-over baseline.",
                    "type": "value",
                    "value": "text-top"
                },
                {
                    "name": "text-before-edge",
                    "type": "value",
                    "value": "text-top"
                },
                {
                    "name": "text-after-edge",
                    "type": "value",
                    "value": "text-bottom"
                }
            ],
            "styleDeclaration": ["alignment-baseline", "alignmentBaseline"],
            "styleDeclarationProperty": "alignmentBaseline",
            "referenceValues": []
        },
        "baseline-shift": {
            "name": "baseline-shift",
            "value": "<length-percentage> | sub | super | top | center | bottom",
            "initial": "0",
            "appliesTo": "inline-level boxes and SVG text content elements",
            "inherited": "no",
            "percentages": "refer to the used value of line-height",
            "computedValue": "the specified keyword or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "<length>",
                    "prose": "Raise (positive value) or lower (negative value) by the specified length.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "Raise (positive value) or lower (negative value) by the specified percentage of the line-height.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "sub",
                    "prose": "Lower by the offset appropriate for subscripts of the parent’s box. The UA may use the parent’s font metrics to find this offset; otherwise it defaults to dropping by one fifth of the parent’s used font-size.",
                    "type": "value",
                    "value": "sub"
                },
                {
                    "name": "super",
                    "prose": "Raise by the offset appropriate for superscripts of the parent’s box. The UA may use the parent’s font metrics to find this offset; otherwise it defaults to raising by one third of the parent’s used font-size.",
                    "type": "value",
                    "value": "super"
                },
                {
                    "name": "top",
                    "prose": "Align the line-over edge of the aligned subtree with the line-over edge of the line box.",
                    "type": "value",
                    "value": "top"
                },
                {
                    "name": "center",
                    "prose": "Align the center of the aligned subtree with the center of the line box.",
                    "type": "value",
                    "value": "center"
                },
                {
                    "name": "bottom",
                    "prose": "Align the line-under edge of the aligned subtree with the line-under edge of the line box.",
                    "type": "value",
                    "value": "bottom"
                },
                {
                    "name": "baseline",
                    "prose": "User agents may additionally support the keyword baseline as computing to 0 if is necessary for them to support legacy SVG content. This value is not allowed in the vertical-align shorthand.",
                    "type": "value",
                    "value": "baseline"
                }
            ],
            "styleDeclaration": ["baseline-shift", "baselineShift"],
            "styleDeclarationProperty": "baselineShift",
            "referenceValues": ["<length-percentage>"]
        },
        "line-height": {
            "name": "line-height",
            "value": "normal | <number> | <length-percentage>",
            "initial": "normal",
            "appliesTo": "non-replaced inline boxes and SVG text content elements",
            "inherited": "yes",
            "percentages": "computed relative to 1em",
            "computedValue": "the specified keyword, a number, or a computed <length> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "normal",
                    "prose": "Determine the preferred line height automatically based on font metrics.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "<length>",
                    "prose": "The specified length is used as the preferred line height. Negative values are illegal.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<number>",
                    "prose": "The preferred line height is this number multiplied by the element’s computed font-size. Negative values are illegal. The computed value is the same as the specified value.",
                    "type": "value",
                    "value": "<number>"
                },
                {
                    "name": "<percentage>",
                    "prose": "The preferred line height and computed value of the property is this percentage of the element’s computed font-size. Negative values are illegal.",
                    "type": "value",
                    "value": "<percentage>"
                }
            ],
            "styleDeclaration": ["line-height", "lineHeight"],
            "styleDeclarationProperty": "lineHeight",
            "referenceValues": ["<number>", "<length-percentage>"]
        },
        "text-edge": {
            "name": "text-edge",
            "value": "leading | [ text | cap | ex | ideographic | ideographic-ink ] [ text | alphabetic | ideographic | ideographic-ink ]?",
            "initial": "leading",
            "appliesTo": "inline boxes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "the specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "leading",
                    "prose": "Use the ascent/descent plus any positive half-leading. Margin/padding/border is ignored for the purpose of sizing the line box.",
                    "type": "value",
                    "value": "leading"
                },
                {
                    "name": "text",
                    "prose": "Use the text-over baseline/text-under baseline.",
                    "type": "value",
                    "value": "text"
                },
                {
                    "name": "cap",
                    "prose": "Use the cap-height baseline.",
                    "type": "value",
                    "value": "cap"
                },
                {
                    "name": "ex",
                    "prose": "Use the x-height baseline.",
                    "type": "value",
                    "value": "ex"
                },
                {
                    "name": "ideographic",
                    "prose": "Use the ideographic-over baseline/ideographic-under baseline.",
                    "type": "value",
                    "value": "ideographic"
                },
                {
                    "name": "ideographic-ink",
                    "prose": "Use the ideographic-ink-over baseline/ideographic-ink-under baseline.",
                    "type": "value",
                    "value": "ideographic-ink"
                },
                {
                    "name": "alphabetic",
                    "prose": "Use the alphabetic baseline.",
                    "type": "value",
                    "value": "alphabetic"
                }
            ],
            "styleDeclaration": ["text-edge", "textEdge"],
            "styleDeclarationProperty": "textEdge",
            "referenceValues": []
        },
        "leading-trim": {
            "name": "leading-trim",
            "value": "normal | start | end | both",
            "initial": "normal",
            "appliesTo": "block containers and inline boxes",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "the specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "No special handling of the first/last line box when applied to a block container. When applied to an inline box, specifies that the over/under content edges coincide with the text-over/text-under baselines regardless of text-edge (which nonetheless still affects line box sizing).",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "start",
                    "prose": "For block containers: trim the block-start side of the first formatted line to the corresponding text-edge metric of its root inline box. If there is no such line, or if there is intervening non-zero padding or borders, there is no effect. For inline boxes: trims the block-end side of the box to match its content edge to the metric specified by text-edge (treating leading as text).",
                    "type": "value",
                    "value": "start"
                },
                {
                    "name": "end",
                    "prose": "For block containers: trim the block-end side of the last formatted line to the corresponding text-edge metric of its root inline box. If there is no such line, or if there is intervening non-zero padding or borders, there is no effect. For inline boxes: trims the block-end side of the box to match its content edge to the metric specified by text-edge (treating leading as text).",
                    "type": "value",
                    "value": "end"
                },
                {
                    "name": "both",
                    "prose": "Specifies the behavior of start and end simultaneously.",
                    "type": "value",
                    "value": "both"
                }
            ],
            "styleDeclaration": ["leading-trim", "leadingTrim"],
            "styleDeclarationProperty": "leadingTrim",
            "referenceValues": []
        },
        "inline-sizing": {
            "name": "inline-sizing",
            "value": "normal | stretch",
            "initial": "normal",
            "appliesTo": "inline boxes, but not ruby container boxes nor internal ruby boxes",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "The content area of the inline box is sized and positioned to fit (possibly hypothetical) text from its first available font. This specification does not specify how. A UA may, e.g., use the maximum ascender and descender of the font. (This would ensure that glyphs with parts above or below the em-box still fall within the content area, but leads to differently sized boxes for different fonts.)",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "stretch",
                    "prose": "Once the line box has been sized and its contents positioned as for normal, the inline box’s box edges are shifted such that its over/under margin edges coincide with the corresponding line box’s edges, stretching the inline box’s inner logical height so that its block-axis outer size fills the line box. (The sizes and positions of its in-flow contents are not affected.)",
                    "type": "value",
                    "value": "stretch"
                }
            ],
            "styleDeclaration": ["inline-sizing", "inlineSizing"],
            "styleDeclarationProperty": "inlineSizing",
            "referenceValues": []
        },
        "initial-letter": {
            "name": "initial-letter",
            "value": "normal | <number [1,∞]> <integer [1,∞]> | <number [1,∞]> && [ drop | raise ]?",
            "initial": "normal",
            "appliesTo": "certain inline-level boxes and ::first-letter and inside ::marker boxes (see prose)",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "the keyword normal or a number paired with an integer",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "normal",
                    "prose": "No special initial letter effect. Text behaves as normal.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "<number [1,∞]>",
                    "prose": "This first argument defines the size of the initial letter in terms of how many lines it occupies. Values less than one are invalid.",
                    "type": "value",
                    "value": "<number [1,∞]>"
                },
                {
                    "name": "<integer [1,∞]>",
                    "prose": "This optional second argument defines the number of lines the initial letter should sink. A value of 1 indicates a raised initial; values greater than 1 indicate a sunken initial. Values less than one are invalid.",
                    "type": "value",
                    "value": "<integer [1,∞]>"
                },
                {
                    "name": "raise",
                    "prose": "Computes to an initial letter sink of 1.",
                    "type": "value",
                    "value": "raise"
                },
                {
                    "name": "drop",
                    "prose": "Computes to an initial letter sink equal to the initial letter size floored to the nearest positive whole number.",
                    "type": "value",
                    "value": "drop"
                }
            ],
            "styleDeclaration": ["initial-letter", "initialLetter"],
            "styleDeclarationProperty": "initialLetter",
            "referenceValues": [
                "<number [1,∞]> <integer [1,∞]>",
                "<number [1,∞]> && [ drop"
            ]
        },
        "initial-letter-align": {
            "name": "initial-letter-align",
            "value": "[ border-box? [ alphabetic | ideographic | hanging | leading ]? ]!",
            "initial": "alphabetic",
            "appliesTo": "certain inline-level boxes and ::first-letter and inside ::marker boxes (see prose)",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "alphabetic",
                    "prose": "Use the cap-height and alphabetic baselines of the surrounding text to align the initial letter.",
                    "type": "value",
                    "value": "alphabetic"
                },
                {
                    "name": "ideographic",
                    "prose": "Use the ideographic-ink-over and ideographic-ink-under baselines of the surrounding text to align the initial letter.",
                    "type": "value",
                    "value": "ideographic"
                },
                {
                    "name": "hanging",
                    "prose": "Use the hanging and alphabetic baselines of the surrounding text to align the initial letter.",
                    "type": "value",
                    "value": "hanging"
                },
                {
                    "name": "leading",
                    "prose": "Use the over/under half-leading edges (i.e. ascent/descent + half-leading) of the surrounding text to align the initial letter.",
                    "type": "value",
                    "value": "leading"
                },
                {
                    "name": "border-box",
                    "prose": "Use the initial letter box’s line-under and line-over border edges as the over and under alignment points, respectively.",
                    "type": "value",
                    "value": "border-box"
                }
            ],
            "styleDeclaration": ["initial-letter-align", "initialLetterAlign"],
            "styleDeclarationProperty": "initialLetterAlign",
            "referenceValues": []
        },
        "initial-letter-wrap": {
            "name": "initial-letter-wrap",
            "value": "none | first | all | grid | <length-percentage>",
            "initial": "none",
            "appliesTo": "certain inline-level boxes and ::first-letter and inside ::marker boxes (see prose)",
            "inherited": "yes",
            "percentages": "relative to logical width of (last fragment of) initial letter",
            "computedValue": "specified keyword or computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "none",
                    "prose": "No contour-fitting is performed: each impacted line is aligned flush to the inline-end margin edge of the initial letter.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "first",
                    "prose": "Behaves as none if the first typographic character unit after the initial letter belongs to Unicode General Category Zs. Otherwise behaves as for all on the first line of the block containing the initial letter and as none on the rest. This example shows why contour-fitting the first line is necessary, and why it is dropped when the initial letter is followed by a space: In the top paragraph, the initial letter \"A\" has a word space after it: the gap between the top of the \"A\" and the next letter provides the necessary word separation. In the next paragraph, the initial letter \"A\" is part of the first word, and leaving a gap between the top of the \"A\" and the next letter would create a jarring visual break within the word. In this case, the first line of text should be kerned into the initial letter’s area, as shown in the bottom paragraph. Do we need an unconditional first? (I.e. Should we rename this value to auto and add a first value that does not check for spaces?) See GitHub issue 410",
                    "type": "value",
                    "value": "first"
                },
                {
                    "name": "all",
                    "prose": "For each line of text impacted by the initial letter, the line box adjacent to the initial letter starts at the start-most point that does not overlap the initial letter’s glyph outline. If the value of shape-outside is not none, shape-outside is used instead of the glyph outline. In both cases, shape-margin is applied to expand the outline, and the resulting outline is clipped by the initial letter’s margin edges.",
                    "type": "value",
                    "value": "all"
                },
                {
                    "name": "grid",
                    "prose": "This value is the same as none, except that the exclusion area of the impacted lines is increased as necessary for its end-edge to land on the character grid, i.e. to be a multiple of (1ic + letter-spacing) as computed on the containing block. The justify-self property can then be used to align the initial letter box within the exclusion area. Diagram of Japanese initial letter in vertical writing mode",
                    "type": "value",
                    "value": "grid"
                },
                {
                    "name": "<length>",
                    "prose": "This value behaves the same as first except that the adjustment to the first line is given explicitly instead of being inferred from the glyph shape. This really needs font-relative lengths to be relative to the used size. In the following example, UAs that support first will use the glyph outline plus the specified margin in order to place the first line, whereas UAs that only support <length> or <percentage> values will pull in the first line by 40% of the initial letter’s width (and then add the margin to that point). h1 + p:first-letter { initial-letter: 3; /* 3-line drop-cap */ initial-letter-wrap: first; margin-right: 0.1em; } @supports (not (initial-letter-wrap: first)) { /* Classes auto-generated on paragraphs to match first letter. */ p.A:first-letter { initial-letter-wrap: -40%; /* Start of glyph outline, assuming correct font. */ } } These values and related annoyance is likely unnecessary if someone submits a patch to Blink to support first.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "This value behaves the same as first except that the adjustment to the first line is given explicitly instead of being inferred from the glyph shape. This really needs font-relative lengths to be relative to the used size. In the following example, UAs that support first will use the glyph outline plus the specified margin in order to place the first line, whereas UAs that only support <length> or <percentage> values will pull in the first line by 40% of the initial letter’s width (and then add the margin to that point). h1 + p:first-letter { initial-letter: 3; /* 3-line drop-cap */ initial-letter-wrap: first; margin-right: 0.1em; } @supports (not (initial-letter-wrap: first)) { /* Classes auto-generated on paragraphs to match first letter. */ p.A:first-letter { initial-letter-wrap: -40%; /* Start of glyph outline, assuming correct font. */ } } These values and related annoyance is likely unnecessary if someone submits a patch to Blink to support first.",
                    "type": "value",
                    "value": "<percentage>"
                }
            ],
            "styleDeclaration": ["initial-letter-wrap", "initialLetterWrap"],
            "styleDeclarationProperty": "initialLetterWrap",
            "referenceValues": ["<length-percentage>"]
        },
        "line-grid": {
            "name": "line-grid",
            "value": "match-parent | create",
            "initial": "match-parent",
            "appliesTo": "block, flex and grid containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "match-parent",
                    "prose": "Box assumes the line grid of its parent if its writing mode is the same as its parent. If the box has a writing mode that is different than its parent, then the box creates a new line grid as create below.",
                    "type": "value",
                    "value": "match-parent"
                },
                {
                    "name": "create",
                    "prose": "Box creates a new line grid using its own font and line layout settings, including any adjustment to the line height caused by the line-height-step property. The line grid consists of a series of horizontal lines corresponding to all the baselines (alphabetic, text-top, text-bottom, mathematic, central, hanging, etc.) and to the line-over and line-under edges, positioned where they would fall if the contents of this element consisted entirely of line boxes filled with text (no sub-elements) using the first available font. If the box is paginated, the line grid is restarted on each page; since line boxes cannot be fragmented, no page begins with the bottom part of a line’s grid.",
                    "type": "value",
                    "value": "create"
                }
            ],
            "styleDeclaration": ["line-grid", "lineGrid"],
            "styleDeclarationProperty": "lineGrid",
            "referenceValues": []
        },
        "line-snap": {
            "name": "line-snap",
            "value": "none | baseline | contain",
            "initial": "none",
            "appliesTo": "block container elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "Line boxes do not snap to the grid; they stack normally.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "baseline",
                    "prose": "The dominant baseline snaps with the matching baseline on the line grid applying to the element.",
                    "type": "value",
                    "value": "baseline"
                },
                {
                    "name": "contain",
                    "prose": "Two baselines are used to align the line box: the line box is snapped so that its central baseline is centered between one of the line grid’s text-over-edge baselines and a subsequent (but not necessarily consecutive) text-under-edge baseline.",
                    "type": "value",
                    "value": "contain"
                }
            ],
            "styleDeclaration": ["line-snap", "lineSnap"],
            "styleDeclarationProperty": "lineSnap",
            "referenceValues": []
        },
        "box-snap": {
            "name": "box-snap",
            "value": "none | block-start | block-end | center | baseline | last-baseline",
            "initial": "none",
            "appliesTo": "block-level boxes and internal table elements except table cells",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "The block is not snapped to any grid.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "block-start",
                    "prose": "The block-start edge is snapped to the nearest grid line.",
                    "type": "value",
                    "value": "block-start"
                },
                {
                    "name": "block-end",
                    "prose": "The block-end edge is snapped to the nearest grid line.",
                    "type": "value",
                    "value": "block-end"
                },
                {
                    "name": "center",
                    "prose": "The block is centered between one of the baseline grid’s text-over baselines and a subsequent (but not necessarily consecutive) text-under baseline.",
                    "type": "value",
                    "value": "center"
                },
                {
                    "name": "baseline",
                    "prose": "The first line box’s dominant baseline is snapped to the nearest grid line.",
                    "type": "value",
                    "value": "baseline"
                },
                {
                    "name": "last-baseline",
                    "prose": "The last line box’s dominant baseline is snapped to the nearest grid line.",
                    "type": "value",
                    "value": "last-baseline"
                }
            ],
            "styleDeclaration": ["box-snap", "boxSnap"],
            "styleDeclarationProperty": "boxSnap",
            "referenceValues": []
        },
        "link-parameters": {
            "name": "link-parameters",
            "value": "none | <link-param>+",
            "initial": "none",
            "appliesTo": "all elements and pseudo-elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["link-parameters", "linkParameters"],
            "styleDeclarationProperty": "linkParameters",
            "referenceValues": ["<link-param>+"]
        },
        "list-style-image": {
            "name": "list-style-image",
            "value": "<image> | none",
            "initial": "none",
            "appliesTo": "list items",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "the keyword noneor the computed <image>",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "<image>",
                    "prose": "If the <image> represents a valid image, specifies the element’s marker image as the <image>. Otherwise, the element has no marker image.",
                    "type": "value",
                    "value": "<image>"
                },
                {
                    "name": "none",
                    "prose": "The element has no marker image.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["list-style-image", "listStyleImage"],
            "styleDeclarationProperty": "listStyleImage",
            "referenceValues": ["<image>"]
        },
        "list-style-type": {
            "name": "list-style-type",
            "value": "<counter-style> | <string> | none",
            "initial": "disc",
            "appliesTo": "list items",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "<counter-style>",
                    "prose": "Specifies the element’s marker string as the value of the list-item counter represented using the specified <counter-style>. Specifically, the marker string is the result of generating a counter representation of the list-item counter value using the specified <counter-style>, prefixed by the prefix of the <counter-style>, and followed by the suffix of the <counter-style>. If the specified <counter-style> does not exist, decimal is assumed.",
                    "type": "value",
                    "value": "<counter-style>"
                },
                {
                    "name": "<string>",
                    "prose": "The element’s marker string is the specified <string>.",
                    "type": "value",
                    "value": "<string>"
                },
                {
                    "name": "none",
                    "prose": "The element has no marker string.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["list-style-type", "listStyleType"],
            "styleDeclarationProperty": "listStyleType",
            "referenceValues": ["<counter-style>", "<string>"]
        },
        "list-style-position": {
            "name": "list-style-position",
            "value": "inside | outside",
            "initial": "outside",
            "appliesTo": "list items",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "keyword, but see prose",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "inside",
                    "prose": "No special effect. (The ::marker is an inline element at the start of the list item’s contents.)",
                    "type": "value",
                    "value": "inside"
                },
                {
                    "name": "outside",
                    "prose": "If the list item is a block container: the marker box is a block container and is placed outside the principal block box; however, the position of the list-item marker adjacent to floats is undefined. CSS does not specify the precise location of the marker box or its position in the painting order, but does require that it be placed on the inline-start side of the box, using the writing mode of the box indicated by marker-side. The marker box is fixed with respect to the principal block box’s border and does not scroll with the principal box’s content. A UA may hide the marker if the element’s overflow is other than visible. (This allowance may change in the future.) The size or contents of the marker box may affect the height of the principal block box and/or the height of its first line box, and in some cases may cause the creation of a new line box; this interaction is also not defined. This is handwavey nonsense from CSS2, and needs a real definition. If the list item is an inline box: this value is equivalent to inside. Alternatively, outside could lay out the marker as a previous sibling of the principal inline box.",
                    "type": "value",
                    "value": "outside"
                }
            ],
            "styleDeclaration": ["list-style-position", "listStylePosition"],
            "styleDeclarationProperty": "listStylePosition",
            "referenceValues": []
        },
        "list-style": {
            "name": "list-style",
            "value": "<'list-style-position'> || <'list-style-image'> || <'list-style-type'>",
            "initial": "see individual properties",
            "appliesTo": "list items",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["list-style", "listStyle"],
            "styleDeclarationProperty": "listStyle",
            "referenceValues": [
                "<'list-style-position'>",
                "<'list-style-image'>",
                "<'list-style-type'>"
            ]
        },
        "marker-side": {
            "name": "marker-side",
            "value": "match-self | match-parent",
            "initial": "match-self",
            "appliesTo": "list items",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "match-self",
                    "prose": "The marker box is positioned using the directionality of the ::marker’s originating element.",
                    "type": "value",
                    "value": "match-self"
                },
                {
                    "name": "match-parent",
                    "prose": "The marker box is positioned using the directionality of the ::marker’s originating element’s parent element.",
                    "type": "value",
                    "value": "match-parent"
                }
            ],
            "styleDeclaration": ["marker-side", "markerSide"],
            "styleDeclarationProperty": "markerSide",
            "referenceValues": []
        },
        "counter-reset": {
            "name": "counter-reset",
            "value": "[ <counter-name> <integer>? | <reversed-counter-name> <integer>? ]+ | none",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the keyword none or a list, each item an identifier or a reversed() function paired with an integer",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "none",
                    "prose": "This element does not create any new counters.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<counter-name> <integer>?",
                    "prose": "Instantiates a counter of the given <counter-name> with a starting value of the given <integer>, defaulting to 0.",
                    "type": "value",
                    "value": "<counter-name> <integer>?"
                },
                {
                    "name": "<reversed-counter-name> <integer>?",
                    "prose": "Instantiates a reversed counter of the given <counter-name> with a starting value of the given <integer>, or no starting value if not given.",
                    "type": "value",
                    "value": "<reversed-counter-name> <integer>?"
                },
                {
                    "name": "list-item",
                    "prose": "In addition to any explicitly defined counters that authors write in their styles, list items automatically increment a special list-item counter, which is used when generating the default marker string on list items (see list-style-type).",
                    "type": "value",
                    "value": "list-item"
                }
            ],
            "styleDeclaration": ["counter-reset", "counterReset"],
            "styleDeclarationProperty": "counterReset",
            "referenceValues": ["<reversed-counter-name> <integer>? ]+"]
        },
        "counter-increment": {
            "name": "counter-increment",
            "value": "[ <counter-name> <integer>? ]+ | none",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the keyword none or a list, each item an identifier paired with an integer",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "none",
                    "prose": "This element does not alter the value of any counters.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<counter-name> <integer>?",
                    "prose": "Sets (for counter-set) or increments (for counter-increment) the value of the named counter on the element to/by the specified <integer>. If the <integer> is omitted, it defaults to 1 (for counter-increment) or 0 (for counter-set). If there is not currently a counter of the given name on the element, the element instantiates a new counter of the given name with a starting value of 0 before setting or incrementing its value.",
                    "type": "value",
                    "value": "<counter-name> <integer>?"
                },
                {
                    "name": "list-item",
                    "prose": "In addition to any explicitly defined counters that authors write in their styles, list items automatically increment a special list-item counter, which is used when generating the default marker string on list items (see list-style-type).",
                    "type": "value",
                    "value": "list-item"
                }
            ],
            "styleDeclaration": ["counter-increment", "counterIncrement"],
            "styleDeclarationProperty": "counterIncrement",
            "referenceValues": []
        },
        "counter-set": {
            "name": "counter-set",
            "value": "[ <counter-name> <integer>? ]+ | none",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the keyword none or a list, each item an identifier paired with an integer",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "none",
                    "prose": "This element does not alter the value of any counters.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<counter-name> <integer>?",
                    "prose": "Sets (for counter-set) or increments (for counter-increment) the value of the named counter on the element to/by the specified <integer>. If the <integer> is omitted, it defaults to 1 (for counter-increment) or 0 (for counter-set). If there is not currently a counter of the given name on the element, the element instantiates a new counter of the given name with a starting value of 0 before setting or incrementing its value.",
                    "type": "value",
                    "value": "<counter-name> <integer>?"
                },
                {
                    "name": "list-item",
                    "prose": "In addition to any explicitly defined counters that authors write in their styles, list items automatically increment a special list-item counter, which is used when generating the default marker string on list items (see list-style-type).",
                    "type": "value",
                    "value": "list-item"
                }
            ],
            "styleDeclaration": ["counter-set", "counterSet"],
            "styleDeclarationProperty": "counterSet",
            "referenceValues": []
        },
        "block-size": {
            "name": "block-size",
            "newValues": "stretch | fit-content | contain",
            "values": [
                {
                    "name": "stretch",
                    "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
                    "type": "value",
                    "value": "stretch"
                },
                {
                    "name": "fit-content",
                    "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
                    "type": "value",
                    "value": "fit-content"
                },
                {
                    "name": "contain",
                    "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
                    "type": "value",
                    "value": "contain"
                }
            ],
            "styleDeclaration": ["block-size", "blockSize"],
            "styleDeclarationProperty": "blockSize",
            "referenceValues": []
        },
        "inline-size": {
            "name": "inline-size",
            "newValues": "stretch | fit-content | contain",
            "values": [
                {
                    "name": "stretch",
                    "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
                    "type": "value",
                    "value": "stretch"
                },
                {
                    "name": "fit-content",
                    "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
                    "type": "value",
                    "value": "fit-content"
                },
                {
                    "name": "contain",
                    "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
                    "type": "value",
                    "value": "contain"
                }
            ],
            "styleDeclaration": ["inline-size", "inlineSize"],
            "styleDeclarationProperty": "inlineSize",
            "referenceValues": []
        },
        "min-block-size": {
            "name": "min-block-size",
            "newValues": "stretch | fit-content | contain",
            "values": [
                {
                    "name": "stretch",
                    "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
                    "type": "value",
                    "value": "stretch"
                },
                {
                    "name": "fit-content",
                    "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
                    "type": "value",
                    "value": "fit-content"
                },
                {
                    "name": "contain",
                    "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
                    "type": "value",
                    "value": "contain"
                }
            ],
            "styleDeclaration": ["min-block-size", "minBlockSize"],
            "styleDeclarationProperty": "minBlockSize",
            "referenceValues": []
        },
        "min-inline-size": {
            "name": "min-inline-size",
            "newValues": "stretch | fit-content | contain",
            "values": [
                {
                    "name": "stretch",
                    "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
                    "type": "value",
                    "value": "stretch"
                },
                {
                    "name": "fit-content",
                    "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
                    "type": "value",
                    "value": "fit-content"
                },
                {
                    "name": "contain",
                    "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
                    "type": "value",
                    "value": "contain"
                }
            ],
            "styleDeclaration": ["min-inline-size", "minInlineSize"],
            "styleDeclarationProperty": "minInlineSize",
            "referenceValues": []
        },
        "max-block-size": {
            "name": "max-block-size",
            "newValues": "stretch | fit-content | contain",
            "values": [
                {
                    "name": "stretch",
                    "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
                    "type": "value",
                    "value": "stretch"
                },
                {
                    "name": "fit-content",
                    "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
                    "type": "value",
                    "value": "fit-content"
                },
                {
                    "name": "contain",
                    "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
                    "type": "value",
                    "value": "contain"
                }
            ],
            "styleDeclaration": ["max-block-size", "maxBlockSize"],
            "styleDeclarationProperty": "maxBlockSize",
            "referenceValues": []
        },
        "max-inline-size": {
            "name": "max-inline-size",
            "newValues": "stretch | fit-content | contain",
            "values": [
                {
                    "name": "stretch",
                    "prose": "Applies stretch-fit sizing, attempting to match the size of the box’s margin box to the size of its containing block. See § 6.1 Stretch-fit Sizing: filling the containing block.",
                    "type": "value",
                    "value": "stretch"
                },
                {
                    "name": "fit-content",
                    "prose": "Essentially fit-content(stretch) i.e. min(max-content, max(min-content, stretch)).",
                    "type": "value",
                    "value": "fit-content"
                },
                {
                    "name": "contain",
                    "prose": "If the box has a preferred aspect ratio, applies contain-fit sizing, attempting to fit into the box’s constraints while maintaining its preferred aspect ratio insofar as possible. See § 6.2 Contain-fit Sizing: stretching while maintaining an aspect ratio. If the box has no preferred aspect ratio, applies stretch-fit sizing.",
                    "type": "value",
                    "value": "contain"
                }
            ],
            "styleDeclaration": ["max-inline-size", "maxInlineSize"],
            "styleDeclarationProperty": "maxInlineSize",
            "referenceValues": []
        },
        "margin-block-start": {
            "name": "margin-block-start",
            "value": "<'margin-top'>",
            "initial": "0",
            "appliesTo": "Same as margin-top",
            "inherited": "no",
            "percentages": "As for the corresponding physical property",
            "computedValue": "Same as corresponding margin-* properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "margin",
            "styleDeclaration": ["margin-block-start", "marginBlockStart"],
            "styleDeclarationProperty": "marginBlockStart",
            "referenceValues": ["<'margin-top'>"]
        },
        "margin-block-end": {
            "name": "margin-block-end",
            "value": "<'margin-top'>",
            "initial": "0",
            "appliesTo": "Same as margin-top",
            "inherited": "no",
            "percentages": "As for the corresponding physical property",
            "computedValue": "Same as corresponding margin-* properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "margin",
            "styleDeclaration": ["margin-block-end", "marginBlockEnd"],
            "styleDeclarationProperty": "marginBlockEnd",
            "referenceValues": ["<'margin-top'>"]
        },
        "margin-inline-start": {
            "name": "margin-inline-start",
            "value": "<'margin-top'>",
            "initial": "0",
            "appliesTo": "Same as margin-top",
            "inherited": "no",
            "percentages": "As for the corresponding physical property",
            "computedValue": "Same as corresponding margin-* properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "margin",
            "styleDeclaration": ["margin-inline-start", "marginInlineStart"],
            "styleDeclarationProperty": "marginInlineStart",
            "referenceValues": ["<'margin-top'>"]
        },
        "margin-inline-end": {
            "name": "margin-inline-end",
            "value": "<'margin-top'>",
            "initial": "0",
            "appliesTo": "Same as margin-top",
            "inherited": "no",
            "percentages": "As for the corresponding physical property",
            "computedValue": "Same as corresponding margin-* properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "margin",
            "styleDeclaration": ["margin-inline-end", "marginInlineEnd"],
            "styleDeclarationProperty": "marginInlineEnd",
            "referenceValues": ["<'margin-top'>"]
        },
        "margin-block": {
            "name": "margin-block",
            "value": "<'margin-top'>{1,2}",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["margin-block", "marginBlock"],
            "styleDeclarationProperty": "marginBlock",
            "referenceValues": ["<'margin-top'>{1,2}"]
        },
        "margin-inline": {
            "name": "margin-inline",
            "value": "<'margin-top'>{1,2}",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["margin-inline", "marginInline"],
            "styleDeclarationProperty": "marginInline",
            "referenceValues": ["<'margin-top'>{1,2}"]
        },
        "padding-block-start": {
            "name": "padding-block-start",
            "value": "<'padding-top'>",
            "initial": "0",
            "appliesTo": "Same as padding-top",
            "inherited": "no",
            "percentages": "As for the corresponding physical property",
            "computedValue": "Same as corresponding padding-* properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "padding",
            "styleDeclaration": ["padding-block-start", "paddingBlockStart"],
            "styleDeclarationProperty": "paddingBlockStart",
            "referenceValues": ["<'padding-top'>"]
        },
        "padding-block-end": {
            "name": "padding-block-end",
            "value": "<'padding-top'>",
            "initial": "0",
            "appliesTo": "Same as padding-top",
            "inherited": "no",
            "percentages": "As for the corresponding physical property",
            "computedValue": "Same as corresponding padding-* properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "padding",
            "styleDeclaration": ["padding-block-end", "paddingBlockEnd"],
            "styleDeclarationProperty": "paddingBlockEnd",
            "referenceValues": ["<'padding-top'>"]
        },
        "padding-inline-start": {
            "name": "padding-inline-start",
            "value": "<'padding-top'>",
            "initial": "0",
            "appliesTo": "Same as padding-top",
            "inherited": "no",
            "percentages": "As for the corresponding physical property",
            "computedValue": "Same as corresponding padding-* properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "padding",
            "styleDeclaration": ["padding-inline-start", "paddingInlineStart"],
            "styleDeclarationProperty": "paddingInlineStart",
            "referenceValues": ["<'padding-top'>"]
        },
        "padding-inline-end": {
            "name": "padding-inline-end",
            "value": "<'padding-top'>",
            "initial": "0",
            "appliesTo": "Same as padding-top",
            "inherited": "no",
            "percentages": "As for the corresponding physical property",
            "computedValue": "Same as corresponding padding-* properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "padding",
            "styleDeclaration": ["padding-inline-end", "paddingInlineEnd"],
            "styleDeclarationProperty": "paddingInlineEnd",
            "referenceValues": ["<'padding-top'>"]
        },
        "padding-block": {
            "name": "padding-block",
            "value": "<'padding-top'>{1,2}",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["padding-block", "paddingBlock"],
            "styleDeclarationProperty": "paddingBlock",
            "referenceValues": ["<'padding-top'>{1,2}"]
        },
        "padding-inline": {
            "name": "padding-inline",
            "value": "<'padding-top'>{1,2}",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["padding-inline", "paddingInline"],
            "styleDeclarationProperty": "paddingInline",
            "referenceValues": ["<'padding-top'>{1,2}"]
        },
        "border-block-start-width": {
            "name": "border-block-start-width",
            "value": "<'border-top-width'>",
            "initial": "medium",
            "appliesTo": "Same as border-top-width",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "Same as corresponding border-*-width properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "border-width",
            "styleDeclaration": [
                "border-block-start-width",
                "borderBlockStartWidth"
            ],
            "styleDeclarationProperty": "borderBlockStartWidth",
            "referenceValues": ["<'border-top-width'>"]
        },
        "border-block-end-width": {
            "name": "border-block-end-width",
            "value": "<'border-top-width'>",
            "initial": "medium",
            "appliesTo": "Same as border-top-width",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "Same as corresponding border-*-width properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "border-width",
            "styleDeclaration": [
                "border-block-end-width",
                "borderBlockEndWidth"
            ],
            "styleDeclarationProperty": "borderBlockEndWidth",
            "referenceValues": ["<'border-top-width'>"]
        },
        "border-inline-start-width": {
            "name": "border-inline-start-width",
            "value": "<'border-top-width'>",
            "initial": "medium",
            "appliesTo": "Same as border-top-width",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "Same as corresponding border-*-width properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "border-width",
            "styleDeclaration": [
                "border-inline-start-width",
                "borderInlineStartWidth"
            ],
            "styleDeclarationProperty": "borderInlineStartWidth",
            "referenceValues": ["<'border-top-width'>"]
        },
        "border-inline-end-width": {
            "name": "border-inline-end-width",
            "value": "<'border-top-width'>",
            "initial": "medium",
            "appliesTo": "Same as border-top-width",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "Same as corresponding border-*-width properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "border-width",
            "styleDeclaration": [
                "border-inline-end-width",
                "borderInlineEndWidth"
            ],
            "styleDeclarationProperty": "borderInlineEndWidth",
            "referenceValues": ["<'border-top-width'>"]
        },
        "border-block-width": {
            "name": "border-block-width",
            "value": "<'border-top-width'>{1,2}",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["border-block-width", "borderBlockWidth"],
            "styleDeclarationProperty": "borderBlockWidth",
            "referenceValues": ["<'border-top-width'>{1,2}"]
        },
        "border-inline-width": {
            "name": "border-inline-width",
            "value": "<'border-top-width'>{1,2}",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["border-inline-width", "borderInlineWidth"],
            "styleDeclarationProperty": "borderInlineWidth",
            "referenceValues": ["<'border-top-width'>{1,2}"]
        },
        "border-block-start-style": {
            "name": "border-block-start-style",
            "value": "<'border-top-style'>",
            "initial": "none",
            "appliesTo": "Same as border-top-style",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "Same as corresponding border-*-style properties",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "border-style",
            "styleDeclaration": [
                "border-block-start-style",
                "borderBlockStartStyle"
            ],
            "styleDeclarationProperty": "borderBlockStartStyle",
            "referenceValues": ["<'border-top-style'>"]
        },
        "border-block-end-style": {
            "name": "border-block-end-style",
            "value": "<'border-top-style'>",
            "initial": "none",
            "appliesTo": "Same as border-top-style",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "Same as corresponding border-*-style properties",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "border-style",
            "styleDeclaration": [
                "border-block-end-style",
                "borderBlockEndStyle"
            ],
            "styleDeclarationProperty": "borderBlockEndStyle",
            "referenceValues": ["<'border-top-style'>"]
        },
        "border-inline-start-style": {
            "name": "border-inline-start-style",
            "value": "<'border-top-style'>",
            "initial": "none",
            "appliesTo": "Same as border-top-style",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "Same as corresponding border-*-style properties",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "border-style",
            "styleDeclaration": [
                "border-inline-start-style",
                "borderInlineStartStyle"
            ],
            "styleDeclarationProperty": "borderInlineStartStyle",
            "referenceValues": ["<'border-top-style'>"]
        },
        "border-inline-end-style": {
            "name": "border-inline-end-style",
            "value": "<'border-top-style'>",
            "initial": "none",
            "appliesTo": "Same as border-top-style",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "Same as corresponding border-*-style properties",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "border-style",
            "styleDeclaration": [
                "border-inline-end-style",
                "borderInlineEndStyle"
            ],
            "styleDeclarationProperty": "borderInlineEndStyle",
            "referenceValues": ["<'border-top-style'>"]
        },
        "border-block-style": {
            "name": "border-block-style",
            "value": "<'border-top-style'>{1,2}",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["border-block-style", "borderBlockStyle"],
            "styleDeclarationProperty": "borderBlockStyle",
            "referenceValues": ["<'border-top-style'>{1,2}"]
        },
        "border-inline-style": {
            "name": "border-inline-style",
            "value": "<'border-top-style'>{1,2}",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["border-inline-style", "borderInlineStyle"],
            "styleDeclarationProperty": "borderInlineStyle",
            "referenceValues": ["<'border-top-style'>{1,2}"]
        },
        "border-block-start-color": {
            "name": "border-block-start-color",
            "value": "<'border-top-color'>",
            "initial": "currentcolor",
            "appliesTo": "Same as border-top-color",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "Same as corresponding border-*-color properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "border-color",
            "styleDeclaration": [
                "border-block-start-color",
                "borderBlockStartColor"
            ],
            "styleDeclarationProperty": "borderBlockStartColor",
            "referenceValues": ["<'border-top-color'>"]
        },
        "border-block-end-color": {
            "name": "border-block-end-color",
            "value": "<'border-top-color'>",
            "initial": "currentcolor",
            "appliesTo": "Same as border-top-color",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "Same as corresponding border-*-color properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "border-color",
            "styleDeclaration": [
                "border-block-end-color",
                "borderBlockEndColor"
            ],
            "styleDeclarationProperty": "borderBlockEndColor",
            "referenceValues": ["<'border-top-color'>"]
        },
        "border-inline-start-color": {
            "name": "border-inline-start-color",
            "value": "<'border-top-color'>",
            "initial": "currentcolor",
            "appliesTo": "Same as border-top-color",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "Same as corresponding border-*-color properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "border-color",
            "styleDeclaration": [
                "border-inline-start-color",
                "borderInlineStartColor"
            ],
            "styleDeclarationProperty": "borderInlineStartColor",
            "referenceValues": ["<'border-top-color'>"]
        },
        "border-inline-end-color": {
            "name": "border-inline-end-color",
            "value": "<'border-top-color'>",
            "initial": "currentcolor",
            "appliesTo": "Same as border-top-color",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "Same as corresponding border-*-color properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "border-color",
            "styleDeclaration": [
                "border-inline-end-color",
                "borderInlineEndColor"
            ],
            "styleDeclarationProperty": "borderInlineEndColor",
            "referenceValues": ["<'border-top-color'>"]
        },
        "border-block-color": {
            "name": "border-block-color",
            "value": "<'border-top-color'>{1,2}",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["border-block-color", "borderBlockColor"],
            "styleDeclarationProperty": "borderBlockColor",
            "referenceValues": ["<'border-top-color'>{1,2}"]
        },
        "border-inline-color": {
            "name": "border-inline-color",
            "value": "<'border-top-color'>{1,2}",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["border-inline-color", "borderInlineColor"],
            "styleDeclarationProperty": "borderInlineColor",
            "referenceValues": ["<'border-top-color'>{1,2}"]
        },
        "border-block-start": {
            "name": "border-block-start",
            "value": "<'border-top-width'> || <'border-top-style'> || <color>",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["border-block-start", "borderBlockStart"],
            "styleDeclarationProperty": "borderBlockStart",
            "referenceValues": [
                "<'border-top-width'>",
                "<'border-top-style'>",
                "<color>"
            ]
        },
        "border-block-end": {
            "name": "border-block-end",
            "value": "<'border-top-width'> || <'border-top-style'> || <color>",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["border-block-end", "borderBlockEnd"],
            "styleDeclarationProperty": "borderBlockEnd",
            "referenceValues": [
                "<'border-top-width'>",
                "<'border-top-style'>",
                "<color>"
            ]
        },
        "border-inline-start": {
            "name": "border-inline-start",
            "value": "<'border-top-width'> || <'border-top-style'> || <color>",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["border-inline-start", "borderInlineStart"],
            "styleDeclarationProperty": "borderInlineStart",
            "referenceValues": [
                "<'border-top-width'>",
                "<'border-top-style'>",
                "<color>"
            ]
        },
        "border-inline-end": {
            "name": "border-inline-end",
            "value": "<'border-top-width'> || <'border-top-style'> || <color>",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["border-inline-end", "borderInlineEnd"],
            "styleDeclarationProperty": "borderInlineEnd",
            "referenceValues": [
                "<'border-top-width'>",
                "<'border-top-style'>",
                "<color>"
            ]
        },
        "border-block": {
            "name": "border-block",
            "value": "<'border-block-start'>",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["border-block", "borderBlock"],
            "styleDeclarationProperty": "borderBlock",
            "referenceValues": ["<'border-block-start'>"]
        },
        "border-inline": {
            "name": "border-inline",
            "value": "<'border-block-start'>",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["border-inline", "borderInline"],
            "styleDeclarationProperty": "borderInline",
            "referenceValues": ["<'border-block-start'>"]
        },
        "border-start-start-radius": {
            "name": "border-start-start-radius",
            "value": "<'border-top-left-radius'>",
            "initial": "Same as border-top-left-radius",
            "appliesTo": "Same as border-top-left-radius",
            "inherited": "no",
            "percentages": "Same as border-top-left-radius",
            "computedValue": "Same as corresponding physical border-*-radius properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "border-radius",
            "styleDeclaration": [
                "border-start-start-radius",
                "borderStartStartRadius"
            ],
            "styleDeclarationProperty": "borderStartStartRadius",
            "referenceValues": ["<'border-top-left-radius'>"]
        },
        "border-start-end-radius": {
            "name": "border-start-end-radius",
            "value": "<'border-top-left-radius'>",
            "initial": "Same as border-top-left-radius",
            "appliesTo": "Same as border-top-left-radius",
            "inherited": "no",
            "percentages": "Same as border-top-left-radius",
            "computedValue": "Same as corresponding physical border-*-radius properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "border-radius",
            "styleDeclaration": [
                "border-start-end-radius",
                "borderStartEndRadius"
            ],
            "styleDeclarationProperty": "borderStartEndRadius",
            "referenceValues": ["<'border-top-left-radius'>"]
        },
        "border-end-start-radius": {
            "name": "border-end-start-radius",
            "value": "<'border-top-left-radius'>",
            "initial": "Same as border-top-left-radius",
            "appliesTo": "Same as border-top-left-radius",
            "inherited": "no",
            "percentages": "Same as border-top-left-radius",
            "computedValue": "Same as corresponding physical border-*-radius properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "border-radius",
            "styleDeclaration": [
                "border-end-start-radius",
                "borderEndStartRadius"
            ],
            "styleDeclarationProperty": "borderEndStartRadius",
            "referenceValues": ["<'border-top-left-radius'>"]
        },
        "border-end-end-radius": {
            "name": "border-end-end-radius",
            "value": "<'border-top-left-radius'>",
            "initial": "Same as border-top-left-radius",
            "appliesTo": "Same as border-top-left-radius",
            "inherited": "no",
            "percentages": "Same as border-top-left-radius",
            "computedValue": "Same as corresponding physical border-*-radius properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "border-radius",
            "styleDeclaration": ["border-end-end-radius", "borderEndEndRadius"],
            "styleDeclarationProperty": "borderEndEndRadius",
            "referenceValues": ["<'border-top-left-radius'>"]
        },
        "clip-path": {
            "name": "clip-path",
            "value": "<clip-source> | [ <basic-shape> || <geometry-box> ] | none",
            "initial": "none",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified, but with <url> values made absolute",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "media": "visual",
            "values": [
                {
                    "name": "fill-box",
                    "prose": "Uses the object bounding box as reference box.",
                    "type": "value",
                    "value": "fill-box"
                },
                {
                    "name": "stroke-box",
                    "prose": "Uses the stroke bounding box as reference box.",
                    "type": "value",
                    "value": "stroke-box"
                },
                {
                    "name": "view-box",
                    "prose": "Uses the nearest SVG viewport as reference box. If a viewBox attribute is specified for the SVG viewport creating element: The reference box is positioned at the origin of the coordinate system established by the viewBox attribute. The dimension of the reference box is set to the width and height values of the viewBox attribute.",
                    "type": "value",
                    "value": "view-box"
                }
            ],
            "styleDeclaration": ["clip-path", "clipPath"],
            "styleDeclarationProperty": "clipPath",
            "referenceValues": ["<clip-source>", "<geometry-box> ]"]
        },
        "clip-rule": {
            "name": "clip-rule",
            "value": "nonzero | evenodd",
            "initial": "nonzero",
            "appliesTo": "Applies to SVG graphics elements",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "values": [
                {
                    "name": "nonzero",
                    "prose": "See description of fill-rule property [SVG11].",
                    "type": "value",
                    "value": "nonzero"
                },
                {
                    "name": "evenodd",
                    "prose": "See description of fill-rule property [SVG11].",
                    "type": "value",
                    "value": "evenodd"
                }
            ],
            "styleDeclaration": ["clip-rule", "clipRule"],
            "styleDeclarationProperty": "clipRule",
            "referenceValues": []
        },
        "mask-image": {
            "name": "mask-image",
            "value": "<mask-reference>#",
            "initial": "none",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the keyword none, a computed <image>, or a computed <url>",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "values": [
                {
                    "name": "<url>",
                    "prose": "A URL reference to a mask element (for example url(commonmasks.svg#mask)) or to a CSS image.",
                    "type": "value",
                    "value": "<url>"
                }
            ],
            "styleDeclaration": ["mask-image", "maskImage"],
            "styleDeclarationProperty": "maskImage",
            "referenceValues": ["<mask-reference>#"]
        },
        "mask-mode": {
            "name": "mask-mode",
            "value": "<masking-mode>#",
            "initial": "match-source",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "values": [
                {
                    "name": "alpha",
                    "prose": "A value of alpha indicates that the alpha values of the mask layer image should be used as the mask values. See Calculating mask values.",
                    "type": "value",
                    "value": "alpha"
                },
                {
                    "name": "luminance",
                    "prose": "A value of luminance indicates that the luminance values of the mask layer image should be used as the mask values. See Calculating mask values.",
                    "type": "value",
                    "value": "luminance"
                },
                {
                    "name": "match-source",
                    "prose": "If the <mask-reference> of the mask-image property is of type <mask-source> the value specified by the referenced mask element’s mask-type property must be used. If the <mask-reference> of the mask-image property is of type <image> the alpha values of the mask layer image should be used as the mask values.",
                    "type": "value",
                    "value": "match-source"
                }
            ],
            "styleDeclaration": ["mask-mode", "maskMode"],
            "styleDeclarationProperty": "maskMode",
            "referenceValues": ["<masking-mode>#"]
        },
        "mask-repeat": {
            "name": "mask-repeat",
            "value": "<repeat-style>#",
            "initial": "repeat",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "Consists of: two keywords, one per dimension",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "styleDeclaration": ["mask-repeat", "maskRepeat"],
            "styleDeclarationProperty": "maskRepeat",
            "referenceValues": ["<repeat-style>#"]
        },
        "mask-position": {
            "name": "mask-position",
            "value": "<position>#",
            "initial": "0% 0%",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "refer to size of mask painting area minus size of mask layer image; see text background-position [CSS3BG]",
            "computedValue": "Consisting of: two keywords representing the origin and two offsets from that origin, each given as an absolute length (if given a <length>), otherwise as a percentage.",
            "canonicalOrder": "per grammar",
            "animationType": "repeatable list",
            "media": "visual",
            "styleDeclaration": ["mask-position", "maskPosition"],
            "styleDeclarationProperty": "maskPosition",
            "referenceValues": ["<position>#"]
        },
        "mask-clip": {
            "name": "mask-clip",
            "value": "[ <geometry-box> | no-clip ]#",
            "initial": "border-box",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "values": [
                {
                    "name": "content-box",
                    "prose": "The painted content is restricted to (clipped to) the content box.",
                    "type": "value",
                    "value": "content-box"
                },
                {
                    "name": "padding-box",
                    "prose": "The painted content is restricted to (clipped to) the padding box.",
                    "type": "value",
                    "value": "padding-box"
                },
                {
                    "name": "border-box",
                    "prose": "The painted content is restricted to (clipped to) the border box.",
                    "type": "value",
                    "value": "border-box"
                },
                {
                    "name": "fill-box",
                    "prose": "The painted content is restricted to (clipped to) the object bounding box.",
                    "type": "value",
                    "value": "fill-box"
                },
                {
                    "name": "stroke-box",
                    "prose": "The painted content is restricted to (clipped to) the stroke bounding box.",
                    "type": "value",
                    "value": "stroke-box"
                },
                {
                    "name": "view-box",
                    "prose": "Uses the nearest SVG viewport as reference box. If a viewBox attribute is specified for the SVG viewport creating element: The reference box is positioned at the origin of the coordinate system established by the viewBox attribute. The dimension of the reference box is set to the width and height values of the viewBox attribute.",
                    "type": "value",
                    "value": "view-box"
                },
                {
                    "name": "no-clip",
                    "prose": "The painted content is not restricted (not clipped).",
                    "type": "value",
                    "value": "no-clip"
                }
            ],
            "styleDeclaration": ["mask-clip", "maskClip"],
            "styleDeclarationProperty": "maskClip",
            "referenceValues": []
        },
        "mask-origin": {
            "name": "mask-origin",
            "value": "<geometry-box>#",
            "initial": "border-box",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "values": [
                {
                    "name": "content-box",
                    "prose": "The position is relative to the content box.",
                    "type": "value",
                    "value": "content-box"
                },
                {
                    "name": "padding-box",
                    "prose": "The position is relative to the padding box. (For single boxes 0 0 is the upper left corner of the padding edge, 100% 100% is the lower right corner.)",
                    "type": "value",
                    "value": "padding-box"
                },
                {
                    "name": "border-box",
                    "prose": "The position is relative to the border box.",
                    "type": "value",
                    "value": "border-box"
                },
                {
                    "name": "fill-box",
                    "prose": "The position is relative to the object bounding box.",
                    "type": "value",
                    "value": "fill-box"
                },
                {
                    "name": "stroke-box",
                    "prose": "The position is relative to the stroke bounding box.",
                    "type": "value",
                    "value": "stroke-box"
                },
                {
                    "name": "view-box",
                    "prose": "Uses the nearest SVG viewport as reference box. If a viewBox attribute is specified for the SVG viewport creating element: The reference box is positioned at the origin of the coordinate system established by the viewBox attribute. The dimension of the reference box is set to the width and height values of the viewBox attribute.",
                    "type": "value",
                    "value": "view-box"
                }
            ],
            "styleDeclaration": ["mask-origin", "maskOrigin"],
            "styleDeclarationProperty": "maskOrigin",
            "referenceValues": ["<geometry-box>#"]
        },
        "mask-size": {
            "name": "mask-size",
            "value": "<bg-size>#",
            "initial": "auto",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified, but with lengths made absolute",
            "canonicalOrder": "per grammar",
            "animationType": "repeatable list",
            "media": "visual",
            "styleDeclaration": ["mask-size", "maskSize"],
            "styleDeclarationProperty": "maskSize",
            "referenceValues": ["<bg-size>#"]
        },
        "mask-composite": {
            "name": "mask-composite",
            "value": "<compositing-operator>#",
            "initial": "add",
            "appliesTo": "All elements. In SVG, it applies to container elements without the defs element and all graphics elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "values": [
                {
                    "name": "add",
                    "prose": "The source is placed over the destination. (See Porter-Duff compositing operator source over for more details.)",
                    "type": "value",
                    "value": "add"
                },
                {
                    "name": "subtract",
                    "prose": "The source is placed, where it falls outside of the destination. (See Porter-Duff compositing operator source out for more details.)",
                    "type": "value",
                    "value": "subtract"
                },
                {
                    "name": "intersect",
                    "prose": "The parts of source that overlap the destination, replace the destination. (See Porter-Duff compositing operator source in .)",
                    "type": "value",
                    "value": "intersect"
                },
                {
                    "name": "exclude",
                    "prose": "The non-overlapping regions of source and destination are combined. (See Porter-Duff compositing operator XOR.)",
                    "type": "value",
                    "value": "exclude"
                }
            ],
            "styleDeclaration": ["mask-composite", "maskComposite"],
            "styleDeclarationProperty": "maskComposite",
            "referenceValues": ["<compositing-operator>#"]
        },
        "mask": {
            "name": "mask",
            "value": "<mask-layer>#",
            "initial": "see individual properties",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "see individual properties",
            "media": "visual",
            "styleDeclaration": ["mask"],
            "styleDeclarationProperty": "mask",
            "referenceValues": ["<mask-layer>#"]
        },
        "mask-border-source": {
            "name": "mask-border-source",
            "value": "none | <image>",
            "initial": "none",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "they keyword none or the computed <image>",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "styleDeclaration": ["mask-border-source", "maskBorderSource"],
            "styleDeclarationProperty": "maskBorderSource",
            "referenceValues": ["<image>"]
        },
        "mask-border-mode": {
            "name": "mask-border-mode",
            "value": "luminance | alpha",
            "initial": "alpha",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "values": [
                {
                    "name": "alpha",
                    "prose": "A value of alpha indicates that the alpha values of the mask border image should be used as the mask values. See Calculating mask values.",
                    "type": "value",
                    "value": "alpha"
                },
                {
                    "name": "luminance",
                    "prose": "A value of luminance indicates that the luminance values of the mask border image should be used as the mask values. See Calculating mask values.",
                    "type": "value",
                    "value": "luminance"
                }
            ],
            "styleDeclaration": ["mask-border-mode", "maskBorderMode"],
            "styleDeclarationProperty": "maskBorderMode",
            "referenceValues": []
        },
        "mask-border-slice": {
            "name": "mask-border-slice",
            "value": "[ <number> | <percentage> ]{1,4} fill?",
            "initial": "0",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "refer to size of the mask border image",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "values": [
                {
                    "name": "fill",
                    "prose": "This property specifies inward offsets from the top, right, bottom, and left edges of the mask border image, dividing it into nine regions: four corners, four edges and a middle. The middle image part is discarded and treated as fully opaque white (the content covered by the middle part is not masked and shines through) unless the fill keyword is present.",
                    "type": "value",
                    "value": "fill"
                }
            ],
            "styleDeclaration": ["mask-border-slice", "maskBorderSlice"],
            "styleDeclarationProperty": "maskBorderSlice",
            "referenceValues": ["<percentage> ]{1,4} fill?"]
        },
        "mask-border-width": {
            "name": "mask-border-width",
            "value": "[ <length-percentage> | <number> | auto ]{1,4}",
            "initial": "auto",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "relative to width/height of the mask border image area",
            "computedValue": "all <length>s made absolute, otherwise as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "styleDeclaration": ["mask-border-width", "maskBorderWidth"],
            "styleDeclarationProperty": "maskBorderWidth",
            "referenceValues": ["<number>"]
        },
        "mask-border-outset": {
            "name": "mask-border-outset",
            "value": "[ <length> | <number> ]{1,4}",
            "initial": "0",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "all <length>s made absolute, otherwise as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "styleDeclaration": ["mask-border-outset", "maskBorderOutset"],
            "styleDeclarationProperty": "maskBorderOutset",
            "referenceValues": ["<number> ]{1,4}"]
        },
        "mask-border-repeat": {
            "name": "mask-border-repeat",
            "value": "[ stretch | repeat | round | space ]{1,2}",
            "initial": "stretch",
            "appliesTo": "All elements. In SVG, it applies to container elements excluding the defs element, all graphics elements and the use element",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "styleDeclaration": ["mask-border-repeat", "maskBorderRepeat"],
            "styleDeclarationProperty": "maskBorderRepeat",
            "referenceValues": []
        },
        "mask-border": {
            "name": "mask-border",
            "value": "<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>",
            "initial": "See individual properties",
            "appliesTo": "See individual properties",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "See individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "See individual properties",
            "media": "visual",
            "styleDeclaration": ["mask-border", "maskBorder"],
            "styleDeclarationProperty": "maskBorder",
            "referenceValues": [
                "<'mask-border-source'>",
                "<'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]?",
                "<'mask-border-repeat'>",
                "<'mask-border-mode'>"
            ]
        },
        "mask-type": {
            "name": "mask-type",
            "value": "luminance | alpha",
            "initial": "luminance",
            "appliesTo": "mask elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "values": [
                {
                    "name": "luminance",
                    "prose": "Indicates that the luminance values of the mask should be used.",
                    "type": "value",
                    "value": "luminance"
                },
                {
                    "name": "alpha",
                    "prose": "Indicates that the alpha values of the mask should be used.",
                    "type": "value",
                    "value": "alpha"
                }
            ],
            "styleDeclaration": ["mask-type", "maskType"],
            "styleDeclarationProperty": "maskType",
            "referenceValues": []
        },
        "clip": {
            "name": "clip",
            "value": "<rect()> | auto",
            "initial": "auto",
            "appliesTo": "Absolutely positioned elements. In SVG, it applies to elements which establish a new viewport, pattern elements and mask elements.",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "media": "visual",
            "values": [
                {
                    "name": "rect()",
                    "value": "rect( <top>, <right>, <bottom>, <left> )",
                    "type": "function"
                },
                {
                    "name": "<top>",
                    "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
                    "type": "type"
                },
                {
                    "name": "<right>",
                    "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
                    "type": "type"
                },
                {
                    "name": "<bottom>",
                    "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
                    "type": "type"
                },
                {
                    "name": "<left>",
                    "prose": "<top>, <right>, <bottom>, and <left> may either have a <length> value or auto. Negative lengths are permitted. The value auto means that a given edge of the clipping region will be the same as the edge of the element’s generated border box (i.e., auto means the same as 0 for <top> and <left>, the same as the used value of the height plus the sum of vertical padding and border widths for <bottom>, and the same as the used value of the width plus the sum of the horizontal padding and border widths for <right>, such that four auto values result in the clipping region being the same as the element’s border box).",
                    "type": "type"
                }
            ],
            "styleDeclaration": ["clip"],
            "styleDeclarationProperty": "clip",
            "referenceValues": ["<rect()>"]
        },
        "column-span": {
            "name": "column-span",
            "value": "none | all",
            "initial": "none",
            "appliesTo": "in-flow block-level elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "The element does not span multiple columns.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "all",
                    "prose": "The element forces a column break and is taken out of flow to span across all columns of the nearest multicol ancestor in the same block formatting context. Content in the normal flow that appears before the element is automatically balanced across all columns in the immediately preceding multi-column line before the element appears, and any subsequent content flows into a new multi-column line after the element. The element establishes an independent formatting context.",
                    "type": "value",
                    "value": "all"
                }
            ],
            "styleDeclaration": ["column-span", "columnSpan"],
            "styleDeclarationProperty": "columnSpan",
            "referenceValues": []
        },
        "column-width": {
            "name": "column-width",
            "newValues": "min-content | max-content | fit-content(<length-percentage>)",
            "computedValue": "as specified, with <length-percentage> values computed",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "min-content",
                    "prose": "Specifies the optimal column width as the min-content inline size of the multi-column container’s contents.",
                    "type": "value",
                    "value": "min-content"
                },
                {
                    "name": "max-content",
                    "prose": "Specifies the optimal column width as the max-content inline size of the multi-column container’s contents.",
                    "type": "value",
                    "value": "max-content"
                },
                {
                    "name": "fit-content()",
                    "value": "fit-content()",
                    "type": "value"
                }
            ],
            "styleDeclaration": ["column-width", "columnWidth"],
            "styleDeclarationProperty": "columnWidth",
            "referenceValues": []
        },
        "column-count": {
            "name": "column-count",
            "value": "auto | <integer [1,∞]>",
            "initial": "auto",
            "appliesTo": "block containers except table wrapper boxes",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "auto",
                    "prose": "means that the number of columns will be determined by other properties (e.g., column-width, if it has a non-auto value).",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<integer [1,∞]>",
                    "prose": "describes the optimal number of columns into which the content of the element will be flowed. Values must be greater than 0. If both column-width and column-count have non-auto values, the integer value describes the maximum number of columns.",
                    "type": "value",
                    "value": "<integer [1,∞]>"
                }
            ],
            "styleDeclaration": ["column-count", "columnCount"],
            "styleDeclarationProperty": "columnCount",
            "referenceValues": ["<integer [1,∞]>"]
        },
        "columns": {
            "name": "columns",
            "value": "<'column-width'> || <'column-count'>",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["columns"],
            "styleDeclarationProperty": "columns",
            "referenceValues": ["<'column-width'>", "<'column-count'>"]
        },
        "column-rule-color": {
            "name": "column-rule-color",
            "value": "<color>",
            "initial": "currentcolor",
            "appliesTo": "multicol containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "computed color",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "<color>",
                    "prose": "Specifies the color of the column rule.",
                    "type": "value",
                    "value": "<color>"
                }
            ],
            "styleDeclaration": ["column-rule-color", "columnRuleColor"],
            "styleDeclarationProperty": "columnRuleColor",
            "referenceValues": ["<color>"]
        },
        "column-rule-style": {
            "name": "column-rule-style",
            "value": "<line-style>",
            "initial": "none",
            "appliesTo": "multicol containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["column-rule-style", "columnRuleStyle"],
            "styleDeclarationProperty": "columnRuleStyle",
            "referenceValues": ["<line-style>"]
        },
        "column-rule-width": {
            "name": "column-rule-width",
            "value": "<line-width>",
            "initial": "medium",
            "appliesTo": "multicol containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "absolute length, snapped as a border width; 0 if the column rule style is none or hidden",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["column-rule-width", "columnRuleWidth"],
            "styleDeclarationProperty": "columnRuleWidth",
            "referenceValues": ["<line-width>"]
        },
        "column-rule": {
            "name": "column-rule",
            "value": "<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["column-rule", "columnRule"],
            "styleDeclarationProperty": "columnRule",
            "referenceValues": [
                "<'column-rule-width'>",
                "<'column-rule-style'>",
                "<'column-rule-color'>"
            ]
        },
        "column-fill": {
            "name": "column-fill",
            "value": "auto | balance | balance-all",
            "initial": "balance",
            "appliesTo": "multicol containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "balance",
                    "prose": "Balance content equally between columns, as far as possible. In fragmented contexts, only the last fragment is balanced.",
                    "type": "value",
                    "value": "balance"
                },
                {
                    "name": "balance-all",
                    "prose": "Balance content equally between columns, as far as possible. In fragmented contexts, all fragments are balanced.",
                    "type": "value",
                    "value": "balance-all"
                },
                {
                    "name": "auto",
                    "prose": "fill columns sequentially",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["column-fill", "columnFill"],
            "styleDeclarationProperty": "columnFill",
            "referenceValues": []
        },
        "spatial-navigation-contain": {
            "name": "spatial-navigation-contain",
            "value": "auto | contain",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "If the element is a scroll container then it establishes a spatial navigation container, otherwise it does not.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "contain",
                    "prose": "The element establishes a spatial navigation container",
                    "type": "value",
                    "value": "contain"
                }
            ],
            "styleDeclaration": [
                "spatial-navigation-contain",
                "spatialNavigationContain"
            ],
            "styleDeclarationProperty": "spatialNavigationContain",
            "referenceValues": []
        },
        "spatial-navigation-action": {
            "name": "spatial-navigation-action",
            "value": "auto | focus | scroll",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "If there are visible focusable elements within the scroll container in the direction requested, the closest one becomes focused. Otherwise, the scroll container is scrolled in the direction requested.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "focus",
                    "prose": "The focus is moved to the nearest focusable element within the scroll container, regardless of whether it is visible. If there are none, the scroll container is not scrolled, and the search continues up the ancestry chain instead.",
                    "type": "value",
                    "value": "focus"
                },
                {
                    "name": "scroll",
                    "prose": "If the currently focused element is not itself a scroll container, this value on an ancestor scroll container has the same effect as auto. If the currently focused element is a scroll container, it is scrolled in the direction requested without changing which element is in focus, regardless of the presence of focusable descendants.",
                    "type": "value",
                    "value": "scroll"
                }
            ],
            "styleDeclaration": [
                "spatial-navigation-action",
                "spatialNavigationAction"
            ],
            "styleDeclarationProperty": "spatialNavigationAction",
            "referenceValues": []
        },
        "spatial-navigation-function": {
            "name": "spatial-navigation-function",
            "value": "normal | grid",
            "initial": "normal",
            "appliesTo": "spatial navigation containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "Moves the focus with the default focus navigation algorithm defined by UA. In general, the focus moves to the element with the closest distance calculated by finding the shortest distance.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "grid",
                    "prose": "Moves the focus to the element which is aligned most in the navigation direction. If there are more than one aligned candidates in the navigation direction, select the element with the closest distance along the axis which corresponds to the navigation direction. In case of multiple elements with the same distance, select the element with the minimum amount of alignment. Else if there isn’t any aligned candidate in a given direction, select the element with the closest distance along the axis which corresponds to the navigation direction. In case of multiple elements with the same distance, select the element with the minimum distance along the axis which is orthogonal to the navigation direction.",
                    "type": "value",
                    "value": "grid"
                }
            ],
            "styleDeclaration": [
                "spatial-navigation-function",
                "spatialNavigationFunction"
            ],
            "styleDeclarationProperty": "spatialNavigationFunction",
            "referenceValues": []
        },
        "overflow-clip-margin-top": {
            "name": "overflow-clip-margin-top",
            "value": "<visual-box> || <length [0,∞]>",
            "initial": "0px",
            "appliesTo": "boxes to which overflow applies",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "the computed <length> and a <visual-box> keyword",
            "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
            "canonicalOrder": "per grammar",
            "logicalPropertyGroup": "overflow-clip-margin",
            "styleDeclaration": [
                "overflow-clip-margin-top",
                "overflowClipMarginTop"
            ],
            "styleDeclarationProperty": "overflowClipMarginTop",
            "referenceValues": ["<visual-box>", "<length [0,∞]>"]
        },
        "overflow-clip-margin-right": {
            "name": "overflow-clip-margin-right",
            "value": "<visual-box> || <length [0,∞]>",
            "initial": "0px",
            "appliesTo": "boxes to which overflow applies",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "the computed <length> and a <visual-box> keyword",
            "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
            "canonicalOrder": "per grammar",
            "logicalPropertyGroup": "overflow-clip-margin",
            "styleDeclaration": [
                "overflow-clip-margin-right",
                "overflowClipMarginRight"
            ],
            "styleDeclarationProperty": "overflowClipMarginRight",
            "referenceValues": ["<visual-box>", "<length [0,∞]>"]
        },
        "overflow-clip-margin-bottom": {
            "name": "overflow-clip-margin-bottom",
            "value": "<visual-box> || <length [0,∞]>",
            "initial": "0px",
            "appliesTo": "boxes to which overflow applies",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "the computed <length> and a <visual-box> keyword",
            "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
            "canonicalOrder": "per grammar",
            "logicalPropertyGroup": "overflow-clip-margin",
            "styleDeclaration": [
                "overflow-clip-margin-bottom",
                "overflowClipMarginBottom"
            ],
            "styleDeclarationProperty": "overflowClipMarginBottom",
            "referenceValues": ["<visual-box>", "<length [0,∞]>"]
        },
        "overflow-clip-margin-left": {
            "name": "overflow-clip-margin-left",
            "value": "<visual-box> || <length [0,∞]>",
            "initial": "0px",
            "appliesTo": "boxes to which overflow applies",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "the computed <length> and a <visual-box> keyword",
            "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
            "canonicalOrder": "per grammar",
            "logicalPropertyGroup": "overflow-clip-margin",
            "styleDeclaration": [
                "overflow-clip-margin-left",
                "overflowClipMarginLeft"
            ],
            "styleDeclarationProperty": "overflowClipMarginLeft",
            "referenceValues": ["<visual-box>", "<length [0,∞]>"]
        },
        "overflow-clip-margin-block-start": {
            "name": "overflow-clip-margin-block-start",
            "value": "<visual-box> || <length [0,∞]>",
            "initial": "0px",
            "appliesTo": "boxes to which overflow applies",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "the computed <length> and a <visual-box> keyword",
            "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
            "canonicalOrder": "per grammar",
            "logicalPropertyGroup": "overflow-clip-margin",
            "styleDeclaration": [
                "overflow-clip-margin-block-start",
                "overflowClipMarginBlockStart"
            ],
            "styleDeclarationProperty": "overflowClipMarginBlockStart",
            "referenceValues": ["<visual-box>", "<length [0,∞]>"]
        },
        "overflow-clip-margin-inline-start": {
            "name": "overflow-clip-margin-inline-start",
            "value": "<visual-box> || <length [0,∞]>",
            "initial": "0px",
            "appliesTo": "boxes to which overflow applies",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "the computed <length> and a <visual-box> keyword",
            "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
            "canonicalOrder": "per grammar",
            "logicalPropertyGroup": "overflow-clip-margin",
            "styleDeclaration": [
                "overflow-clip-margin-inline-start",
                "overflowClipMarginInlineStart"
            ],
            "styleDeclarationProperty": "overflowClipMarginInlineStart",
            "referenceValues": ["<visual-box>", "<length [0,∞]>"]
        },
        "overflow-clip-margin-block-end": {
            "name": "overflow-clip-margin-block-end",
            "value": "<visual-box> || <length [0,∞]>",
            "initial": "0px",
            "appliesTo": "boxes to which overflow applies",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "the computed <length> and a <visual-box> keyword",
            "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
            "canonicalOrder": "per grammar",
            "logicalPropertyGroup": "overflow-clip-margin",
            "styleDeclaration": [
                "overflow-clip-margin-block-end",
                "overflowClipMarginBlockEnd"
            ],
            "styleDeclarationProperty": "overflowClipMarginBlockEnd",
            "referenceValues": ["<visual-box>", "<length [0,∞]>"]
        },
        "overflow-clip-margin-inline-end": {
            "name": "overflow-clip-margin-inline-end",
            "value": "<visual-box> || <length [0,∞]>",
            "initial": "0px",
            "appliesTo": "boxes to which overflow applies",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "the computed <length> and a <visual-box> keyword",
            "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
            "canonicalOrder": "per grammar",
            "logicalPropertyGroup": "overflow-clip-margin",
            "styleDeclaration": [
                "overflow-clip-margin-inline-end",
                "overflowClipMarginInlineEnd"
            ],
            "styleDeclarationProperty": "overflowClipMarginInlineEnd",
            "referenceValues": ["<visual-box>", "<length [0,∞]>"]
        },
        "overflow-clip-margin": {
            "name": "overflow-clip-margin",
            "value": "<visual-box> || <length [0,∞]>",
            "initial": "0px",
            "appliesTo": "boxes to which overflow applies",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the computed <length> and a <visual-box> keyword",
            "canonicalOrder": "per grammar",
            "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
            "values": [
                {
                    "name": "<visual-box>",
                    "prose": "Specifies the box edge to use as the overflow clip edge origin, i.e. when the specified offset is zero. If omitted, defaults to padding-box.",
                    "type": "value",
                    "value": "<visual-box>"
                },
                {
                    "name": "<length [0,∞]>",
                    "prose": "The specified offset dictates how much the overflow clip edge is expanded from the specified box edge Negative values are invalid. Defaults to zero if omitted.",
                    "type": "value",
                    "value": "<length [0,∞]>"
                }
            ],
            "styleDeclaration": ["overflow-clip-margin", "overflowClipMargin"],
            "styleDeclarationProperty": "overflowClipMargin",
            "referenceValues": ["<visual-box>", "<length [0,∞]>"]
        },
        "overflow-clip-margin-inline": {
            "name": "overflow-clip-margin-inline",
            "value": "<visual-box> || <length [0,∞]>",
            "initial": "0px",
            "appliesTo": "boxes to which overflow applies",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": [
                "overflow-clip-margin-inline",
                "overflowClipMarginInline"
            ],
            "styleDeclarationProperty": "overflowClipMarginInline",
            "referenceValues": ["<visual-box>", "<length [0,∞]>"]
        },
        "overflow-clip-margin-block": {
            "name": "overflow-clip-margin-block",
            "value": "<visual-box> || <length [0,∞]>",
            "initial": "0px",
            "appliesTo": "boxes to which overflow applies",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": [
                "overflow-clip-margin-block",
                "overflowClipMarginBlock"
            ],
            "styleDeclarationProperty": "overflowClipMarginBlock",
            "referenceValues": ["<visual-box>", "<length [0,∞]>"]
        },
        "text-overflow": {
            "name": "text-overflow",
            "value": "clip | ellipsis",
            "initial": "clip",
            "appliesTo": "block containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "clip",
                    "prose": "Clip inline content that overflows its block container element. Characters may be only partially rendered.",
                    "type": "value",
                    "value": "clip"
                },
                {
                    "name": "ellipsis",
                    "prose": "Render an ellipsis character (U+2026) to represent clipped inline content. Implementations may substitute a more language, script, or writing-mode appropriate ellipsis character, or three dots \"...\" if the ellipsis character is unavailable.",
                    "type": "value",
                    "value": "ellipsis"
                }
            ],
            "styleDeclaration": ["text-overflow", "textOverflow"],
            "styleDeclarationProperty": "textOverflow",
            "referenceValues": []
        },
        "block-ellipsis": {
            "name": "block-ellipsis",
            "value": "none | auto | <string>",
            "initial": "none",
            "appliesTo": "block containers",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "The rendering is unaffected.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "auto",
                    "prose": "Render an ellipsis character (U+2026)—or a more typographically-appropriate equivalent—as the block overflow ellipsis at the end of the affected line box. UAs should use the conventions of the content language, writing system, and writing mode to determine the most appropriate ellipsis string.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<string>",
                    "prose": "Render the specified string as the block overflow ellipsis at the end of the affected line box. The UA may truncate this string if it is absurdly long.",
                    "type": "value",
                    "value": "<string>"
                }
            ],
            "styleDeclaration": ["block-ellipsis", "blockEllipsis"],
            "styleDeclarationProperty": "blockEllipsis",
            "referenceValues": ["<string>"]
        },
        "line-clamp": {
            "name": "line-clamp",
            "value": "none | <integer [1,∞]> <'block-ellipsis'>?",
            "initial": "none",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "none",
                    "prose": "Sets max-lines to none, continue to auto, and block-ellipsis to none.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<integer [1,∞]> <block-ellipsis>?",
                    "prose": "Sets max-lines to the specified <integer>, continue to discard, and the block-ellipsis property to second component of the value or to auto if omitted.",
                    "type": "value",
                    "value": "<integer [1,∞]> <block-ellipsis>?"
                }
            ],
            "styleDeclaration": ["line-clamp", "lineClamp"],
            "styleDeclarationProperty": "lineClamp",
            "referenceValues": ["<integer [1,∞]> <'block-ellipsis'>?"]
        },
        "-webkit-line-clamp": {
            "name": "-webkit-line-clamp",
            "value": "none | <integer [1,∞]>",
            "initial": "none",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": [
                "-webkit-line-clamp",
                "WebkitLineClamp",
                "webkitLineClamp"
            ],
            "styleDeclarationProperty": "webkitLineClamp",
            "referenceValues": ["<integer [1,∞]>"]
        },
        "continue": {
            "name": "continue",
            "value": "auto | discard | -webkit-discard | overflow | paginate | fragments",
            "initial": "auto",
            "appliesTo": "block containers and multicol containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "-webkit-discard",
                    "prose": "The -webkit-discard value behaves identically to discard, except that it only takes effect if the computed value of the display property on the parent is -webkit-box or -webkit-inline-box and the computed value of the -webkit-box-orient property on the parent is vertical.",
                    "type": "value",
                    "value": "-webkit-discard"
                },
                {
                    "name": "auto",
                    "prose": "If the box has more content than can fit, the excess content is handled according to the usual rules.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "discard",
                    "prose": "The box becomes a fragmentation container that captures region breaks, if it is not already. [CSS-BREAK-3] Content after the first region break is not rendered (see below). (If the box is a multi-column container, any overflow columns are also not rendered.)",
                    "type": "value",
                    "value": "discard"
                },
                {
                    "name": "overflow",
                    "prose": "Content that doesn’t fit overflows, according to the overflow property",
                    "type": "value",
                    "value": "overflow"
                },
                {
                    "name": "paginate",
                    "prose": "Content that doesn’t fit paginates. This creates a paginated view inside the element similar to the way that 'overflow: scroll' creates a scrollable view. See paginated overflow",
                    "type": "value",
                    "value": "paginate"
                },
                {
                    "name": "fragments",
                    "prose": "content that doesn’t fit causes the element to copy itself and continue laying out. See fragment overflow.",
                    "type": "value",
                    "value": "fragments"
                }
            ],
            "styleDeclaration": ["continue"],
            "styleDeclarationProperty": "continue",
            "referenceValues": []
        },
        "max-lines": {
            "name": "max-lines",
            "value": "none | <integer [1,∞]>",
            "initial": "none",
            "appliesTo": "block containers which are also fragmentation containers that capture region breaks",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "the keyword none or an integer",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "none",
                    "prose": "Otherwise, if the value of max-lines is not none, a region break is forced after its Nth descendant in-flow line box, where N is the specified value of max-lines. Only lines boxes in the same Block Formatting Context are counted: the contents of descendants that establish independent formatting contexts are skipped over while counting line boxes.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["max-lines", "maxLines"],
            "styleDeclarationProperty": "maxLines",
            "referenceValues": ["<integer [1,∞]>"]
        },
        "overflow-x": {
            "name": "overflow-x",
            "value": "visible | hidden | clip | scroll | auto",
            "initial": "visible",
            "appliesTo": "block containers [CSS2], flex containers [CSS3-FLEXBOX], grid containers [CSS3-GRID-LAYOUT], and replaced elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "usually specified value, but see text",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "overflow",
            "values": [
                {
                    "name": "visible",
                    "prose": "There is no special handling of overflow, that is, the box’s content is rendered outside the box if positioned there. The box is not a scroll container.",
                    "type": "value",
                    "value": "visible"
                },
                {
                    "name": "hidden",
                    "prose": "This value indicates that the box’s content is clipped to its padding box and that the UA must not provide any scrolling user interface to view the content outside the clipping region, nor allow scrolling by direct intervention of the user, such as dragging on a touch screen or using the scrolling wheel on a mouse. However, the content must still be scrollable programmatically, for example using the mechanisms defined in [CSSOM-VIEW], and the box is therefore still a scroll container.",
                    "type": "value",
                    "value": "hidden"
                },
                {
                    "name": "clip",
                    "prose": "This value indicates that the box’s content is clipped to its overflow clip edge and that no scrolling user interface should be provided by the UA to view the content outside the clipping region. In addition, unlike overflow: hidden which still allows programmatic scrolling, overflow: clip forbids scrolling entirely, through any mechanism, and therefore the box is not a scroll container. Unlike hidden, this value does not cause the element to establish a new formatting context.",
                    "type": "value",
                    "value": "clip"
                },
                {
                    "name": "scroll",
                    "prose": "This value indicates that the content is clipped to the padding box, but can be scrolled into view (and therefore the box is a scroll container). Furthermore, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed whether or not any of its content is clipped. This avoids any problem with scrollbars appearing and disappearing in a dynamic environment. When the target medium is print, overflowing content may be printed; it is not defined where it may be printed.",
                    "type": "value",
                    "value": "scroll"
                },
                {
                    "name": "auto",
                    "prose": "Like scroll when the box has scrollable overflow; like hidden otherwise. Thus, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism will only be displayed if there is overflow.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["overflow-x", "overflowX"],
            "styleDeclarationProperty": "overflowX",
            "referenceValues": []
        },
        "overflow-y": {
            "name": "overflow-y",
            "value": "visible | hidden | clip | scroll | auto",
            "initial": "visible",
            "appliesTo": "block containers [CSS2], flex containers [CSS3-FLEXBOX], grid containers [CSS3-GRID-LAYOUT], and replaced elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "usually specified value, but see text",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "overflow",
            "values": [
                {
                    "name": "visible",
                    "prose": "There is no special handling of overflow, that is, the box’s content is rendered outside the box if positioned there. The box is not a scroll container.",
                    "type": "value",
                    "value": "visible"
                },
                {
                    "name": "hidden",
                    "prose": "This value indicates that the box’s content is clipped to its padding box and that the UA must not provide any scrolling user interface to view the content outside the clipping region, nor allow scrolling by direct intervention of the user, such as dragging on a touch screen or using the scrolling wheel on a mouse. However, the content must still be scrollable programmatically, for example using the mechanisms defined in [CSSOM-VIEW], and the box is therefore still a scroll container.",
                    "type": "value",
                    "value": "hidden"
                },
                {
                    "name": "clip",
                    "prose": "This value indicates that the box’s content is clipped to its overflow clip edge and that no scrolling user interface should be provided by the UA to view the content outside the clipping region. In addition, unlike overflow: hidden which still allows programmatic scrolling, overflow: clip forbids scrolling entirely, through any mechanism, and therefore the box is not a scroll container. Unlike hidden, this value does not cause the element to establish a new formatting context.",
                    "type": "value",
                    "value": "clip"
                },
                {
                    "name": "scroll",
                    "prose": "This value indicates that the content is clipped to the padding box, but can be scrolled into view (and therefore the box is a scroll container). Furthermore, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed whether or not any of its content is clipped. This avoids any problem with scrollbars appearing and disappearing in a dynamic environment. When the target medium is print, overflowing content may be printed; it is not defined where it may be printed.",
                    "type": "value",
                    "value": "scroll"
                },
                {
                    "name": "auto",
                    "prose": "Like scroll when the box has scrollable overflow; like hidden otherwise. Thus, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism will only be displayed if there is overflow.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["overflow-y", "overflowY"],
            "styleDeclarationProperty": "overflowY",
            "referenceValues": []
        },
        "overflow-block": {
            "name": "overflow-block",
            "value": "visible | hidden | clip | scroll | auto",
            "initial": "visible",
            "appliesTo": "block containers [CSS2], flex containers [CSS3-FLEXBOX], grid containers [CSS3-GRID-LAYOUT], and replaced elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "usually specified value, but see text",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "overflow",
            "styleDeclaration": ["overflow-block", "overflowBlock"],
            "styleDeclarationProperty": "overflowBlock",
            "referenceValues": []
        },
        "overflow-inline": {
            "name": "overflow-inline",
            "value": "visible | hidden | clip | scroll | auto",
            "initial": "visible",
            "appliesTo": "block containers [CSS2], flex containers [CSS3-FLEXBOX], grid containers [CSS3-GRID-LAYOUT], and replaced elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "usually specified value, but see text",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "overflow",
            "styleDeclaration": ["overflow-inline", "overflowInline"],
            "styleDeclarationProperty": "overflowInline",
            "referenceValues": []
        },
        "overflow": {
            "name": "overflow",
            "value": "[ visible | hidden | clip | scroll | auto ]{1,2}",
            "initial": "visible",
            "appliesTo": "block containers [CSS2], flex containers [CSS3-FLEXBOX], and grid containers [CSS3-GRID-LAYOUT]",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "animationType": "discrete",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "visible",
                    "prose": "There is no special handling of overflow, that is, the box’s content is rendered outside the box if positioned there. The box is not a scroll container.",
                    "type": "value",
                    "value": "visible"
                },
                {
                    "name": "hidden",
                    "prose": "This value indicates that the box’s content is clipped to its padding box and that the UA must not provide any scrolling user interface to view the content outside the clipping region, nor allow scrolling by direct intervention of the user, such as dragging on a touch screen or using the scrolling wheel on a mouse. However, the content must still be scrollable programmatically, for example using the mechanisms defined in [CSSOM-VIEW], and the box is therefore still a scroll container.",
                    "type": "value",
                    "value": "hidden"
                },
                {
                    "name": "clip",
                    "prose": "This value indicates that the box’s content is clipped to its overflow clip edge and that no scrolling user interface should be provided by the UA to view the content outside the clipping region. In addition, unlike overflow: hidden which still allows programmatic scrolling, overflow: clip forbids scrolling entirely, through any mechanism, and therefore the box is not a scroll container. Unlike hidden, this value does not cause the element to establish a new formatting context.",
                    "type": "value",
                    "value": "clip"
                },
                {
                    "name": "scroll",
                    "prose": "This value indicates that the content is clipped to the padding box, but can be scrolled into view (and therefore the box is a scroll container). Furthermore, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed whether or not any of its content is clipped. This avoids any problem with scrollbars appearing and disappearing in a dynamic environment. When the target medium is print, overflowing content may be printed; it is not defined where it may be printed.",
                    "type": "value",
                    "value": "scroll"
                },
                {
                    "name": "auto",
                    "prose": "Like scroll when the box has scrollable overflow; like hidden otherwise. Thus, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism will only be displayed if there is overflow.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["overflow"],
            "styleDeclarationProperty": "overflow",
            "referenceValues": []
        },
        "scroll-behavior": {
            "name": "scroll-behavior",
            "value": "auto | smooth",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "auto",
                    "prose": "The scroll container is scrolled in an instant fashion.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "smooth",
                    "prose": "The scroll container is scrolled in a smooth fashion using a user-agent-defined timing function over a user-agent-defined period of time. User agents should follow platform conventions, if any.",
                    "type": "value",
                    "value": "smooth"
                }
            ],
            "styleDeclaration": ["scroll-behavior", "scrollBehavior"],
            "styleDeclarationProperty": "scrollBehavior",
            "referenceValues": []
        },
        "scrollbar-gutter": {
            "name": "scrollbar-gutter",
            "value": "auto | stable && both-edges?",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Classic scrollbars consume space by creating a scrollbar gutter when overflow is scroll, or when overflow is auto and the box is overflowing. Overlay scrollbars do not consume space.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "stable",
                    "prose": "The scrollbar gutter is present for classic scrollbars when overflow is hidden, scroll, or auto, regardless of whether the box is actually overflowing. Overlay scrollbars do not consume space.",
                    "type": "value",
                    "value": "stable"
                },
                {
                    "name": "both-edges",
                    "prose": "If a scrollbar gutter would be present on one of the inline start edge or the inline end edge of the box, another scrollbar gutter must be present on the opposite edge as well.",
                    "type": "value",
                    "value": "both-edges"
                }
            ],
            "styleDeclaration": ["scrollbar-gutter", "scrollbarGutter"],
            "styleDeclarationProperty": "scrollbarGutter",
            "referenceValues": []
        },
        "overscroll-behavior": {
            "name": "overscroll-behavior",
            "value": "[ contain | none | auto ]{1,2}",
            "initial": "auto auto",
            "appliesTo": "scroll container elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "values": [
                {
                    "name": "contain",
                    "prose": "This value indicates that the element must not perform non-local boundary default actions such as scroll chaining or navigation. The user agent must not perform scroll chaining to any ancestors along the scroll chain regardless of whether the scroll originated at this element or one of its descendants. This value must not modify the behavior of how local boundary default actions should behave, such as showing any overscroll affordances.",
                    "type": "value",
                    "value": "contain"
                },
                {
                    "name": "none",
                    "prose": "This value implies the same behavior as contain and in addition this element must also not perform local boundary default actions such as showing any overscroll affordances.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "auto",
                    "prose": "This value indicates that the user agent should perform the usual boundary default action with respect to scroll chaining, overscroll and navigation gestures.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["overscroll-behavior", "overscrollBehavior"],
            "styleDeclarationProperty": "overscrollBehavior",
            "referenceValues": []
        },
        "overscroll-behavior-x": {
            "name": "overscroll-behavior-x",
            "value": "contain | none | auto",
            "initial": "auto",
            "appliesTo": "scroll container elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "overscroll-behavior",
            "media": "visual",
            "values": [
                {
                    "name": "contain",
                    "prose": "This value indicates that the element must not perform non-local boundary default actions such as scroll chaining or navigation. The user agent must not perform scroll chaining to any ancestors along the scroll chain regardless of whether the scroll originated at this element or one of its descendants. This value must not modify the behavior of how local boundary default actions should behave, such as showing any overscroll affordances.",
                    "type": "value",
                    "value": "contain"
                },
                {
                    "name": "none",
                    "prose": "This value implies the same behavior as contain and in addition this element must also not perform local boundary default actions such as showing any overscroll affordances.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "auto",
                    "prose": "This value indicates that the user agent should perform the usual boundary default action with respect to scroll chaining, overscroll and navigation gestures.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": [
                "overscroll-behavior-x",
                "overscrollBehaviorX"
            ],
            "styleDeclarationProperty": "overscrollBehaviorX",
            "referenceValues": []
        },
        "overscroll-behavior-y": {
            "name": "overscroll-behavior-y",
            "value": "contain | none | auto",
            "initial": "auto",
            "appliesTo": "scroll container elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "overscroll-behavior",
            "media": "visual",
            "values": [
                {
                    "name": "contain",
                    "prose": "This value indicates that the element must not perform non-local boundary default actions such as scroll chaining or navigation. The user agent must not perform scroll chaining to any ancestors along the scroll chain regardless of whether the scroll originated at this element or one of its descendants. This value must not modify the behavior of how local boundary default actions should behave, such as showing any overscroll affordances.",
                    "type": "value",
                    "value": "contain"
                },
                {
                    "name": "none",
                    "prose": "This value implies the same behavior as contain and in addition this element must also not perform local boundary default actions such as showing any overscroll affordances.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "auto",
                    "prose": "This value indicates that the user agent should perform the usual boundary default action with respect to scroll chaining, overscroll and navigation gestures.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": [
                "overscroll-behavior-y",
                "overscrollBehaviorY"
            ],
            "styleDeclarationProperty": "overscrollBehaviorY",
            "referenceValues": []
        },
        "overscroll-behavior-inline": {
            "name": "overscroll-behavior-inline",
            "value": "contain | none | auto",
            "initial": "auto",
            "appliesTo": "scroll container elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "overscroll-behavior",
            "media": "visual",
            "values": [
                {
                    "name": "contain",
                    "prose": "This value indicates that the element must not perform non-local boundary default actions such as scroll chaining or navigation. The user agent must not perform scroll chaining to any ancestors along the scroll chain regardless of whether the scroll originated at this element or one of its descendants. This value must not modify the behavior of how local boundary default actions should behave, such as showing any overscroll affordances.",
                    "type": "value",
                    "value": "contain"
                },
                {
                    "name": "none",
                    "prose": "This value implies the same behavior as contain and in addition this element must also not perform local boundary default actions such as showing any overscroll affordances.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "auto",
                    "prose": "This value indicates that the user agent should perform the usual boundary default action with respect to scroll chaining, overscroll and navigation gestures.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": [
                "overscroll-behavior-inline",
                "overscrollBehaviorInline"
            ],
            "styleDeclarationProperty": "overscrollBehaviorInline",
            "referenceValues": []
        },
        "overscroll-behavior-block": {
            "name": "overscroll-behavior-block",
            "value": "contain | none | auto",
            "initial": "auto",
            "appliesTo": "scroll container elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "logicalPropertyGroup": "overscroll-behavior",
            "media": "visual",
            "values": [
                {
                    "name": "contain",
                    "prose": "This value indicates that the element must not perform non-local boundary default actions such as scroll chaining or navigation. The user agent must not perform scroll chaining to any ancestors along the scroll chain regardless of whether the scroll originated at this element or one of its descendants. This value must not modify the behavior of how local boundary default actions should behave, such as showing any overscroll affordances.",
                    "type": "value",
                    "value": "contain"
                },
                {
                    "name": "none",
                    "prose": "This value implies the same behavior as contain and in addition this element must also not perform local boundary default actions such as showing any overscroll affordances.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "auto",
                    "prose": "This value indicates that the user agent should perform the usual boundary default action with respect to scroll chaining, overscroll and navigation gestures.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": [
                "overscroll-behavior-block",
                "overscrollBehaviorBlock"
            ],
            "styleDeclarationProperty": "overscrollBehaviorBlock",
            "referenceValues": []
        },
        "float-reference": {
            "name": "float-reference",
            "value": "inline | column | region | page",
            "initial": "inline",
            "appliesTo": "all elements.",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "inline",
                    "prose": "The float reference is the line box of the float anchor. The float containing block formatting context is the same as that of the float anchor. The float is an inline float.",
                    "type": "value",
                    "value": "inline"
                },
                {
                    "name": "column",
                    "prose": "The float reference is the column in a multi column environment in which the float anchor is placed. If the float anchor is not inside a column, the float reference is the line box of the float anchor. The float containing block formatting context is a new block formatting context with the same dimensions and placement as the float reference. The float is a page float.",
                    "type": "value",
                    "value": "column"
                },
                {
                    "name": "region",
                    "prose": "The float reference is the region in a region-chain within which the float anchor is placed. If the float anchor is not inside a region, the float reference is the line box of the float anchor. The float containing block formatting context is a new block formatting context with the same dimensions and placement as the float reference. The float is a page float.",
                    "type": "value",
                    "value": "region"
                },
                {
                    "name": "page",
                    "prose": "The float reference of the float is the page within which the float anchor is placed. If the float anchor is not inside a page, the float reference is the line box of the float anchor. The float containing block formatting context is a new block formatting context with the same dimensions and placement as the float reference. The float is a page float.",
                    "type": "value",
                    "value": "page"
                }
            ],
            "styleDeclaration": ["float-reference", "floatReference"],
            "styleDeclarationProperty": "floatReference",
            "referenceValues": []
        },
        "clear": {
            "name": "clear",
            "value": "inline-start | inline-end | block-start | block-end | left | right | top | bottom | none",
            "initial": "none",
            "appliesTo": "block-level elements, floats, regions, pages",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "inline-start",
                    "prose": "If applied to an inline float, requires that the block-start outer edge of the box comes after the block-end outer edge of any inline-start-floats with an inline-start-float-reference that resulted from elements earlier in the source document. If applied to a page float, the float reference in which the page float is placed will be seen as full when determining whether it can host subsequent page floats that float in the inline-start direction.",
                    "type": "value",
                    "value": "inline-start"
                },
                {
                    "name": "inline-end",
                    "prose": "If applied to a block-level element or an inline float, requires that the block-start outer edge of the box comes after the block-end outer edge of any inline-end-floats with an inline-end-float-reference that resulted from elements earlier in the source document. If applied to a page float, the float reference in which the page float is placed will be seen as full when determining whether it can host subsequent page floats that float in the inline-end direction.",
                    "type": "value",
                    "value": "inline-end"
                },
                {
                    "name": "block-start",
                    "prose": "If applied to a block-level element or an inline float, behaves like inline-start. If applied to a page float, the float reference in which the page float is placed will be seen as full when determining whether it can host subsequent page floats that float in the block-start direction.",
                    "type": "value",
                    "value": "block-start"
                },
                {
                    "name": "block-end",
                    "prose": "If applied to a block-level element or an inline float, behaves like inline-end. If applied to a page float, the float reference in which the page float is placed will be seen as full when determining whether it can host subsequent page floats that float in the block-end direction.",
                    "type": "value",
                    "value": "block-end"
                },
                {
                    "name": "left",
                    "prose": "Behave like block-end, inline-start or inline-end depending on the float containing block’s direction and writing-mode.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "right",
                    "prose": "Behave like block-start, inline-start or inline-end depending on the float containing block’s direction and writing-mode.",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "top",
                    "prose": "Behave like block-start or inline-start depending on the float containing block’s direction and writing-mode.",
                    "type": "value",
                    "value": "top"
                },
                {
                    "name": "bottom",
                    "prose": "Behave like block-end or inline-end depending on the float containing block’s direction and writing-mode.",
                    "type": "value",
                    "value": "bottom"
                },
                {
                    "name": "both-inline",
                    "prose": "Behave like inline-start and inline-end.",
                    "type": "value",
                    "value": "both-inline"
                },
                {
                    "name": "both-block",
                    "prose": "Behave like block-start and block-end.",
                    "type": "value",
                    "value": "both-block"
                },
                {
                    "name": "both",
                    "prose": "Behave like both-inline.",
                    "type": "value",
                    "value": "both"
                },
                {
                    "name": "all",
                    "prose": "Behave like both-block and both-inline.",
                    "type": "value",
                    "value": "all"
                }
            ],
            "styleDeclaration": ["clear"],
            "styleDeclarationProperty": "clear",
            "referenceValues": []
        },
        "float-defer": {
            "name": "float-defer",
            "value": "<integer> | last | none",
            "initial": "none",
            "appliesTo": "floats",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword or integer",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["float-defer", "floatDefer"],
            "styleDeclarationProperty": "floatDefer",
            "referenceValues": ["<integer>"]
        },
        "float-offset": {
            "name": "float-offset",
            "value": "<length> | <percentage>",
            "initial": "0",
            "appliesTo": "floats",
            "inherited": "no",
            "percentages": "see prose",
            "computedValue": "computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["float-offset", "floatOffset"],
            "styleDeclarationProperty": "floatOffset",
            "referenceValues": ["<length>", "<percentage>"]
        },
        "page": {
            "name": "page",
            "value": "auto | <custom-ident>",
            "initial": "auto",
            "appliesTo": "boxes that create class A break points",
            "inherited": "no (but see prose)",
            "percentages": "n/a",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["page"],
            "styleDeclarationProperty": "page",
            "referenceValues": ["<custom-ident>"]
        },
        "top": {
            "name": "top",
            "value": "auto | <length-percentage>",
            "initial": "auto",
            "appliesTo": "positioned elements",
            "inherited": "no",
            "percentages": "refer to size of containing block; see prose",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "inset",
            "values": [
                {
                    "name": "<length>",
                    "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "auto",
                    "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["top"],
            "styleDeclarationProperty": "top",
            "referenceValues": ["<length-percentage>"]
        },
        "right": {
            "name": "right",
            "value": "auto | <length-percentage>",
            "initial": "auto",
            "appliesTo": "positioned elements",
            "inherited": "no",
            "percentages": "refer to size of containing block; see prose",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "inset",
            "values": [
                {
                    "name": "<length>",
                    "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "auto",
                    "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["right"],
            "styleDeclarationProperty": "right",
            "referenceValues": ["<length-percentage>"]
        },
        "bottom": {
            "name": "bottom",
            "value": "auto | <length-percentage>",
            "initial": "auto",
            "appliesTo": "positioned elements",
            "inherited": "no",
            "percentages": "refer to size of containing block; see prose",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "inset",
            "values": [
                {
                    "name": "<length>",
                    "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "auto",
                    "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["bottom"],
            "styleDeclarationProperty": "bottom",
            "referenceValues": ["<length-percentage>"]
        },
        "left": {
            "name": "left",
            "value": "auto | <length-percentage>",
            "initial": "auto",
            "appliesTo": "positioned elements",
            "inherited": "no",
            "percentages": "refer to size of containing block; see prose",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "inset",
            "values": [
                {
                    "name": "<length>",
                    "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "auto",
                    "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["left"],
            "styleDeclarationProperty": "left",
            "referenceValues": ["<length-percentage>"]
        },
        "inset-block-start": {
            "name": "inset-block-start",
            "value": "auto | <length-percentage>",
            "initial": "auto",
            "appliesTo": "positioned elements",
            "inherited": "no",
            "percentages": "refer to size of containing block; see prose",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "inset",
            "values": [
                {
                    "name": "<length>",
                    "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "auto",
                    "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["inset-block-start", "insetBlockStart"],
            "styleDeclarationProperty": "insetBlockStart",
            "referenceValues": ["<length-percentage>"]
        },
        "inset-inline-start": {
            "name": "inset-inline-start",
            "value": "auto | <length-percentage>",
            "initial": "auto",
            "appliesTo": "positioned elements",
            "inherited": "no",
            "percentages": "refer to size of containing block; see prose",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "inset",
            "values": [
                {
                    "name": "<length>",
                    "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "auto",
                    "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["inset-inline-start", "insetInlineStart"],
            "styleDeclarationProperty": "insetInlineStart",
            "referenceValues": ["<length-percentage>"]
        },
        "inset-block-end": {
            "name": "inset-block-end",
            "value": "auto | <length-percentage>",
            "initial": "auto",
            "appliesTo": "positioned elements",
            "inherited": "no",
            "percentages": "refer to size of containing block; see prose",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "inset",
            "values": [
                {
                    "name": "<length>",
                    "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "auto",
                    "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["inset-block-end", "insetBlockEnd"],
            "styleDeclarationProperty": "insetBlockEnd",
            "referenceValues": ["<length-percentage>"]
        },
        "inset-inline-end": {
            "name": "inset-inline-end",
            "value": "auto | <length-percentage>",
            "initial": "auto",
            "appliesTo": "positioned elements",
            "inherited": "no",
            "percentages": "refer to size of containing block; see prose",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "inset",
            "values": [
                {
                    "name": "<length>",
                    "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "auto",
                    "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["inset-inline-end", "insetInlineEnd"],
            "styleDeclarationProperty": "insetInlineEnd",
            "referenceValues": ["<length-percentage>"]
        },
        "inset-block": {
            "name": "inset-block",
            "value": "<top>{1,2}",
            "initial": "auto",
            "appliesTo": "positioned elements",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "<length>",
                    "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "auto",
                    "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["inset-block", "insetBlock"],
            "styleDeclarationProperty": "insetBlock",
            "referenceValues": ["<top>{1,2}"]
        },
        "inset-inline": {
            "name": "inset-inline",
            "value": "<top>{1,2}",
            "initial": "auto",
            "appliesTo": "positioned elements",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "<length>",
                    "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "auto",
                    "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["inset-inline", "insetInline"],
            "styleDeclarationProperty": "insetInline",
            "referenceValues": ["<top>{1,2}"]
        },
        "inset": {
            "name": "inset",
            "value": "<top>{1,4}",
            "initial": "auto",
            "appliesTo": "positioned elements",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "<length>",
                    "prose": "The inset is a fixed distance from the reference edge. Negative values are allowed.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "The inset is a percentage relative to the containing block’s size in the corresponding axis (e.g. width for left or right, height for top and bottom). For sticky positioned boxes, the inset is instead relative to the relevant scrollport’s size. Negative values are allowed.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "auto",
                    "prose": "Represents an unconstrained inset; the exact meaning depends on the positioning scheme.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["inset"],
            "styleDeclarationProperty": "inset",
            "referenceValues": ["<top>{1,4}"]
        },
        "flow-into": {
            "name": "flow-into",
            "value": "none | <ident> [element|content]?",
            "initial": "none",
            "appliesTo": "All elements, but not pseudo-elements such as ::first-line, ::first-letter, ::before or ::after.",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "styleDeclaration": ["flow-into", "flowInto"],
            "styleDeclarationProperty": "flowInto",
            "referenceValues": ["<ident> [element"]
        },
        "flow-from": {
            "name": "flow-from",
            "value": "<ident> | none",
            "initial": "none",
            "appliesTo": "Non-replaced block containers. This might be expanded in future versions of the specification to allow other types of containers to receive flow content.",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "styleDeclaration": ["flow-from", "flowFrom"],
            "styleDeclarationProperty": "flowFrom",
            "referenceValues": ["<ident>"]
        },
        "region-fragment": {
            "name": "region-fragment",
            "value": "auto | break",
            "initial": "auto",
            "appliesTo": "CSS Regions",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["region-fragment", "regionFragment"],
            "styleDeclarationProperty": "regionFragment",
            "referenceValues": []
        },
        "block-step-size": {
            "name": "block-step-size",
            "value": "none | <length [0,∞]>",
            "initial": "none",
            "appliesTo": "block-level boxes",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword or absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["block-step-size", "blockStepSize"],
            "styleDeclarationProperty": "blockStepSize",
            "referenceValues": ["<length [0,∞]>"]
        },
        "block-step-insert": {
            "name": "block-step-insert",
            "value": "margin | padding",
            "initial": "margin",
            "appliesTo": "block-level boxes",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "margin",
                    "prose": "Any extra space resulting from a block-step-size-induced adjustment is inserted outside the box’s border, as extra margin.",
                    "type": "value",
                    "value": "margin"
                },
                {
                    "name": "padding",
                    "prose": "Any extra space resulting from a block-step-size-induced adjustment is inserted inside the box’s border, as extra padding.",
                    "type": "value",
                    "value": "padding"
                }
            ],
            "styleDeclaration": ["block-step-insert", "blockStepInsert"],
            "styleDeclarationProperty": "blockStepInsert",
            "referenceValues": []
        },
        "block-step-align": {
            "name": "block-step-align",
            "value": "auto | center | start | end",
            "initial": "auto",
            "appliesTo": "block-level boxes",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "If block-step-insert is margin: if align-self is start, end, or center, treat as that value, otherwise treat as center.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "center",
                    "prose": "Any extra space resulting from a block-step-size-induced adjustment is split, and applied half on either side of the box.",
                    "type": "value",
                    "value": "center"
                },
                {
                    "name": "start",
                    "prose": "Any extra space resulting from a block-step-size-induced adjustment is inserted on the end side of the box.",
                    "type": "value",
                    "value": "start"
                },
                {
                    "name": "end",
                    "prose": "Any extra space resulting from a block-step-size-induced adjustment is inserted on the start side of the box.",
                    "type": "value",
                    "value": "end"
                },
                {
                    "name": "up",
                    "prose": "The outer size of the box is increased (positive space is inserted) to fulfill the block-step-size constraint.",
                    "type": "value",
                    "value": "up"
                },
                {
                    "name": "down",
                    "prose": "The outer size of the box is decreased (negative space is inserted) to fulfill the block-step-size constraint.",
                    "type": "value",
                    "value": "down"
                },
                {
                    "name": "nearest",
                    "prose": "The outer size of the box is either increased (as for up) or decreased (as for down—whichever results in the smallest absolute change—to fulfill the block-step-size constraint. If both options would result in the same amount of change, the size is increased.",
                    "type": "value",
                    "value": "nearest"
                }
            ],
            "styleDeclaration": ["block-step-align", "blockStepAlign"],
            "styleDeclarationProperty": "blockStepAlign",
            "referenceValues": []
        },
        "block-step-round": {
            "name": "block-step-round",
            "value": "up | down | nearest",
            "initial": "up",
            "appliesTo": "block-level boxes",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["block-step-round", "blockStepRound"],
            "styleDeclarationProperty": "blockStepRound",
            "referenceValues": []
        },
        "block-step": {
            "name": "block-step",
            "value": "<'block-step-size'> || <'block-step-insert'> || <'block-step-align'> || <'block-step-round'>",
            "initial": "see individual properties",
            "appliesTo": "block-level boxes",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["block-step", "blockStep"],
            "styleDeclarationProperty": "blockStep",
            "referenceValues": [
                "<'block-step-size'>",
                "<'block-step-insert'>",
                "<'block-step-align'>",
                "<'block-step-round'>"
            ]
        },
        "line-height-step": {
            "name": "line-height-step",
            "value": "<length [0,∞]>",
            "initial": "0px",
            "appliesTo": "block containers",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["line-height-step", "lineHeightStep"],
            "styleDeclarationProperty": "lineHeightStep",
            "referenceValues": ["<length [0,∞]>"]
        },
        "border-boundary": {
            "name": "border-boundary",
            "value": "none | parent | display",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["border-boundary", "borderBoundary"],
            "styleDeclarationProperty": "borderBoundary",
            "referenceValues": []
        },
        "ruby-position": {
            "name": "ruby-position",
            "value": "[ alternate || [ over | under ] ] | inter-character",
            "initial": "alternate",
            "appliesTo": "ruby annotation containers",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "alternate",
                    "prose": "Different levels of annotations alternate between over and under. If the annotation container is the first level of annotation in its ruby segment, or if all prior levels are inter-character, then alternate, either on its own or in combination with over, behaves the same as over, while alternate in combination with under behaves the same as under. Otherwise, if the previous level of interlinear annotation is over, alternate behaves like under, and vice versa. (In this case, whether alternate is specified alone or in combination with over or under makes no difference.)",
                    "type": "value",
                    "value": "alternate"
                },
                {
                    "name": "over",
                    "prose": "The ruby annotation appears line-over the base. Ruby over Japanese base text in horizontal layout Ruby to the right of Japanese base text in vertical layout",
                    "type": "value",
                    "value": "over"
                },
                {
                    "name": "under",
                    "prose": "The ruby annotation appears line-under the base. This is a relatively rare setting used in ideographic East Asian writing systems, most easily found in educational text. Ruby under Japanese base text in horizontal layout Ruby to the left of Japanese base text in vertical layout",
                    "type": "value",
                    "value": "under"
                },
                {
                    "name": "inter-character",
                    "prose": "If the writing mode of the enclosing ruby container is vertical, this value has the same effect as over. Otherwise, the ruby annotation becomes an inter-character annotation. The annotation appears on the right of the base in horizontal text. This forces the computed value of writing-mode of the ruby annotation children of this ruby annotation container to be vertical-rl. This value is provided for the special case of traditional Chinese as used especially in Taiwan: ruby (made of bopomofo glyphs) in that context appears vertically along the right side of the base glyph, even when the layout of the base characters is horizontal: “Bopomofo” ruby in traditional Chinese (ruby annotation shown in blue for clarity) in horizontal layout",
                    "type": "value",
                    "value": "inter-character"
                }
            ],
            "styleDeclaration": ["ruby-position", "rubyPosition"],
            "styleDeclarationProperty": "rubyPosition",
            "referenceValues": []
        },
        "ruby-merge": {
            "name": "ruby-merge",
            "value": "separate | merge | auto",
            "initial": "separate",
            "appliesTo": "interlinear ruby annotation containers",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "separate",
                    "prose": "Each ruby annotation box is rendered within the same column(s) as its corresponding base box(es), i.e. without overlapping adjacent bases on either side. This style is called “mono ruby” in [JLREQ]. ruby-merge: separate with center alignment For example, the following two lines render the same: <p><ruby>無<rt>む</ruby><ruby>常<rt>じょう</ruby> <p><ruby style=\"ruby-merge:separate\"><rb>無<rb>常<rt>む<rt>じょう</ruby>",
                    "type": "value",
                    "value": "separate"
                },
                {
                    "name": "merge",
                    "prose": "All ruby annotation boxes within the same ruby segment on the same line are concatenated as inline boxes within their annotation container, and laid out in a single anonymous ruby annotation box spanning all their associated ruby base boxes. When laid out on a single line, this style renders similar to “group ruby” in [JLREQ]. However, when it breaks across lines, ruby annotations are kept together with their respective ruby bases. ruby-merge: merge with center alignment The following two lines render the same if both characters fit on one line: <p><ruby>無常<rt>むじょう</ruby> <p><ruby style=\"ruby-merge:merge\"><rb>無<rb>常<rt>む<rt>じょう</ruby> However, the second one renders the same as ruby-position: separate when the two bases are split across lines.",
                    "type": "value",
                    "value": "merge"
                },
                {
                    "name": "auto",
                    "prose": "The user agent may use any algorithm to determine how each ruby annotation box is rendered to its corresponding base box, with the intention that if all annotations fit over their respective bases, the result is identical to separate, but if some annotations are wider than their bases the space is shared in some way to avoid imposing space between bases. ruby-merge: auto with center alignment",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["ruby-merge", "rubyMerge"],
            "styleDeclarationProperty": "rubyMerge",
            "referenceValues": []
        },
        "ruby-align": {
            "name": "ruby-align",
            "value": "start | center | space-between | space-around",
            "initial": "space-around",
            "appliesTo": "ruby bases, ruby annotations, ruby base containers, ruby annotation containers",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "start",
                    "prose": "The ruby content is aligned with the start edge of its box. start ruby distribution \"Katatsuki ruby\" (肩付きルビ) is close to, but not quite the same as, this start value. In particular, its behavior when overhanging its base can differ from start alignment depending on surrounding context, see JLREQ. Also, it’s only ever used in vertical writing, and the JLTF considers it not particularly important, so it may not be worth the effort to make this value smart enough to deal with katatsuki ruby. If start is needed for some other purpose, we should keep it. Otherwise, maybe just drop it?",
                    "type": "value",
                    "value": "start"
                },
                {
                    "name": "center",
                    "prose": "The ruby content is centered within its box. center ruby distribution",
                    "type": "value",
                    "value": "center"
                },
                {
                    "name": "space-between",
                    "prose": "The ruby content expands as defined for normal text justification (as defined by text-justify), except that if there are no justification opportunities the content is centered. space-between ruby distribution",
                    "type": "value",
                    "value": "space-between"
                },
                {
                    "name": "space-around",
                    "prose": "As for space-between except that there exists an extra justification opportunities whose space is distributed half before and half after the ruby content. space-around ruby distribution",
                    "type": "value",
                    "value": "space-around"
                }
            ],
            "styleDeclaration": ["ruby-align", "rubyAlign"],
            "styleDeclarationProperty": "rubyAlign",
            "referenceValues": []
        },
        "ruby-overhang": {
            "name": "ruby-overhang",
            "value": "auto | none",
            "initial": "auto",
            "appliesTo": "ruby annotation containers",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "auto",
                    "prose": "When a ruby annotation container is longer than its corresponding ruby base container, the ruby annotation container may partially overlap adjacent boxes. Whether, how much, and under which conditions to overhang are determined by the UA.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "none",
                    "prose": "A ruby annotation container is never allowed to extend past the ruby annotation container.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["ruby-overhang", "rubyOverhang"],
            "styleDeclarationProperty": "rubyOverhang",
            "referenceValues": []
        },
        "overflow-anchor": {
            "name": "overflow-anchor",
            "value": "auto | none",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Declares that the element is potentially eligible to participate in the anchor node selection algorithm for any scrolling box created by the element or an ancestor.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "none",
                    "prose": "Declares that the element and its descendants (that aren’t nested inside of another scrolling element) are not eligible to participate in the anchor node selection algorithm for any scrolling box created by the element or an ancestor.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["overflow-anchor", "overflowAnchor"],
            "styleDeclarationProperty": "overflowAnchor",
            "referenceValues": []
        },
        "scroll-start": {
            "name": "scroll-start",
            "value": "[ auto | start | end | center | left | right | top | bottom | <length-percentage [0,∞]> ]{1,2}",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "auto",
                    "prose": "...",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "... Negative values are invalid. Values corresponding to a length greater than the width/height of the scrollport are valid, but clamped to the width/height of the scrollport.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "start",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "start"
                },
                {
                    "name": "center",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "center"
                },
                {
                    "name": "end",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "end"
                }
            ],
            "styleDeclaration": ["scroll-start", "scrollStart"],
            "styleDeclarationProperty": "scrollStart",
            "referenceValues": ["<length-percentage [0,∞]> ]{1,2}"]
        },
        "scroll-start-target": {
            "name": "scroll-start-target",
            "value": "[ none | auto ]",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "none",
                    "prose": "Element is not a scroll-start-target.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "auto",
                    "prose": "Element is used to calculate the scroll-start position, taking into account scroll-padding or scroll-margin , same as a scroll-snap target.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["scroll-start-target", "scrollStartTarget"],
            "styleDeclarationProperty": "scrollStartTarget",
            "referenceValues": []
        },
        "scroll-start-x": {
            "name": "scroll-start-x",
            "value": "auto | start | end | center | <length-percentage [0,∞]>",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the corresponding axis of the scroll container’s scrollport",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "auto",
                    "prose": "...",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "... Negative values are invalid. Values corresponding to a length greater than the width/height of the scrollport are valid, but clamped to the width/height of the scrollport.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "start",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "start"
                },
                {
                    "name": "center",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "center"
                },
                {
                    "name": "end",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "end"
                }
            ],
            "styleDeclaration": ["scroll-start-x", "scrollStartX"],
            "styleDeclarationProperty": "scrollStartX",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "scroll-start-y": {
            "name": "scroll-start-y",
            "value": "auto | start | end | center | <length-percentage [0,∞]>",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the corresponding axis of the scroll container’s scrollport",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "auto",
                    "prose": "...",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "... Negative values are invalid. Values corresponding to a length greater than the width/height of the scrollport are valid, but clamped to the width/height of the scrollport.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "start",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "start"
                },
                {
                    "name": "center",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "center"
                },
                {
                    "name": "end",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "end"
                }
            ],
            "styleDeclaration": ["scroll-start-y", "scrollStartY"],
            "styleDeclarationProperty": "scrollStartY",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "scroll-start-inline": {
            "name": "scroll-start-inline",
            "value": "auto | start | end | center | <length-percentage [0,∞]>",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the corresponding axis of the scroll container’s scrollport",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "auto",
                    "prose": "...",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "... Negative values are invalid. Values corresponding to a length greater than the width/height of the scrollport are valid, but clamped to the width/height of the scrollport.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "start",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "start"
                },
                {
                    "name": "center",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "center"
                },
                {
                    "name": "end",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "end"
                }
            ],
            "styleDeclaration": ["scroll-start-inline", "scrollStartInline"],
            "styleDeclarationProperty": "scrollStartInline",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "scroll-start-block": {
            "name": "scroll-start-block",
            "value": "auto | start | end | center | <length-percentage [0,∞]>",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the corresponding axis of the scroll container’s scrollport",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "auto",
                    "prose": "...",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "... Negative values are invalid. Values corresponding to a length greater than the width/height of the scrollport are valid, but clamped to the width/height of the scrollport.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "start",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "start"
                },
                {
                    "name": "center",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "center"
                },
                {
                    "name": "end",
                    "prose": "Equivalent to 0%, 50%, and 100%, respectively.",
                    "type": "value",
                    "value": "end"
                }
            ],
            "styleDeclaration": ["scroll-start-block", "scrollStartBlock"],
            "styleDeclarationProperty": "scrollStartBlock",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "scroll-snap-type": {
            "name": "scroll-snap-type",
            "value": "none | [ x | y | block | inline | both ] [ mandatory | proximity ]?",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "x",
                    "prose": "The scroll container snaps to snap positions in its horizontal axis only.",
                    "type": "value",
                    "value": "x"
                },
                {
                    "name": "y",
                    "prose": "The scroll container snaps to snap positions in its vertical axis only.",
                    "type": "value",
                    "value": "y"
                },
                {
                    "name": "block",
                    "prose": "The scroll container snaps to snap positions in its block axis only.",
                    "type": "value",
                    "value": "block"
                },
                {
                    "name": "inline",
                    "prose": "The scroll container snaps to snap positions in its inline axis only.",
                    "type": "value",
                    "value": "inline"
                },
                {
                    "name": "both",
                    "prose": "The scroll container snaps to snap positions in both of its axes independently (potentially snapping to different elements in each axis).",
                    "type": "value",
                    "value": "both"
                },
                {
                    "name": "none",
                    "prose": "If specified on a scroll container, the scroll container must not snap.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "mandatory",
                    "prose": "If specified on a scroll container, the scroll container is required to be snapped to a snap position when there are no active scrolling operations. If a valid snap position exists then the scroll container must snap at the termination of a scroll (if none exist then no snapping occurs).",
                    "type": "value",
                    "value": "mandatory"
                },
                {
                    "name": "proximity",
                    "prose": "If specified on a scroll container, the scroll container may snap to a snap position at the termination of a scroll, at the discretion of the UA given the parameters of the scroll.",
                    "type": "value",
                    "value": "proximity"
                }
            ],
            "styleDeclaration": ["scroll-snap-type", "scrollSnapType"],
            "styleDeclarationProperty": "scrollSnapType",
            "referenceValues": []
        },
        "scroll-padding": {
            "name": "scroll-padding",
            "value": "[ auto | <length-percentage [0,∞]> ]{1,4}",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the corresponding dimension of the scroll container’s scrollport",
            "computedValue": "per side, either the keyword auto or a computed <length-percentage> value",
            "animationType": "by computed value type",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Defines an inward offset from the corresponding edge of the scrollport. When applied to the root viewport, the offset is calculated and applied relative to the layout viewport (rather than the visual viewport) the same way as the corresponding inset properties on fixed-positioned boxes; the optimal viewing region is the remaining area that intersects with the visual viewport.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "auto",
                    "prose": "Indicates that the offset for the corresponding edge of the scrollport is UA-determined. This should generally default to a used length of 0px, but UAs may use heuristics to detect when a non-zero value is more appropriate. For example, a UA could detect when a position:fixed element is being used as an opaque unscrollable “header” that obscures the content below it, and resolve the top offset to the height of that element so that a “page down” operation (such as pressing PgDn) automatically scrolls by one “visible page” of content.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["scroll-padding", "scrollPadding"],
            "styleDeclarationProperty": "scrollPadding",
            "referenceValues": ["<length-percentage [0,∞]> ]{1,4}"]
        },
        "scroll-margin": {
            "name": "scroll-margin",
            "value": "<length>{1,4}",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "per side, an absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["scroll-margin", "scrollMargin"],
            "styleDeclarationProperty": "scrollMargin",
            "referenceValues": ["<length>{1,4}"]
        },
        "scroll-snap-align": {
            "name": "scroll-snap-align",
            "value": "[ none | start | end | center ]{1,2}",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "two keywords",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "This box does not define a snap position in the specified axis.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "start",
                    "prose": "Start alignment of this box’s scroll snap area within the scroll container’s snapport is a snap position in the specified axis.",
                    "type": "value",
                    "value": "start"
                },
                {
                    "name": "end",
                    "prose": "End alignment of this box’s scroll snap area within the scroll container’s snapport is a snap position in the specified axis.",
                    "type": "value",
                    "value": "end"
                },
                {
                    "name": "center",
                    "prose": "Center alignment of this box’s scroll snap area within the scroll container’s snapport is a snap position in the specified axis.",
                    "type": "value",
                    "value": "center"
                }
            ],
            "styleDeclaration": ["scroll-snap-align", "scrollSnapAlign"],
            "styleDeclarationProperty": "scrollSnapAlign",
            "referenceValues": []
        },
        "scroll-snap-stop": {
            "name": "scroll-snap-stop",
            "value": "normal | always",
            "initial": "normal",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "The scroll container may pass over a snap position defined by this element during the execution of a scrolling operation.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "always",
                    "prose": "The scroll container must not pass over a snap position defined by this element during the execution of a scrolling operation; it must instead snap to the first of this element’s snap positions.",
                    "type": "value",
                    "value": "always"
                }
            ],
            "styleDeclaration": ["scroll-snap-stop", "scrollSnapStop"],
            "styleDeclarationProperty": "scrollSnapStop",
            "referenceValues": []
        },
        "scroll-padding-top": {
            "name": "scroll-padding-top",
            "value": "auto | <length-percentage [0,∞]>",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the scroll container’s scrollport",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-padding",
            "styleDeclaration": ["scroll-padding-top", "scrollPaddingTop"],
            "styleDeclarationProperty": "scrollPaddingTop",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "scroll-padding-right": {
            "name": "scroll-padding-right",
            "value": "auto | <length-percentage [0,∞]>",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the scroll container’s scrollport",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-padding",
            "styleDeclaration": ["scroll-padding-right", "scrollPaddingRight"],
            "styleDeclarationProperty": "scrollPaddingRight",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "scroll-padding-bottom": {
            "name": "scroll-padding-bottom",
            "value": "auto | <length-percentage [0,∞]>",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the scroll container’s scrollport",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-padding",
            "styleDeclaration": [
                "scroll-padding-bottom",
                "scrollPaddingBottom"
            ],
            "styleDeclarationProperty": "scrollPaddingBottom",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "scroll-padding-left": {
            "name": "scroll-padding-left",
            "value": "auto | <length-percentage [0,∞]>",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the scroll container’s scrollport",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-padding",
            "styleDeclaration": ["scroll-padding-left", "scrollPaddingLeft"],
            "styleDeclarationProperty": "scrollPaddingLeft",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "scroll-padding-inline-start": {
            "name": "scroll-padding-inline-start",
            "value": "auto | <length-percentage [0,∞]>",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the scroll container’s scrollport",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-padding",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Defines an inward offset from the corresponding edge of the scrollport. When applied to the root viewport, the offset is calculated and applied relative to the layout viewport (rather than the visual viewport) the same way as the corresponding inset properties on fixed-positioned boxes; the optimal viewing region is the remaining area that intersects with the visual viewport.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "auto",
                    "prose": "Indicates that the offset for the corresponding edge of the scrollport is UA-determined. This should generally default to a used length of 0px, but UAs may use heuristics to detect when a non-zero value is more appropriate. For example, a UA could detect when a position:fixed element is being used as an opaque unscrollable “header” that obscures the content below it, and resolve the top offset to the height of that element so that a “page down” operation (such as pressing PgDn) automatically scrolls by one “visible page” of content.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": [
                "scroll-padding-inline-start",
                "scrollPaddingInlineStart"
            ],
            "styleDeclarationProperty": "scrollPaddingInlineStart",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "scroll-padding-block-start": {
            "name": "scroll-padding-block-start",
            "value": "auto | <length-percentage [0,∞]>",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the scroll container’s scrollport",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-padding",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Defines an inward offset from the corresponding edge of the scrollport. When applied to the root viewport, the offset is calculated and applied relative to the layout viewport (rather than the visual viewport) the same way as the corresponding inset properties on fixed-positioned boxes; the optimal viewing region is the remaining area that intersects with the visual viewport.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "auto",
                    "prose": "Indicates that the offset for the corresponding edge of the scrollport is UA-determined. This should generally default to a used length of 0px, but UAs may use heuristics to detect when a non-zero value is more appropriate. For example, a UA could detect when a position:fixed element is being used as an opaque unscrollable “header” that obscures the content below it, and resolve the top offset to the height of that element so that a “page down” operation (such as pressing PgDn) automatically scrolls by one “visible page” of content.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": [
                "scroll-padding-block-start",
                "scrollPaddingBlockStart"
            ],
            "styleDeclarationProperty": "scrollPaddingBlockStart",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "scroll-padding-inline-end": {
            "name": "scroll-padding-inline-end",
            "value": "auto | <length-percentage [0,∞]>",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the scroll container’s scrollport",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-padding",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Defines an inward offset from the corresponding edge of the scrollport. When applied to the root viewport, the offset is calculated and applied relative to the layout viewport (rather than the visual viewport) the same way as the corresponding inset properties on fixed-positioned boxes; the optimal viewing region is the remaining area that intersects with the visual viewport.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "auto",
                    "prose": "Indicates that the offset for the corresponding edge of the scrollport is UA-determined. This should generally default to a used length of 0px, but UAs may use heuristics to detect when a non-zero value is more appropriate. For example, a UA could detect when a position:fixed element is being used as an opaque unscrollable “header” that obscures the content below it, and resolve the top offset to the height of that element so that a “page down” operation (such as pressing PgDn) automatically scrolls by one “visible page” of content.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": [
                "scroll-padding-inline-end",
                "scrollPaddingInlineEnd"
            ],
            "styleDeclarationProperty": "scrollPaddingInlineEnd",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "scroll-padding-block-end": {
            "name": "scroll-padding-block-end",
            "value": "auto | <length-percentage [0,∞]>",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the scroll container’s scrollport",
            "computedValue": "the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-padding",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Defines an inward offset from the corresponding edge of the scrollport. When applied to the root viewport, the offset is calculated and applied relative to the layout viewport (rather than the visual viewport) the same way as the corresponding inset properties on fixed-positioned boxes; the optimal viewing region is the remaining area that intersects with the visual viewport.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "auto",
                    "prose": "Indicates that the offset for the corresponding edge of the scrollport is UA-determined. This should generally default to a used length of 0px, but UAs may use heuristics to detect when a non-zero value is more appropriate. For example, a UA could detect when a position:fixed element is being used as an opaque unscrollable “header” that obscures the content below it, and resolve the top offset to the height of that element so that a “page down” operation (such as pressing PgDn) automatically scrolls by one “visible page” of content.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": [
                "scroll-padding-block-end",
                "scrollPaddingBlockEnd"
            ],
            "styleDeclarationProperty": "scrollPaddingBlockEnd",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "scroll-padding-block": {
            "name": "scroll-padding-block",
            "value": "[ auto | <length-percentage [0,∞]> ]{1,2}",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the scroll container’s scrollport",
            "computedValue": "see individual properties",
            "animationType": "by computed value",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Defines an inward offset from the corresponding edge of the scrollport. When applied to the root viewport, the offset is calculated and applied relative to the layout viewport (rather than the visual viewport) the same way as the corresponding inset properties on fixed-positioned boxes; the optimal viewing region is the remaining area that intersects with the visual viewport.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "auto",
                    "prose": "Indicates that the offset for the corresponding edge of the scrollport is UA-determined. This should generally default to a used length of 0px, but UAs may use heuristics to detect when a non-zero value is more appropriate. For example, a UA could detect when a position:fixed element is being used as an opaque unscrollable “header” that obscures the content below it, and resolve the top offset to the height of that element so that a “page down” operation (such as pressing PgDn) automatically scrolls by one “visible page” of content.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["scroll-padding-block", "scrollPaddingBlock"],
            "styleDeclarationProperty": "scrollPaddingBlock",
            "referenceValues": ["<length-percentage [0,∞]> ]{1,2}"]
        },
        "scroll-padding-inline": {
            "name": "scroll-padding-inline",
            "value": "[ auto | <length-percentage [0,∞]> ]{1,2}",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "relative to the scroll container’s scrollport",
            "computedValue": "see individual properties",
            "animationType": "by computed value",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Defines an inward offset from the corresponding edge of the scrollport. When applied to the root viewport, the offset is calculated and applied relative to the layout viewport (rather than the visual viewport) the same way as the corresponding inset properties on fixed-positioned boxes; the optimal viewing region is the remaining area that intersects with the visual viewport.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "auto",
                    "prose": "Indicates that the offset for the corresponding edge of the scrollport is UA-determined. This should generally default to a used length of 0px, but UAs may use heuristics to detect when a non-zero value is more appropriate. For example, a UA could detect when a position:fixed element is being used as an opaque unscrollable “header” that obscures the content below it, and resolve the top offset to the height of that element so that a “page down” operation (such as pressing PgDn) automatically scrolls by one “visible page” of content.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": [
                "scroll-padding-inline",
                "scrollPaddingInline"
            ],
            "styleDeclarationProperty": "scrollPaddingInline",
            "referenceValues": ["<length-percentage [0,∞]> ]{1,2}"]
        },
        "scroll-margin-top": {
            "name": "scroll-margin-top",
            "value": "<length>",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-margin",
            "styleDeclaration": ["scroll-margin-top", "scrollMarginTop"],
            "styleDeclarationProperty": "scrollMarginTop",
            "referenceValues": ["<length>"]
        },
        "scroll-margin-right": {
            "name": "scroll-margin-right",
            "value": "<length>",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-margin",
            "styleDeclaration": ["scroll-margin-right", "scrollMarginRight"],
            "styleDeclarationProperty": "scrollMarginRight",
            "referenceValues": ["<length>"]
        },
        "scroll-margin-bottom": {
            "name": "scroll-margin-bottom",
            "value": "<length>",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-margin",
            "styleDeclaration": ["scroll-margin-bottom", "scrollMarginBottom"],
            "styleDeclarationProperty": "scrollMarginBottom",
            "referenceValues": ["<length>"]
        },
        "scroll-margin-left": {
            "name": "scroll-margin-left",
            "value": "<length>",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-margin",
            "styleDeclaration": ["scroll-margin-left", "scrollMarginLeft"],
            "styleDeclarationProperty": "scrollMarginLeft",
            "referenceValues": ["<length>"]
        },
        "scroll-margin-block-start": {
            "name": "scroll-margin-block-start",
            "value": "<length>",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-margin",
            "styleDeclaration": [
                "scroll-margin-block-start",
                "scrollMarginBlockStart"
            ],
            "styleDeclarationProperty": "scrollMarginBlockStart",
            "referenceValues": ["<length>"]
        },
        "scroll-margin-inline-start": {
            "name": "scroll-margin-inline-start",
            "value": "<length>",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-margin",
            "styleDeclaration": [
                "scroll-margin-inline-start",
                "scrollMarginInlineStart"
            ],
            "styleDeclarationProperty": "scrollMarginInlineStart",
            "referenceValues": ["<length>"]
        },
        "scroll-margin-block-end": {
            "name": "scroll-margin-block-end",
            "value": "<length>",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-margin",
            "styleDeclaration": [
                "scroll-margin-block-end",
                "scrollMarginBlockEnd"
            ],
            "styleDeclarationProperty": "scrollMarginBlockEnd",
            "referenceValues": ["<length>"]
        },
        "scroll-margin-inline-end": {
            "name": "scroll-margin-inline-end",
            "value": "<length>",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "scroll-margin",
            "styleDeclaration": [
                "scroll-margin-inline-end",
                "scrollMarginInlineEnd"
            ],
            "styleDeclarationProperty": "scrollMarginInlineEnd",
            "referenceValues": ["<length>"]
        },
        "scroll-margin-block": {
            "name": "scroll-margin-block",
            "value": "<length>{1,2}",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "see individual properties",
            "animationType": "by computed value type",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["scroll-margin-block", "scrollMarginBlock"],
            "styleDeclarationProperty": "scrollMarginBlock",
            "referenceValues": ["<length>{1,2}"]
        },
        "scroll-margin-inline": {
            "name": "scroll-margin-inline",
            "value": "<length>{1,2}",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "see individual properties",
            "animationType": "by computed value type",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["scroll-margin-inline", "scrollMarginInline"],
            "styleDeclarationProperty": "scrollMarginInline",
            "referenceValues": ["<length>{1,2}"]
        },
        "scrollbar-color": {
            "name": "scrollbar-color",
            "value": "auto | <color>{2}",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword or two computed colors",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "auto",
                    "prose": "The user agent determines the colors of the scrollbar. It should follow platform conventions, but may adjust the colors in accordance with color-scheme or other contextual information to better suit the page.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<color>",
                    "prose": "apply the first color to the thumb of the scrollbar, and the second color to the track of the scrollbar.",
                    "type": "value",
                    "value": "<color>"
                }
            ],
            "styleDeclaration": ["scrollbar-color", "scrollbarColor"],
            "styleDeclarationProperty": "scrollbarColor",
            "referenceValues": ["<color>{2}"]
        },
        "scrollbar-width": {
            "name": "scrollbar-width",
            "value": "auto | thin | none",
            "initial": "auto",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "auto",
                    "prose": "Implementations must use the default scrollbar width.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "thin",
                    "prose": "Implementations should use thinner scrollbars than auto. This may mean a thin variant of scrollbar provided by the platform, or a custom scrollbar thinner than the default platform scrollbar. The scrollbar must nonetheless remain wide enough to be usable. (Implementers may wish to consult WCAG 2.1 SC 2.5.5 Target Size. [WCAG21]) User agents may disregard this value and treat it as auto, for instance when the user has indicated discomfort for thin scrollbars through some UA or OS setting. (User agents are encouraged to provide such a setting.)",
                    "type": "value",
                    "value": "thin"
                },
                {
                    "name": "none",
                    "prose": "Implementations must not display any scrollbar, however the element’s scrollability by other means is not affected. Using this value can prevent mouse-only users from being able to scroll. Authors should ensure that mouse-only users can still reach hidden content, even if they have no scrollwheel. Authors that use none should provide an alternative/equivalent visual hint that scrolling is possible and there is more content.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["scrollbar-width", "scrollbarWidth"],
            "styleDeclarationProperty": "scrollbarWidth",
            "referenceValues": []
        },
        "shape-inside": {
            "name": "shape-inside",
            "value": "auto | outside-shape | [ <basic-shape> || shape-box ] | <image> | display",
            "initial": "auto",
            "appliesTo": "block-level elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "computed lengths for <basic-shape>, the absolute URL for <url>, otherwise as specified",
            "canonicalOrder": "per grammar",
            "animationType": "as defined for <basic-shape>, otherwise discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "The shape is computed based on the content box of the element.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "outside-shape",
                    "prose": "The shape is computed based on the shape defined by the shape-outside and shape-margin properties.",
                    "type": "value",
                    "value": "outside-shape"
                },
                {
                    "name": "<basic-shape>",
                    "prose": "The shape is computed based on the values of one of inset(), circle(), ellipse() or polygon().",
                    "type": "value",
                    "value": "<basic-shape>"
                },
                {
                    "name": "<url>",
                    "prose": "If the <uri> references an SVG shape element, that element defines the shape. Otherwise, if the <uri> references an image, the shape is extracted and computed based on the alpha channel of the specified image. If the <uri> does not reference an SVG shape element or an image, the effect is as if the value auto had been specified.",
                    "type": "value",
                    "value": "<url>"
                },
                {
                    "name": "display",
                    "prose": "The shape is computed based on the shape of the display as described in css-round-display.",
                    "type": "value",
                    "value": "display"
                }
            ],
            "styleDeclaration": ["shape-inside", "shapeInside"],
            "styleDeclarationProperty": "shapeInside",
            "referenceValues": ["<image>"]
        },
        "shape-padding": {
            "name": "shape-padding",
            "value": "<length>",
            "initial": "none",
            "appliesTo": "block-level elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "styleDeclaration": ["shape-padding", "shapePadding"],
            "styleDeclarationProperty": "shapePadding",
            "referenceValues": ["<length>"]
        },
        "shape-outside": {
            "name": "shape-outside",
            "value": "none | [ <basic-shape> || <shape-box> ] | <image>",
            "initial": "none",
            "appliesTo": "floats",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as defined for <basic-shape> (with <shape-box> following, if supplied); else the computed <image>; else the keyword as specified",
            "canonicalOrder": "per grammar",
            "animationType": "as defined for <basic-shape>, otherwise discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "The float area is unaffected.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<basic-shape>",
                    "prose": "The shape is computed based on the values of one of inset(), circle(), ellipse() or polygon(). If a <shape-box> is also supplied, this defines the reference box for the <basic-shape> function. If <shape-box> is not supplied, then the reference box defaults to margin-box.",
                    "type": "value",
                    "value": "<basic-shape>"
                },
                {
                    "name": "<image>",
                    "prose": "The shape is extracted and computed based on the alpha channel of the specified <image> as defined by shape-image-threshold. User agents must use the CORS protocol defined by the [FETCH] specification for all URLs in a shape-outside value. When fetching, user agents must use \"Anonymous\" mode, set the referrer source to the stylesheet’s URL and set the origin to the URL of the containing document. If this results in network errors such that there is no valid fallback image, the effect is as if the value none had been specified.",
                    "type": "value",
                    "value": "<image>"
                }
            ],
            "styleDeclaration": ["shape-outside", "shapeOutside"],
            "styleDeclarationProperty": "shapeOutside",
            "referenceValues": ["<shape-box> ]", "<image>"]
        },
        "shape-image-threshold": {
            "name": "shape-image-threshold",
            "value": "<alpha-value>",
            "initial": "0",
            "appliesTo": "floats",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified number, clamped to the range [0,1]",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "<number>",
                    "prose": "Sets the threshold used for extracting a shape from an image. The shape is defined by the pixels whose alpha value is greater than the threshold. A threshold value outside the range 0.0 (fully transparent) to 1.0 (fully opaque) will be clamped to this range.",
                    "type": "value",
                    "value": "<number>"
                }
            ],
            "styleDeclaration": [
                "shape-image-threshold",
                "shapeImageThreshold"
            ],
            "styleDeclarationProperty": "shapeImageThreshold",
            "referenceValues": ["<alpha-value>"]
        },
        "shape-margin": {
            "name": "shape-margin",
            "value": "<length-percentage [0,∞]>",
            "initial": "0",
            "appliesTo": "floats",
            "inherited": "no",
            "percentages": "refer to the inline size of the containing block",
            "computedValue": "computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Sets the margin of the shape to the specified value.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                }
            ],
            "styleDeclaration": ["shape-margin", "shapeMargin"],
            "styleDeclarationProperty": "shapeMargin",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "text-size-adjust": {
            "name": "text-size-adjust",
            "value": "auto | none | <percentage [0,∞]>",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "see below",
            "computedValue": "specified keyword or percentage",
            "canonicalOrder": "N/A",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "auto",
                    "prose": "Renderers must use the default size adjustment when displaying on a small device.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "none",
                    "prose": "Renderers must not do size adjustment when displaying on a small device.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<percentage [0,∞]>",
                    "prose": "When displaying on a small device, renderers must not do size adjustment but instead the computed value of font-size must be multiplied by this percentage. Negative values are invalid.",
                    "type": "value",
                    "value": "<percentage [0,∞]>"
                }
            ],
            "styleDeclaration": ["text-size-adjust", "textSizeAdjust"],
            "styleDeclarationProperty": "textSizeAdjust",
            "referenceValues": ["<percentage [0,∞]>"]
        },
        "width": {
            "name": "width",
            "value": "auto | <length-percentage [0,∞]> | min-content | max-content | fit-content(<length-percentage [0,∞]>)",
            "initial": "auto",
            "appliesTo": "all elements except non-replaced inlines",
            "inherited": "no",
            "percentages": "relative to width/height of containing block",
            "computedValue": "as specified, with <length-percentage> values computed",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type, recursing into fit-content()",
            "logicalPropertyGroup": "size",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Specifies the size of the box using <length> and/or <percentage>. The box-sizing property indicates whether the content box or border box is measured. Percentages are resolved against the width/height, as appropriate, of the box’s containing block. If, in a particular axis, the containing block’s size depends on the box’s size, see the relevant layout module for special rules on how to resolve percentages. Negative values are invalid.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "auto",
                    "prose": "For width/height, specifies an automatic size (automatic block size/automatic inline size). See the relevant layout module for how to calculate this. For min-width/min-height, specifies an automatic minimum size. Unless otherwise defined by the relevant layout module, however, it resolves to a used value of 0. For backwards-compatibility, the resolved value of this keyword is zero for boxes of all [CSS2] display types: block and inline boxes, inline blocks, and all the table layout boxes. It also resolves to zero when no box is generated.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "min-content",
                    "prose": "Use the min-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
                    "type": "value",
                    "value": "min-content"
                },
                {
                    "name": "max-content",
                    "prose": "Use the max-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
                    "type": "value",
                    "value": "max-content"
                },
                {
                    "name": "fit-content()",
                    "value": "fit-content()",
                    "type": "value"
                }
            ],
            "styleDeclaration": ["width"],
            "styleDeclarationProperty": "width",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "height": {
            "name": "height",
            "value": "auto | <length-percentage [0,∞]> | min-content | max-content | fit-content(<length-percentage [0,∞]>)",
            "initial": "auto",
            "appliesTo": "all elements except non-replaced inlines",
            "inherited": "no",
            "percentages": "relative to width/height of containing block",
            "computedValue": "as specified, with <length-percentage> values computed",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type, recursing into fit-content()",
            "logicalPropertyGroup": "size",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Specifies the size of the box using <length> and/or <percentage>. The box-sizing property indicates whether the content box or border box is measured. Percentages are resolved against the width/height, as appropriate, of the box’s containing block. If, in a particular axis, the containing block’s size depends on the box’s size, see the relevant layout module for special rules on how to resolve percentages. Negative values are invalid.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "auto",
                    "prose": "For width/height, specifies an automatic size (automatic block size/automatic inline size). See the relevant layout module for how to calculate this. For min-width/min-height, specifies an automatic minimum size. Unless otherwise defined by the relevant layout module, however, it resolves to a used value of 0. For backwards-compatibility, the resolved value of this keyword is zero for boxes of all [CSS2] display types: block and inline boxes, inline blocks, and all the table layout boxes. It also resolves to zero when no box is generated.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "min-content",
                    "prose": "Use the min-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
                    "type": "value",
                    "value": "min-content"
                },
                {
                    "name": "max-content",
                    "prose": "Use the max-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
                    "type": "value",
                    "value": "max-content"
                },
                {
                    "name": "fit-content()",
                    "value": "fit-content()",
                    "type": "value"
                }
            ],
            "styleDeclaration": ["height"],
            "styleDeclarationProperty": "height",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "min-width": {
            "name": "min-width",
            "value": "auto | <length-percentage [0,∞]> | min-content | max-content | fit-content(<length-percentage [0,∞]>)",
            "initial": "auto",
            "appliesTo": "all elements that accept width or height",
            "inherited": "no",
            "percentages": "relative to width/height of containing block",
            "computedValue": "as specified, with <length-percentage> values computed",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value, recursing into fit-content()",
            "logicalPropertyGroup": "min-size",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Specifies the size of the box using <length> and/or <percentage>. The box-sizing property indicates whether the content box or border box is measured. Percentages are resolved against the width/height, as appropriate, of the box’s containing block. If, in a particular axis, the containing block’s size depends on the box’s size, see the relevant layout module for special rules on how to resolve percentages. Negative values are invalid.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "auto",
                    "prose": "For width/height, specifies an automatic size (automatic block size/automatic inline size). See the relevant layout module for how to calculate this. For min-width/min-height, specifies an automatic minimum size. Unless otherwise defined by the relevant layout module, however, it resolves to a used value of 0. For backwards-compatibility, the resolved value of this keyword is zero for boxes of all [CSS2] display types: block and inline boxes, inline blocks, and all the table layout boxes. It also resolves to zero when no box is generated.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "min-content",
                    "prose": "Use the min-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
                    "type": "value",
                    "value": "min-content"
                },
                {
                    "name": "max-content",
                    "prose": "Use the max-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
                    "type": "value",
                    "value": "max-content"
                },
                {
                    "name": "fit-content()",
                    "value": "fit-content()",
                    "type": "value"
                }
            ],
            "styleDeclaration": ["min-width", "minWidth"],
            "styleDeclarationProperty": "minWidth",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "min-height": {
            "name": "min-height",
            "value": "auto | <length-percentage [0,∞]> | min-content | max-content | fit-content(<length-percentage [0,∞]>)",
            "initial": "auto",
            "appliesTo": "all elements that accept width or height",
            "inherited": "no",
            "percentages": "relative to width/height of containing block",
            "computedValue": "as specified, with <length-percentage> values computed",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value, recursing into fit-content()",
            "logicalPropertyGroup": "min-size",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Specifies the size of the box using <length> and/or <percentage>. The box-sizing property indicates whether the content box or border box is measured. Percentages are resolved against the width/height, as appropriate, of the box’s containing block. If, in a particular axis, the containing block’s size depends on the box’s size, see the relevant layout module for special rules on how to resolve percentages. Negative values are invalid.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "auto",
                    "prose": "For width/height, specifies an automatic size (automatic block size/automatic inline size). See the relevant layout module for how to calculate this. For min-width/min-height, specifies an automatic minimum size. Unless otherwise defined by the relevant layout module, however, it resolves to a used value of 0. For backwards-compatibility, the resolved value of this keyword is zero for boxes of all [CSS2] display types: block and inline boxes, inline blocks, and all the table layout boxes. It also resolves to zero when no box is generated.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "min-content",
                    "prose": "Use the min-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
                    "type": "value",
                    "value": "min-content"
                },
                {
                    "name": "max-content",
                    "prose": "Use the max-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
                    "type": "value",
                    "value": "max-content"
                },
                {
                    "name": "fit-content()",
                    "value": "fit-content()",
                    "type": "value"
                }
            ],
            "styleDeclaration": ["min-height", "minHeight"],
            "styleDeclarationProperty": "minHeight",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "max-width": {
            "name": "max-width",
            "value": "none | <length-percentage [0,∞]> | min-content | max-content | fit-content(<length-percentage [0,∞]>)",
            "initial": "none",
            "appliesTo": "all elements that accept width or height",
            "inherited": "no",
            "percentages": "relative to width/height of containing block",
            "computedValue": "as specified, with <length-percentage> values computed",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value, recursing into fit-content()",
            "logicalPropertyGroup": "max-size",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Specifies the size of the box using <length> and/or <percentage>. The box-sizing property indicates whether the content box or border box is measured. Percentages are resolved against the width/height, as appropriate, of the box’s containing block. If, in a particular axis, the containing block’s size depends on the box’s size, see the relevant layout module for special rules on how to resolve percentages. Negative values are invalid.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "none",
                    "prose": "No limit on the size of the box.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "min-content",
                    "prose": "Use the min-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
                    "type": "value",
                    "value": "min-content"
                },
                {
                    "name": "max-content",
                    "prose": "Use the max-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
                    "type": "value",
                    "value": "max-content"
                },
                {
                    "name": "fit-content()",
                    "value": "fit-content()",
                    "type": "value"
                }
            ],
            "styleDeclaration": ["max-width", "maxWidth"],
            "styleDeclarationProperty": "maxWidth",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "max-height": {
            "name": "max-height",
            "value": "none | <length-percentage [0,∞]> | min-content | max-content | fit-content(<length-percentage [0,∞]>)",
            "initial": "none",
            "appliesTo": "all elements that accept width or height",
            "inherited": "no",
            "percentages": "relative to width/height of containing block",
            "computedValue": "as specified, with <length-percentage> values computed",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value, recursing into fit-content()",
            "logicalPropertyGroup": "max-size",
            "values": [
                {
                    "name": "<length-percentage [0,∞]>",
                    "prose": "Specifies the size of the box using <length> and/or <percentage>. The box-sizing property indicates whether the content box or border box is measured. Percentages are resolved against the width/height, as appropriate, of the box’s containing block. If, in a particular axis, the containing block’s size depends on the box’s size, see the relevant layout module for special rules on how to resolve percentages. Negative values are invalid.",
                    "type": "value",
                    "value": "<length-percentage [0,∞]>"
                },
                {
                    "name": "none",
                    "prose": "No limit on the size of the box.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "min-content",
                    "prose": "Use the min-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
                    "type": "value",
                    "value": "min-content"
                },
                {
                    "name": "max-content",
                    "prose": "Use the max-content size in the relevant axis; for a box’s block size, unless otherwise specified, this is equivalent to its automatic size.",
                    "type": "value",
                    "value": "max-content"
                },
                {
                    "name": "fit-content()",
                    "value": "fit-content()",
                    "type": "value"
                }
            ],
            "styleDeclaration": ["max-height", "maxHeight"],
            "styleDeclarationProperty": "maxHeight",
            "referenceValues": ["<length-percentage [0,∞]>"]
        },
        "aspect-ratio": {
            "name": "aspect-ratio",
            "value": "auto || <ratio>",
            "initial": "auto",
            "appliesTo": "all elements except inline boxes and internal ruby or table boxes",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword or a pair of numbers",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "auto",
                    "prose": "Replaced elements with a natural aspect ratio use that aspect ratio; otherwise the box has no preferred aspect ratio. Size calculations involving the aspect ratio work with the content box dimensions always.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<ratio>",
                    "prose": "The box’s preferred aspect ratio is the specified ratio of width / height. Size calculations involving the aspect ratio work with the dimensions of the box specified by box-sizing. If the <ratio> is degenerate, the property instead behaves as auto.",
                    "type": "value",
                    "value": "<ratio>"
                },
                {
                    "name": "auto && <ratio>",
                    "prose": "If both auto and a <ratio> are specified together, the preferred aspect ratio is the specified ratio of width / height unless it is a replaced element with a natural aspect ratio, in which case that aspect ratio is used instead. In all cases, size calculations involving the aspect ratio work with the content box dimensions always. If the <ratio> is degenerate, the property instead behaves as auto.",
                    "type": "value",
                    "value": "auto && <ratio>"
                }
            ],
            "styleDeclaration": ["aspect-ratio", "aspectRatio"],
            "styleDeclarationProperty": "aspectRatio",
            "referenceValues": ["<ratio>"]
        },
        "contain-intrinsic-width": {
            "name": "contain-intrinsic-width",
            "value": "none | <length> | auto <length>",
            "initial": "none",
            "appliesTo": "elements with size containment",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified, with <length> values computed",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "contain-intrinsic-size",
            "values": [
                {
                    "name": "none",
                    "prose": "The corresponding axis does not have an explicit intrinsic inner size.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<length>",
                    "prose": "The corresponding axis has an explicit intrinsic inner size of the specified <length>.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "auto <length>",
                    "prose": "If the element has a last remembered size and is currently skipping its contents, its explicit intrinsic inner size is the last remembered size. Otherwise, its explicit intrinsic inner size is the specified <length>.",
                    "type": "value",
                    "value": "auto <length>"
                }
            ],
            "styleDeclaration": [
                "contain-intrinsic-width",
                "containIntrinsicWidth"
            ],
            "styleDeclarationProperty": "containIntrinsicWidth",
            "referenceValues": ["<length>"]
        },
        "contain-intrinsic-height": {
            "name": "contain-intrinsic-height",
            "value": "none | <length> | auto <length>",
            "initial": "none",
            "appliesTo": "elements with size containment",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified, with <length> values computed",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "contain-intrinsic-size",
            "values": [
                {
                    "name": "none",
                    "prose": "The corresponding axis does not have an explicit intrinsic inner size.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<length>",
                    "prose": "The corresponding axis has an explicit intrinsic inner size of the specified <length>.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "auto <length>",
                    "prose": "If the element has a last remembered size and is currently skipping its contents, its explicit intrinsic inner size is the last remembered size. Otherwise, its explicit intrinsic inner size is the specified <length>.",
                    "type": "value",
                    "value": "auto <length>"
                }
            ],
            "styleDeclaration": [
                "contain-intrinsic-height",
                "containIntrinsicHeight"
            ],
            "styleDeclarationProperty": "containIntrinsicHeight",
            "referenceValues": ["<length>"]
        },
        "contain-intrinsic-block-size": {
            "name": "contain-intrinsic-block-size",
            "value": "none | <length> | auto <length>",
            "initial": "none",
            "appliesTo": "elements with size containment",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified, with <length> values computed",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "contain-intrinsic-size",
            "values": [
                {
                    "name": "none",
                    "prose": "The corresponding axis does not have an explicit intrinsic inner size.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<length>",
                    "prose": "The corresponding axis has an explicit intrinsic inner size of the specified <length>.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "auto <length>",
                    "prose": "If the element has a last remembered size and is currently skipping its contents, its explicit intrinsic inner size is the last remembered size. Otherwise, its explicit intrinsic inner size is the specified <length>.",
                    "type": "value",
                    "value": "auto <length>"
                }
            ],
            "styleDeclaration": [
                "contain-intrinsic-block-size",
                "containIntrinsicBlockSize"
            ],
            "styleDeclarationProperty": "containIntrinsicBlockSize",
            "referenceValues": ["<length>"]
        },
        "contain-intrinsic-inline-size": {
            "name": "contain-intrinsic-inline-size",
            "value": "none | <length> | auto <length>",
            "initial": "none",
            "appliesTo": "elements with size containment",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified, with <length> values computed",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "logicalPropertyGroup": "contain-intrinsic-size",
            "values": [
                {
                    "name": "none",
                    "prose": "The corresponding axis does not have an explicit intrinsic inner size.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<length>",
                    "prose": "The corresponding axis has an explicit intrinsic inner size of the specified <length>.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "auto <length>",
                    "prose": "If the element has a last remembered size and is currently skipping its contents, its explicit intrinsic inner size is the last remembered size. Otherwise, its explicit intrinsic inner size is the specified <length>.",
                    "type": "value",
                    "value": "auto <length>"
                }
            ],
            "styleDeclaration": [
                "contain-intrinsic-inline-size",
                "containIntrinsicInlineSize"
            ],
            "styleDeclarationProperty": "containIntrinsicInlineSize",
            "referenceValues": ["<length>"]
        },
        "contain-intrinsic-size": {
            "name": "contain-intrinsic-size",
            "value": "[ none | <length> | auto <length> ]{1,2}",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "none",
                    "prose": "The corresponding axis does not have an explicit intrinsic inner size.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<length>",
                    "prose": "The corresponding axis has an explicit intrinsic inner size of the specified <length>.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "auto <length>",
                    "prose": "If the element has a last remembered size and is currently skipping its contents, its explicit intrinsic inner size is the last remembered size. Otherwise, its explicit intrinsic inner size is the specified <length>.",
                    "type": "value",
                    "value": "auto <length>"
                }
            ],
            "styleDeclaration": [
                "contain-intrinsic-size",
                "containIntrinsicSize"
            ],
            "styleDeclarationProperty": "containIntrinsicSize",
            "referenceValues": ["<length>"]
        },
        "min-intrinsic-sizing": {
            "name": "min-intrinsic-sizing",
            "value": "legacy | zero-if-scroll || zero-if-extrinsic",
            "initial": "legacy",
            "appliesTo": "all elements except inline boxes",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "legacy",
                    "prose": "The box’s min-content contribution is handled as normal.",
                    "type": "value",
                    "value": "legacy"
                },
                {
                    "name": "zero-if-scroll",
                    "prose": "The box’s min-content contribution is “compressed” if it is a scroll container.",
                    "type": "value",
                    "value": "zero-if-scroll"
                },
                {
                    "name": "zero-if-extrinsic",
                    "prose": "The box’s min-content contribution is “compressed” if has an extrinsic preferred or maximum size.",
                    "type": "value",
                    "value": "zero-if-extrinsic"
                }
            ],
            "styleDeclaration": ["min-intrinsic-sizing", "minIntrinsicSizing"],
            "styleDeclarationProperty": "minIntrinsicSizing",
            "referenceValues": []
        },
        "box-sizing": {
            "name": "box-sizing",
            "value": "content-box | border-box",
            "initial": "content-box",
            "appliesTo": "all elements that accept width or height",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "content-box",
                    "prose": "Sizes specified on sizing properties as <length-percentage> represent the box’s inner sizes, excluding the margins/border/padding: they are applied to the content box. The padding and border of the box are laid out and drawn outside the specified width and height.",
                    "type": "value",
                    "value": "content-box"
                },
                {
                    "name": "border-box",
                    "prose": "Sizes specified on sizing properties as <length-percentage> represent the box’s visually-apparent sizes, including the borders/padding (but not margin): they are applied to the border box. The padding and border of the box are laid out and drawn inside the specified width and height, with the content box sized to fill the remaining space, floored at zero. The content width and height are calculated by subtracting the border and padding widths of the respective sides from the specified <length-percentage>. As the content width and height cannot be negative, this computation is floored at zero. Used values, as exposed for instance through getComputedStyle(), also refer to the border box.",
                    "type": "value",
                    "value": "border-box"
                }
            ],
            "styleDeclaration": ["box-sizing", "boxSizing"],
            "styleDeclarationProperty": "boxSizing",
            "referenceValues": []
        },
        "voice-volume": {
            "name": "voice-volume",
            "value": "silent | [[x-soft | soft | medium | loud | x-loud] || <decibel>]",
            "initial": "medium",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "silent, or a keyword value and optionally also a decibel offset (if not zero)",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "silent",
                    "prose": "Specifies that no sound is generated (the text is read \"silently\").",
                    "type": "value",
                    "value": "silent"
                },
                {
                    "name": "x-soft",
                    "prose": "This sequence of keywords corresponds to monotonically non-decreasing volume levels, mapped to implementation-dependent values that meet the listener’s requirements with regards to perceived loudness. These audio levels are typically provided via a preference mechanism that allow users to calibrate sound options according to their auditory environment. The keyword x-soft maps to the user’s minimum audible volume level, x-loud maps to the user’s maximum tolerable volume level, medium maps to the user’s preferred volume level, soft and loud map to intermediary values.",
                    "type": "value",
                    "value": "x-soft"
                },
                {
                    "name": "soft",
                    "prose": "This sequence of keywords corresponds to monotonically non-decreasing volume levels, mapped to implementation-dependent values that meet the listener’s requirements with regards to perceived loudness. These audio levels are typically provided via a preference mechanism that allow users to calibrate sound options according to their auditory environment. The keyword x-soft maps to the user’s minimum audible volume level, x-loud maps to the user’s maximum tolerable volume level, medium maps to the user’s preferred volume level, soft and loud map to intermediary values.",
                    "type": "value",
                    "value": "soft"
                },
                {
                    "name": "medium",
                    "prose": "This sequence of keywords corresponds to monotonically non-decreasing volume levels, mapped to implementation-dependent values that meet the listener’s requirements with regards to perceived loudness. These audio levels are typically provided via a preference mechanism that allow users to calibrate sound options according to their auditory environment. The keyword x-soft maps to the user’s minimum audible volume level, x-loud maps to the user’s maximum tolerable volume level, medium maps to the user’s preferred volume level, soft and loud map to intermediary values.",
                    "type": "value",
                    "value": "medium"
                },
                {
                    "name": "loud",
                    "prose": "This sequence of keywords corresponds to monotonically non-decreasing volume levels, mapped to implementation-dependent values that meet the listener’s requirements with regards to perceived loudness. These audio levels are typically provided via a preference mechanism that allow users to calibrate sound options according to their auditory environment. The keyword x-soft maps to the user’s minimum audible volume level, x-loud maps to the user’s maximum tolerable volume level, medium maps to the user’s preferred volume level, soft and loud map to intermediary values.",
                    "type": "value",
                    "value": "loud"
                },
                {
                    "name": "x-loud",
                    "prose": "This sequence of keywords corresponds to monotonically non-decreasing volume levels, mapped to implementation-dependent values that meet the listener’s requirements with regards to perceived loudness. These audio levels are typically provided via a preference mechanism that allow users to calibrate sound options according to their auditory environment. The keyword x-soft maps to the user’s minimum audible volume level, x-loud maps to the user’s maximum tolerable volume level, medium maps to the user’s preferred volume level, soft and loud map to intermediary values.",
                    "type": "value",
                    "value": "x-loud"
                },
                {
                    "name": "<decibel>",
                    "prose": "This represents a change (positive or negative) relative to the given keyword value (see enumeration above), or to the default value for the root element, or otherwise to the inherited volume level (which may itself be a combination of a keyword value and decibel offset, in which case the decibel values are combined additively). When the inherited volume level is silent, this voice-volume resolves to silent too, regardless of the specified <decibel> value. The <decibel> type denotes a dimension with a \"dB\" (decibel unit) unit identifier. Decibels represent the ratio of the squares of the new signal amplitude a1 and the current amplitude a0, as per the following logarithmic equation: volume(dB) = 20 × log10(a1 / a0).",
                    "type": "value",
                    "value": "<decibel>"
                },
                {
                    "name": "<decibel>",
                    "prose": "The <decibel> type denotes a dimension with a \"dB\" (decibel unit) unit identifier. Decibels represent the ratio of the squares of the new signal amplitude a1 and the current amplitude a0, as per the following logarithmic equation: volume(dB) = 20 × log10(a1 / a0).",
                    "type": "type"
                }
            ],
            "styleDeclaration": ["voice-volume", "voiceVolume"],
            "styleDeclarationProperty": "voiceVolume",
            "referenceValues": ["<decibel>]"]
        },
        "voice-balance": {
            "name": "voice-balance",
            "value": "<number> | left | center | right | leftwards | rightwards",
            "initial": "center",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "the specified value resolved to a <number> between -100 and 100 (inclusive)",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<number>",
                    "prose": "A number between -100 and 100 (inclusive). Values smaller than -100 are clamped to -100. Values greater than 100 are clamped to 100. The value -100 represents the left side, and the value 100 represents the right side. The value 0 represents the center point whereby there is no discernible audio separation between left and right sides. (In a stereo sound system, this corresponds to equal distribution of audio signals between left and right speakers).",
                    "type": "value",
                    "value": "<number>"
                },
                {
                    "name": "left",
                    "prose": "Same as -100.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "center",
                    "prose": "Same as 0.",
                    "type": "value",
                    "value": "center"
                },
                {
                    "name": "right",
                    "prose": "Same as 100.",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "leftwards",
                    "prose": "Moves the sound to the left by subtracting 20 from the inherited voice-balance value (and by clamping the resulting number to -100).",
                    "type": "value",
                    "value": "leftwards"
                },
                {
                    "name": "rightwards",
                    "prose": "Moves the sound to the right, by adding 20 to the inherited voice-balance value (and by clamping the resulting number to 100).",
                    "type": "value",
                    "value": "rightwards"
                }
            ],
            "styleDeclaration": ["voice-balance", "voiceBalance"],
            "styleDeclarationProperty": "voiceBalance",
            "referenceValues": ["<number>"]
        },
        "speak": {
            "name": "speak",
            "value": "auto | never | always",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "auto",
                    "prose": "Resolves to a computed value of never when display is none, otherwise resolves to a computed value of auto. The used value of a computed auto is equivalent to always if visibility is visible and to never otherwise.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "never",
                    "prose": "This value causes an element (including pauses, cues, rests and actual content) to not be rendered (i.e., the element has no effect in the aural dimension).",
                    "type": "value",
                    "value": "never"
                },
                {
                    "name": "always",
                    "prose": "The element is rendered aurally (regardless of its display value, or the display or speak values of its ancestors).",
                    "type": "value",
                    "value": "always"
                }
            ],
            "styleDeclaration": ["speak"],
            "styleDeclarationProperty": "speak",
            "referenceValues": []
        },
        "speak-as": {
            "name": "speak-as",
            "value": "normal | spell-out || digits || [ literal-punctuation | no-punctuation ]",
            "initial": "normal",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "normal",
                    "prose": "Uses language-dependent pronunciation rules for rendering the element’s content. For example, punctuation is not spoken as-is, but instead rendered naturally as appropriate pauses.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "spell-out",
                    "prose": "Spells the text one letter at a time (useful for acronyms and abbreviations). In languages where accented characters are rare, it is permitted to drop accents in favor of alternative unaccented spellings. As an example, in English, the word “rôle” can also be written as “role”. A conforming implementation would thus be able to spell-out “rôle” as “R O L E”.",
                    "type": "value",
                    "value": "spell-out"
                },
                {
                    "name": "digits",
                    "prose": "Speak numbers one digit at a time, for instance, “twelve” would be spoken as “one two”, and “31” as “three one”.",
                    "type": "value",
                    "value": "digits"
                },
                {
                    "name": "literal-punctuation",
                    "prose": "Punctuation such as semicolons, braces, and so on is named aloud (i.e. spoken literally) rather than rendered naturally as appropriate pauses.",
                    "type": "value",
                    "value": "literal-punctuation"
                },
                {
                    "name": "no-punctuation",
                    "prose": "Punctuation is not rendered: neither spoken nor rendered as pauses.",
                    "type": "value",
                    "value": "no-punctuation"
                }
            ],
            "styleDeclaration": ["speak-as", "speakAs"],
            "styleDeclarationProperty": "speakAs",
            "referenceValues": []
        },
        "pause-before": {
            "name": "pause-before",
            "value": "<time [0s,∞]> | none | x-weak | weak | medium | strong | x-strong",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<time [0s,∞]>",
                    "prose": "Expresses the pause in absolute time units (seconds and milliseconds, e.g. \"+3s\", \"250ms\"). Only non-negative values are allowed.",
                    "type": "value",
                    "value": "<time [0s,∞]>"
                },
                {
                    "name": "none",
                    "prose": "Equivalent to 0ms (no prosodic break is produced by the speech processor).",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "x-weak",
                    "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "x-weak"
                },
                {
                    "name": "weak",
                    "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "weak"
                },
                {
                    "name": "medium",
                    "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "medium"
                },
                {
                    "name": "strong",
                    "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "strong"
                },
                {
                    "name": "x-strong",
                    "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "x-strong"
                }
            ],
            "styleDeclaration": ["pause-before", "pauseBefore"],
            "styleDeclarationProperty": "pauseBefore",
            "referenceValues": ["<time [0s,∞]>"]
        },
        "pause-after": {
            "name": "pause-after",
            "value": "<time [0s,∞]> | none | x-weak | weak | medium | strong | x-strong",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<time [0s,∞]>",
                    "prose": "Expresses the pause in absolute time units (seconds and milliseconds, e.g. \"+3s\", \"250ms\"). Only non-negative values are allowed.",
                    "type": "value",
                    "value": "<time [0s,∞]>"
                },
                {
                    "name": "none",
                    "prose": "Equivalent to 0ms (no prosodic break is produced by the speech processor).",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "x-weak",
                    "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "x-weak"
                },
                {
                    "name": "weak",
                    "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "weak"
                },
                {
                    "name": "medium",
                    "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "medium"
                },
                {
                    "name": "strong",
                    "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "strong"
                },
                {
                    "name": "x-strong",
                    "prose": "Expresses the pause by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "x-strong"
                }
            ],
            "styleDeclaration": ["pause-after", "pauseAfter"],
            "styleDeclarationProperty": "pauseAfter",
            "referenceValues": ["<time [0s,∞]>"]
        },
        "pause": {
            "name": "pause",
            "value": "<'pause-before'> <'pause-after'>?",
            "initial": "N/A (see individual properties)",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "N/A (see individual properties)",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["pause"],
            "styleDeclarationProperty": "pause",
            "referenceValues": ["<'pause-before'> <'pause-after'>?"]
        },
        "rest-before": {
            "name": "rest-before",
            "value": "<time [0s,∞]> | none | x-weak | weak | medium | strong | x-strong",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<time [0s,∞]>",
                    "prose": "Expresses the rest in absolute time units (seconds and milliseconds, e.g. \"+3s\", \"250ms\"). Only non-negative values are allowed.",
                    "type": "value",
                    "value": "<time [0s,∞]>"
                },
                {
                    "name": "none",
                    "prose": "Equivalent to 0ms. (No prosodic break is produced by the speech processor.)",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "x-weak",
                    "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "x-weak"
                },
                {
                    "name": "weak",
                    "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "weak"
                },
                {
                    "name": "medium",
                    "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "medium"
                },
                {
                    "name": "strong",
                    "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "strong"
                },
                {
                    "name": "x-strong",
                    "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "x-strong"
                }
            ],
            "styleDeclaration": ["rest-before", "restBefore"],
            "styleDeclarationProperty": "restBefore",
            "referenceValues": ["<time [0s,∞]>"]
        },
        "rest-after": {
            "name": "rest-after",
            "value": "<time [0s,∞]> | none | x-weak | weak | medium | strong | x-strong",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<time [0s,∞]>",
                    "prose": "Expresses the rest in absolute time units (seconds and milliseconds, e.g. \"+3s\", \"250ms\"). Only non-negative values are allowed.",
                    "type": "value",
                    "value": "<time [0s,∞]>"
                },
                {
                    "name": "none",
                    "prose": "Equivalent to 0ms. (No prosodic break is produced by the speech processor.)",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "x-weak",
                    "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "x-weak"
                },
                {
                    "name": "weak",
                    "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "weak"
                },
                {
                    "name": "medium",
                    "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "medium"
                },
                {
                    "name": "strong",
                    "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "strong"
                },
                {
                    "name": "x-strong",
                    "prose": "Expresses the rest by the strength of the prosodic break in speech output. The exact time is implementation-dependent. The values indicate monotonically non-decreasing (conceptually increasing) break strength between elements.",
                    "type": "value",
                    "value": "x-strong"
                }
            ],
            "styleDeclaration": ["rest-after", "restAfter"],
            "styleDeclarationProperty": "restAfter",
            "referenceValues": ["<time [0s,∞]>"]
        },
        "rest": {
            "name": "rest",
            "value": "<'rest-before'> <'rest-after'>?",
            "initial": "N/A (see individual properties)",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "N/A (see individual properties)",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["rest"],
            "styleDeclarationProperty": "rest",
            "referenceValues": ["<'rest-before'> <'rest-after'>?"]
        },
        "cue-before": {
            "name": "cue-before",
            "value": "<uri> <decibel>? | none",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<uri>",
                    "prose": "The URI designates an auditory icon resource. When a user agent is not able to render the specified auditory icon (e.g. missing file resource, or unsupported audio codec), it is recommended to produce an alternative cue, such as a bell sound.",
                    "type": "value",
                    "value": "<uri>"
                }
            ],
            "styleDeclaration": ["cue-before", "cueBefore"],
            "styleDeclarationProperty": "cueBefore",
            "referenceValues": ["<uri> <decibel>?"]
        },
        "cue-after": {
            "name": "cue-after",
            "value": "<uri> <decibel>? | none",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<uri>",
                    "prose": "The URI designates an auditory icon resource. When a user agent is not able to render the specified auditory icon (e.g. missing file resource, or unsupported audio codec), it is recommended to produce an alternative cue, such as a bell sound.",
                    "type": "value",
                    "value": "<uri>"
                }
            ],
            "styleDeclaration": ["cue-after", "cueAfter"],
            "styleDeclarationProperty": "cueAfter",
            "referenceValues": ["<uri> <decibel>?"]
        },
        "cue": {
            "name": "cue",
            "value": "<'cue-before'> <'cue-after'>?",
            "initial": "N/A (see individual properties)",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "N/A (see individual properties)",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["cue"],
            "styleDeclarationProperty": "cue",
            "referenceValues": ["<'cue-before'> <'cue-after'>?"]
        },
        "voice-family": {
            "name": "voice-family",
            "value": "[[<family-name> | <generic-voice>],]* [<family-name> | <generic-voice>] | preserve",
            "initial": "implementation-dependent",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<family-name>",
                    "prose": "Values are specific voice instances (e.g., Mike, comedian, mary, carlos2, \"valley girl\"). Like font-family names, voice names must either be given quoted as strings, or unquoted as a sequence of one or more CSS identifiers. If a sequence of identifiers is given as a voice name, the computed value is the name converted to a string by joining all the identifiers in the sequence by single spaces. Voice names that happen to be the same as the gender keywords (male, female and neutral) or that happen to match the CSS-wide keywords or preserve must be quoted to disambiguate with these keywords. The keyword default is reserved for future use and must also be quoted when used as voice names. It is recommended to quote voice names that contain white space, digits, or punctuation characters other than hyphens—even if these voice names are valid in unquoted form—in order to improve code clarity. For example: voice-family: \"john doe\", \"Henry the-8th\";",
                    "type": "value",
                    "value": "<family-name>"
                },
                {
                    "name": "<age>",
                    "prose": "Possible values are child, young and old, indicating the preferred age category to match during voice selection.",
                    "type": "type"
                },
                {
                    "name": "child",
                    "value": "child",
                    "type": "value"
                },
                {
                    "name": "young",
                    "value": "young",
                    "type": "value"
                },
                {
                    "name": "old",
                    "value": "old",
                    "type": "value"
                },
                {
                    "name": "<gender>",
                    "prose": "One of the keywords male, female, or neutral, specifying a male, female, or neutral voice, respectively.",
                    "type": "type"
                },
                {
                    "name": "male",
                    "type": "value",
                    "value": "male"
                },
                {
                    "name": "female",
                    "type": "value",
                    "value": "female"
                },
                {
                    "name": "neutral",
                    "type": "value",
                    "value": "neutral"
                },
                {
                    "name": "<integer>",
                    "prose": "An integer indicating the preferred variant (e.g. \"the second male child voice\"). Only positive integers (i.e. excluding zero) are allowed. The value 1 refers to the first of all matching voices.",
                    "type": "value",
                    "value": "<integer>"
                },
                {
                    "name": "preserve",
                    "prose": "Indicates that the voice-family value gets inherited and used regardless of any potential language change within the content markup (see the section below about voice selection and language handling). This value behaves as inherit when applied to the root element. Note: Descendants of the element automatically inherit the preserve value, unless it is explicitly overridden by other voice-family values (e.g. name, gender, age).",
                    "type": "value",
                    "value": "preserve"
                }
            ],
            "styleDeclaration": ["voice-family", "voiceFamily"],
            "styleDeclarationProperty": "voiceFamily",
            "referenceValues": [
                "<generic-voice>],]* [<family-name>",
                "<generic-voice>]"
            ]
        },
        "voice-rate": {
            "name": "voice-rate",
            "value": "[normal | x-slow | slow | medium | fast | x-fast] || <percentage [0,∞]>",
            "initial": "normal",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "refer to default value",
            "computedValue": "a keyword value, and optionally also a percentage relative to the keyword (if not 100%)",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "normal",
                    "prose": "Represents the default rate produced by the speech synthesizer for the currently active voice. This is processor-specific and depends on the language and dialect, and on the \"personality\" of the voice.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "x-slow",
                    "prose": "A sequence of monotonically non-decreasing speaking rates that are implementation- and voice-specific. For example, typical values for the English language are (in words per minute) x-slow = 80, slow = 120, medium = between 180 and 200, fast = 500.",
                    "type": "value",
                    "value": "x-slow"
                },
                {
                    "name": "slow",
                    "prose": "A sequence of monotonically non-decreasing speaking rates that are implementation- and voice-specific. For example, typical values for the English language are (in words per minute) x-slow = 80, slow = 120, medium = between 180 and 200, fast = 500.",
                    "type": "value",
                    "value": "slow"
                },
                {
                    "name": "medium",
                    "prose": "A sequence of monotonically non-decreasing speaking rates that are implementation- and voice-specific. For example, typical values for the English language are (in words per minute) x-slow = 80, slow = 120, medium = between 180 and 200, fast = 500.",
                    "type": "value",
                    "value": "medium"
                },
                {
                    "name": "fast",
                    "prose": "A sequence of monotonically non-decreasing speaking rates that are implementation- and voice-specific. For example, typical values for the English language are (in words per minute) x-slow = 80, slow = 120, medium = between 180 and 200, fast = 500.",
                    "type": "value",
                    "value": "fast"
                },
                {
                    "name": "x-fast",
                    "prose": "A sequence of monotonically non-decreasing speaking rates that are implementation- and voice-specific. For example, typical values for the English language are (in words per minute) x-slow = 80, slow = 120, medium = between 180 and 200, fast = 500.",
                    "type": "value",
                    "value": "x-fast"
                },
                {
                    "name": "<percentage [0,∞]>",
                    "prose": "Only non-negative percentage values are allowed. This represents a change relative to the given keyword value (see enumeration above), or to the default value for the root element, or otherwise to the inherited speaking rate (which may itself be a combination of a keyword value and of a percentage, in which case percentages are combined multiplicatively). For example, 50% means that the speaking rate gets multiplied by 0.5 (half the value). Percentages above 100% result in faster speaking rates (relative to the base keyword), whereas percentages below 100% result in slower speaking rates.",
                    "type": "value",
                    "value": "<percentage [0,∞]>"
                }
            ],
            "styleDeclaration": ["voice-rate", "voiceRate"],
            "styleDeclarationProperty": "voiceRate",
            "referenceValues": ["<percentage [0,∞]>"]
        },
        "voice-pitch": {
            "name": "voice-pitch",
            "value": "<frequency> && absolute | [[x-low | low | medium | high | x-high] || [<frequency> | <semitones> | <percentage>]]",
            "initial": "medium",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "refer to inherited value",
            "computedValue": "one of the predefined pitch keywords if only the keyword is specified by itself, otherwise an absolute frequency calculated by converting the keyword value (if any) to a fixed frequency based on the current voice-family and by applying the specified relative offset (if any)",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "<frequency>",
                    "prose": "A value in frequency units (Hertz or kiloHertz, e.g. 100Hz, +2kHz). Values are restricted to positive numbers when the absolute keyword is specified. Otherwise (when the absolute keyword is not specified), a negative value represents a decrement, and a positive value represents an increment, relative to the inherited value. For example, 2kHz is a positive offset (strictly equivalent to +2kHz), and +2kHz absolute is an absolute frequency (strictly equivalent to 2kHz absolute).",
                    "type": "value",
                    "value": "<frequency>"
                },
                {
                    "name": "absolute",
                    "prose": "If specified, this keyword indicates that the specified frequency represents an absolute value. If a negative frequency is specified, the computed frequency will be zero.",
                    "type": "value",
                    "value": "absolute"
                },
                {
                    "name": "<semitones>",
                    "prose": "Specifies a relative change (decrement or increment) to the inherited value. The syntax of <semitones> allowed values is a dimension with the unit identifier st (semitones). A semitone interval corresponds to the step between each note on an equal temperament chromatic scale. A semitone can therefore be quantified as the difference between two consecutive pitch frequencies on such scale. The ratio between two consecutive frequencies separated by exactly one semitone is the twelfth root of two (approximately 11011/10393, which equals exactly 1.0594631). As a result, the value in Hertz corresponding to a semitone offset is relative to the initial frequency the offset is applied to. (In other words, a semitone doesn’t correspond to a fixed numerical value in Hertz.)",
                    "type": "value",
                    "value": "<semitones>"
                },
                {
                    "name": "<semitones>",
                    "type": "type"
                },
                {
                    "name": "<percentage>",
                    "prose": "Positive and negative percentage values are allowed, to represent an increment or decrement (respectively) relative to the inherited value. Computed values are calculated by adding (or subtracting) the specified fraction of the inherited value, to (from) the inherited value. For example, 50% (which is equivalent to +50%) with a inherited value of 200Hz results in 200 + (200*0.5) = 300Hz. Conversely, -50% results in 200-(200*0.5) = 100Hz.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "x-low",
                    "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
                    "type": "value",
                    "value": "x-low"
                },
                {
                    "name": "low",
                    "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
                    "type": "value",
                    "value": "low"
                },
                {
                    "name": "medium",
                    "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
                    "type": "value",
                    "value": "medium"
                },
                {
                    "name": "high",
                    "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
                    "type": "value",
                    "value": "high"
                },
                {
                    "name": "x-high",
                    "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
                    "type": "value",
                    "value": "x-high"
                }
            ],
            "styleDeclaration": ["voice-pitch", "voicePitch"],
            "styleDeclarationProperty": "voicePitch",
            "referenceValues": [
                "<frequency> && absolute",
                "<semitones>",
                "<percentage>]]"
            ]
        },
        "voice-range": {
            "name": "voice-range",
            "value": "<frequency> && absolute | [[x-low | low | medium | high | x-high] || [<frequency> | <semitones> | <percentage>]]",
            "initial": "medium",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "refer to inherited value",
            "computedValue": "one of the predefined pitch keywords if only the keyword is specified by itself, otherwise an absolute frequency calculated by converting the keyword value (if any) to a fixed frequency based on the current voice-family and by applying the specified relative offset (if any)",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "absolute",
                    "prose": "If specified, this keyword indicates that the specified frequency represents an absolute value. If a negative frequency is specified, the computed frequency will be zero.",
                    "type": "value",
                    "value": "absolute"
                },
                {
                    "name": "<semitones>",
                    "prose": "Specifies a relative change (decrement or increment) to the inherited value as a semitone.",
                    "type": "value",
                    "value": "<semitones>"
                },
                {
                    "name": "<percentage>",
                    "prose": "Positive and negative percentage values represent an increment or decrement (respectively) relative to the inherited value. Computed values are calculated by adding (or subtracting) the specified fraction of the inherited value, to (from) the inherited value. For example, 50% (which is equivalent to +50%) with a inherited value of 200Hz results in 200 + (200*0.5) = 300Hz. Conversely, -50% results in 200-(200*0.5) = 100Hz.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "x-low",
                    "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
                    "type": "value",
                    "value": "x-low"
                },
                {
                    "name": "low",
                    "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
                    "type": "value",
                    "value": "low"
                },
                {
                    "name": "medium",
                    "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
                    "type": "value",
                    "value": "medium"
                },
                {
                    "name": "high",
                    "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
                    "type": "value",
                    "value": "high"
                },
                {
                    "name": "x-high",
                    "prose": "A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.",
                    "type": "value",
                    "value": "x-high"
                }
            ],
            "styleDeclaration": ["voice-range", "voiceRange"],
            "styleDeclarationProperty": "voiceRange",
            "referenceValues": [
                "<frequency> && absolute",
                "<semitones>",
                "<percentage>]]"
            ]
        },
        "voice-stress": {
            "name": "voice-stress",
            "value": "normal | strong | moderate | none | reduced",
            "initial": "normal",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "normal",
                    "prose": "Represents the default emphasis produced by the speech synthesizer.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "none",
                    "prose": "Prevents the synthesizer from emphasizing text it would normally emphasize.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "moderate",
                    "prose": "These values are monotonically non-decreasing in strength. Their application results in more emphasis than what the speech synthesizer would normally produce (i.e. more than the value corresponding to normal).",
                    "type": "value",
                    "value": "moderate"
                },
                {
                    "name": "strong",
                    "prose": "These values are monotonically non-decreasing in strength. Their application results in more emphasis than what the speech synthesizer would normally produce (i.e. more than the value corresponding to normal).",
                    "type": "value",
                    "value": "strong"
                },
                {
                    "name": "reduced",
                    "prose": "Effectively the opposite of emphasizing a word.",
                    "type": "value",
                    "value": "reduced"
                }
            ],
            "styleDeclaration": ["voice-stress", "voiceStress"],
            "styleDeclarationProperty": "voiceStress",
            "referenceValues": []
        },
        "voice-duration": {
            "name": "voice-duration",
            "value": "auto | <time [0s,∞]>",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "auto",
                    "prose": "Resolves to a used value corresponding to the duration of the speech synthesis when using the inherited voice-rate.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<time [0s,∞]>",
                    "prose": "Specifies a value in absolute time units (seconds and milliseconds, e.g. \"+3s\", \"250ms\"). Only non-negative values are allowed.",
                    "type": "value",
                    "value": "<time [0s,∞]>"
                }
            ],
            "styleDeclaration": ["voice-duration", "voiceDuration"],
            "styleDeclarationProperty": "voiceDuration",
            "referenceValues": ["<time [0s,∞]>"]
        },
        "table-layout": {
            "name": "table-layout",
            "value": "auto | fixed",
            "initial": "auto",
            "appliesTo": "table grid boxes",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["table-layout", "tableLayout"],
            "styleDeclarationProperty": "tableLayout",
            "referenceValues": []
        },
        "border-collapse": {
            "name": "border-collapse",
            "value": "separate | collapse",
            "initial": "separate",
            "appliesTo": "table grid boxes",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["border-collapse", "borderCollapse"],
            "styleDeclarationProperty": "borderCollapse",
            "referenceValues": []
        },
        "border-spacing": {
            "name": "border-spacing",
            "value": "<length>{1,2}",
            "initial": "0px 0px",
            "appliesTo": "table grid boxes when border-collapse is separate",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "two absolute lengths",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "styleDeclaration": ["border-spacing", "borderSpacing"],
            "styleDeclarationProperty": "borderSpacing",
            "referenceValues": ["<length>{1,2}"]
        },
        "caption-side": {
            "name": "caption-side",
            "value": "top | bottom",
            "initial": "top",
            "appliesTo": "table-caption boxes",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["caption-side", "captionSide"],
            "styleDeclarationProperty": "captionSide",
            "referenceValues": []
        },
        "empty-cells": {
            "name": "empty-cells",
            "value": "show | hide",
            "initial": "show",
            "appliesTo": "table-cell boxes",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["empty-cells", "emptyCells"],
            "styleDeclarationProperty": "emptyCells",
            "referenceValues": []
        },
        "text-transform": {
            "name": "text-transform",
            "newValues": "math-auto",
            "styleDeclaration": ["text-transform", "textTransform"],
            "styleDeclarationProperty": "textTransform",
            "referenceValues": []
        },
        "word-boundary-detection": {
            "name": "word-boundary-detection",
            "value": "normal | manual | auto(<lang>)",
            "initial": "normal",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "as specified (However, see special provision for unsupported <lang>)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "manual",
                    "prose": "Linguistic analysis is not used in any language or writing system to determine line wrapping opportunities not indicated by the markup or characters of the element. The user agent must not insert virtual word boundaries. Typographic character units with class SA in [UAX14] must be treated as if they had class AL (i.e. assuming word-break: normal and a value of line-break other than anywhere, there is no soft wrap opportunity between pairs of such characters). Authors using this value for Southeast Asian languages are expected to manually indicate word boundaries, for instance using wbr or U+200B. Otherwise, there will be no soft wrap opportunity and the text may overflow.",
                    "type": "value",
                    "value": "manual"
                },
                {
                    "name": "normal",
                    "prose": "The user agent must not insert virtual word boundaries, except within runs of characters belonging to Southeast Asian languages, where content analysis must be performed to determine where to insert virtual word boundaries. As with manual, typographic character units with class SA in [UAX14] must be treated as if they had class AL; however, the user agent must additionally analyse the content of a run of such characters and insert virtual word boundaries where appropriate. Within the constraints set by this specification, the specific algorithm used is UA-dependent. As various languages can be written in scripts which use the characters with class SA, if the content language is known, the user agent should use this information to tailor its analysis. In order to avoid unexpected overflow, if the user agent is unable to perform this analysis for any subset of the characters with class SA—for example due to lacking a dictionary for certain languages—there must be a soft wrap opportunity between pairs of typographic letter units in that subset.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "auto()",
                    "value": "auto()",
                    "type": "value"
                },
                {
                    "name": "<lang>",
                    "prose": "<lang> must be a valid CSS <ident> or <string>. It represents an IETF BCP 47 language range (see [BCP47]). If the UA does not support word-boundary detection for all languages represented by the specified range, that specified value is invalid (and will cause the declaration to be ignored).",
                    "type": "type"
                }
            ],
            "styleDeclaration": [
                "word-boundary-detection",
                "wordBoundaryDetection"
            ],
            "styleDeclarationProperty": "wordBoundaryDetection",
            "referenceValues": []
        },
        "word-boundary-expansion": {
            "name": "word-boundary-expansion",
            "value": "none | space | ideographic-space",
            "initial": "none",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "This property has no effect.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "space",
                    "prose": "Instances of U+200B ZERO WIDTH SPACE within the child text of this element are replaced by U+0020 SPACE.",
                    "type": "value",
                    "value": "space"
                },
                {
                    "name": "ideographic-space",
                    "prose": "Instances of U+200B ZERO WIDTH SPACE within the child text of this element are replaced by U+3000 IDEOGRAPHIC SPACE.",
                    "type": "value",
                    "value": "ideographic-space"
                }
            ],
            "styleDeclaration": [
                "word-boundary-expansion",
                "wordBoundaryExpansion"
            ],
            "styleDeclarationProperty": "wordBoundaryExpansion",
            "referenceValues": []
        },
        "white-space": {
            "name": "white-space",
            "value": "normal | pre | nowrap | pre-wrap | break-spaces | pre-line",
            "initial": "normal",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "n/a",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "This value directs user agents to collapse sequences of white space into a single character (or in some cases, no character). Lines may wrap at allowed soft wrap opportunities, as determined by the line-breaking rules in effect, in order to minimize inline-axis overflow.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "pre",
                    "prose": "This value prevents user agents from collapsing sequences of white space. Segment breaks such as line feeds are preserved as forced line breaks. Lines only break at forced line breaks; content that does not fit within the block container overflows it.",
                    "type": "value",
                    "value": "pre"
                },
                {
                    "name": "nowrap",
                    "prose": "Like normal, this value collapses white space; but like pre, it does not allow wrapping.",
                    "type": "value",
                    "value": "nowrap"
                },
                {
                    "name": "pre-wrap",
                    "prose": "Like pre, this value preserves white space; but like normal, it allows wrapping.",
                    "type": "value",
                    "value": "pre-wrap"
                },
                {
                    "name": "break-spaces",
                    "prose": "The behavior is identical to that of pre-wrap, except that: Any sequence of preserved white space or other space separators always takes up space, including at the end of the line. A line breaking opportunity exists after every preserved white space character and after every other space separator (including between adjacent spaces).",
                    "type": "value",
                    "value": "break-spaces"
                },
                {
                    "name": "pre-line",
                    "prose": "Like normal, this value collapses consecutive white space characters and allows wrapping, but it preserves segment breaks in the source as forced line breaks.",
                    "type": "value",
                    "value": "pre-line"
                }
            ],
            "styleDeclaration": ["white-space", "whiteSpace"],
            "styleDeclarationProperty": "whiteSpace",
            "referenceValues": []
        },
        "white-space-collapse": {
            "name": "white-space-collapse",
            "value": "collapse | discard | preserve | preserve-breaks | preserve-spaces | break-spaces",
            "initial": "collapse",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "collapse",
                    "prose": "This value directs user agents to collapse sequences of white space into a single character (or in some cases, no character).",
                    "type": "value",
                    "value": "collapse"
                },
                {
                    "name": "preserve",
                    "prose": "This value prevents user agents from collapsing sequences of white space. Segment breaks such as line feeds are preserved as forced line breaks.",
                    "type": "value",
                    "value": "preserve"
                },
                {
                    "name": "preserve-breaks",
                    "prose": "Like collapse, this value collapses consecutive white space characters, but preserves segment breaks in the source as forced line breaks.",
                    "type": "value",
                    "value": "preserve-breaks"
                },
                {
                    "name": "preserve-spaces",
                    "prose": "This value prevents user agents from collapsing sequences of white space, and converts tabs and segment breaks to spaces. (This value is intended to represent the behavior of xml:space=\"preserve\" in SVG.)",
                    "type": "value",
                    "value": "preserve-spaces"
                },
                {
                    "name": "break-spaces",
                    "prose": "The behavior is identical to that of preserve, except that: Any sequence of preserved white space or other space separators always takes up space, including at the end of the line. A line breaking opportunity exists after every preserved white space character and after every other space separator (including between adjacent spaces).",
                    "type": "value",
                    "value": "break-spaces"
                },
                {
                    "name": "discard",
                    "prose": "This value directs user agents to “discard” all white space in the element. Does this preserve line break opportunities or no? Do we need a distinct \"hide\" value? If it preserves line break opportunities, maybe it should be replaced with a word-boundary-expansion value?",
                    "type": "value",
                    "value": "discard"
                }
            ],
            "styleDeclaration": ["white-space-collapse", "whiteSpaceCollapse"],
            "styleDeclarationProperty": "whiteSpaceCollapse",
            "referenceValues": []
        },
        "text-space-trim": {
            "name": "text-space-trim",
            "value": "none | discard-inner || discard-before || discard-after",
            "initial": "none",
            "appliesTo": "inline boxes and block containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "discard-inner",
                    "prose": "For block containers this value directs UAs to discard all whitespace at the beginning of the element up to and including the last segment break before the first non-white-space character in the element as well as to discard all white space at the end of the element starting with the first segment break after the last non-white-space character in the element. For other elements this value directs UAs to discard all whitespace at the beginning and end of the element.",
                    "type": "value",
                    "value": "discard-inner"
                },
                {
                    "name": "discard-before",
                    "prose": "This value directs the UA to collapse all collapsible whitespace immediately before the start of the element.",
                    "type": "value",
                    "value": "discard-before"
                },
                {
                    "name": "discard-after",
                    "prose": "This value directs the UA to collapse all collapsible whitespace immediately after the end of the element.",
                    "type": "value",
                    "value": "discard-after"
                }
            ],
            "styleDeclaration": ["text-space-trim", "textSpaceTrim"],
            "styleDeclarationProperty": "textSpaceTrim",
            "referenceValues": []
        },
        "tab-size": {
            "name": "tab-size",
            "value": "<number> | <length>",
            "initial": "8",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "the specified number or absolute length",
            "canonicalOrder": "n/a",
            "animationType": "by computed value type",
            "styleDeclaration": ["tab-size", "tabSize"],
            "styleDeclarationProperty": "tabSize",
            "referenceValues": ["<number>", "<length>"]
        },
        "word-break": {
            "name": "word-break",
            "value": "normal | keep-all | break-all | break-word",
            "initial": "normal",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "n/a",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "Words break according to their customary rules, as described above. Korean, which commonly exhibits two different behaviors, allows breaks between any two consecutive Hangul/Hanja. For Ethiopic, which also exhibits two different behaviors, such breaks within words are not allowed.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "break-all",
                    "prose": "Breaking is allowed within “words”: specifically, in addition to soft wrap opportunities allowed for normal, any typographic letter units (and any typographic character units resolving to the NU (“numeric”), AL (“alphabetic”), or SA (“Southeast Asian”) line breaking classes [UAX14]) are instead treated as ID (“ideographic characters”) for the purpose of line-breaking. Hyphenation is not applied.",
                    "type": "value",
                    "value": "break-all"
                },
                {
                    "name": "keep-all",
                    "prose": "Breaking is forbidden within “words”: implicit soft wrap opportunities between typographic letter units (or other typographic character units belonging to the NU, AL, AI, or ID Unicode line breaking classes [UAX14]) are suppressed, i.e. breaks are prohibited between pairs of such characters (regardless of line-break settings other than anywhere) except where opportunities exist due to dictionary-based breaking. Otherwise this option is equivalent to normal. In this style, sequences of CJK characters do not break.",
                    "type": "value",
                    "value": "keep-all"
                },
                {
                    "name": "break-word",
                    "prose": "For compatibility with legacy content, the word-break property also supports a deprecated break-word keyword. When specified, this has the same effect as word-break: normal and overflow-wrap: anywhere, regardless of the actual value of the overflow-wrap property.",
                    "type": "value",
                    "value": "break-word"
                }
            ],
            "styleDeclaration": ["word-break", "wordBreak"],
            "styleDeclarationProperty": "wordBreak",
            "referenceValues": []
        },
        "line-break": {
            "name": "line-break",
            "value": "auto | loose | normal | strict | anywhere",
            "initial": "auto",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "n/a",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "The UA determines the set of line-breaking restrictions to use, and it may vary the restrictions based on the length of the line; e.g., use a less restrictive set of line-break rules for short lines.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "loose",
                    "prose": "Breaks text using the least restrictive set of line-breaking rules. Typically used for short lines, such as in newspapers.",
                    "type": "value",
                    "value": "loose"
                },
                {
                    "name": "normal",
                    "prose": "Breaks text using the most common set of line-breaking rules.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "strict",
                    "prose": "Breaks text using the most stringent set of line-breaking rules.",
                    "type": "value",
                    "value": "strict"
                },
                {
                    "name": "anywhere",
                    "prose": "There is a soft wrap opportunity around every typographic character unit, including around any punctuation character or preserved white spaces, or in the middle of words, disregarding any prohibition against line breaks, even those introduced by characters with the GL, WJ, or ZWJ line breaking classes or mandated by the word-break property. [UAX14] The different wrapping opportunities must not be prioritized. Hyphenation is not applied.",
                    "type": "value",
                    "value": "anywhere"
                }
            ],
            "styleDeclaration": ["line-break", "lineBreak"],
            "styleDeclarationProperty": "lineBreak",
            "referenceValues": []
        },
        "hyphens": {
            "name": "hyphens",
            "value": "none | manual | auto",
            "initial": "manual",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "n/a",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "Words are not hyphenated, even if characters inside the word explicitly define hyphenation opportunities.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "manual",
                    "prose": "Words are only hyphenated where there are characters inside the word that explicitly suggest hyphenation opportunities. The UA must use the appropriate language-specific hyphenation character(s) and should apply any appropriate spelling changes just as for automatic hyphenation at the same point. In Unicode, U+00AD is a conditional \"soft hyphen\" and U+2010 is an unconditional hyphen. Unicode Standard Annex #14 describes the role of soft hyphens in Unicode line breaking. [UAX14] In HTML, &shy; represents the soft hyphen character, which suggests a hyphenation opportunity. ex&shy;ample",
                    "type": "value",
                    "value": "manual"
                },
                {
                    "name": "auto",
                    "prose": "Words may be broken at hyphenation opportunities determined automatically by a language-appropriate hyphenation resource in addition to those indicated explicitly by a conditional hyphen. Automatic hyphenation opportunities elsewhere within a word must be ignored if the word contains a conditional hyphen (&shy; or U+00AD SOFT HYPHEN), in favor of the conditional hyphen(s). However, if, even after breaking at such opportunities, a portion of that word is still too long to fit on one line, an automatic hyphenation opportunity may be used.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["hyphens"],
            "styleDeclarationProperty": "hyphens",
            "referenceValues": []
        },
        "hyphenate-character": {
            "name": "hyphenate-character",
            "value": "auto | <string>",
            "initial": "auto",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Specifies that the user agent should find an appropriate string based on the content language’s typographic conventions, possibly from the same source as the hyphenation dictionary.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<string>",
                    "prose": "Specifies the string that appears at the hyphenation break when hyphenating. (The position of this string is not affected: the UA must insert the string according to the typographic conventions of the content language, defaulting to immediately before the hyphenation break.) The UA may truncate the used value to a limited number of typographic character units; it must not truncate only part of a typographic character unit.",
                    "type": "value",
                    "value": "<string>"
                }
            ],
            "styleDeclaration": ["hyphenate-character", "hyphenateCharacter"],
            "styleDeclarationProperty": "hyphenateCharacter",
            "referenceValues": ["<string>"]
        },
        "hyphenate-limit-zone": {
            "name": "hyphenate-limit-zone",
            "value": "<length-percentage>",
            "initial": "0",
            "appliesTo": "block containers",
            "inherited": "yes",
            "percentages": "refers to length of the line box",
            "computedValue": "computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["hyphenate-limit-zone", "hyphenateLimitZone"],
            "styleDeclarationProperty": "hyphenateLimitZone",
            "referenceValues": ["<length-percentage>"]
        },
        "hyphenate-limit-chars": {
            "name": "hyphenate-limit-chars",
            "value": "[ auto | <integer> ]{1,3}",
            "initial": "auto",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "three values, each either the auto keyword or an integer",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "auto",
                    "prose": "If three values are specified, the first value is the required minimum for the total characters in a word, the second value is the minimum for characters before the hyphenation point, and the third value is the minimum for characters after the hyphenation point. If the third value is missing, it is the same as the second. If the second value is missing, then it is auto. The auto value means that the UA chooses a value that adapts to the current layout.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": [
                "hyphenate-limit-chars",
                "hyphenateLimitChars"
            ],
            "styleDeclarationProperty": "hyphenateLimitChars",
            "referenceValues": ["<integer> ]{1,3}"]
        },
        "hyphenate-limit-lines": {
            "name": "hyphenate-limit-lines",
            "value": "no-limit | <integer>",
            "initial": "no-limit",
            "appliesTo": "block containers",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword or integer",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "none",
                    "prose": "No restrictions imposed.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "always",
                    "prose": "The last full line of the element, or the last line before any column, page, or spread break inside the element should not be hyphenated.",
                    "type": "value",
                    "value": "always"
                },
                {
                    "name": "column",
                    "prose": "The last line before any column, page, or spread break inside the element should not be hyphenated.",
                    "type": "value",
                    "value": "column"
                },
                {
                    "name": "page",
                    "prose": "The last line before page or spread break inside the element should not be hyphenated.",
                    "type": "value",
                    "value": "page"
                },
                {
                    "name": "spread",
                    "prose": "The last line before any spread break inside the element should not be hyphenated.",
                    "type": "value",
                    "value": "spread"
                }
            ],
            "styleDeclaration": [
                "hyphenate-limit-lines",
                "hyphenateLimitLines"
            ],
            "styleDeclarationProperty": "hyphenateLimitLines",
            "referenceValues": ["<integer>"]
        },
        "hyphenate-limit-last": {
            "name": "hyphenate-limit-last",
            "value": "none | always | column | page | spread",
            "initial": "none",
            "appliesTo": "block containers",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["hyphenate-limit-last", "hyphenateLimitLast"],
            "styleDeclarationProperty": "hyphenateLimitLast",
            "referenceValues": []
        },
        "overflow-wrap": {
            "name": "overflow-wrap",
            "value": "normal | break-word | anywhere",
            "initial": "normal",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "n/a",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "Lines may break only at allowed break points. However, the restrictions introduced by word-break: keep-all may be relaxed to match word-break: normal if there are no otherwise-acceptable break points in the line.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "anywhere",
                    "prose": "An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line. Shaping characters are still shaped as if the word were not broken, and grapheme clusters must stay together as one unit. No hyphenation character is inserted at the break point. Soft wrap opportunities introduced by anywhere are considered when calculating min-content intrinsic sizes.",
                    "type": "value",
                    "value": "anywhere"
                },
                {
                    "name": "break-word",
                    "prose": "As for anywhere except that soft wrap opportunities introduced by break-word are not considered when calculating min-content intrinsic sizes.",
                    "type": "value",
                    "value": "break-word"
                }
            ],
            "styleDeclaration": ["overflow-wrap", "overflowWrap"],
            "styleDeclarationProperty": "overflowWrap",
            "referenceValues": []
        },
        "word-wrap": {
            "name": "word-wrap",
            "value": "normal | break-word | anywhere",
            "initial": "normal",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "n/a",
            "animationType": "discrete",
            "styleDeclaration": ["word-wrap", "wordWrap"],
            "styleDeclarationProperty": "wordWrap",
            "referenceValues": []
        },
        "text-wrap": {
            "name": "text-wrap",
            "value": "wrap | nowrap | balance | stable | pretty",
            "initial": "wrap",
            "appliesTo": "text and block containers",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "wrap",
                    "prose": "Inline-level content may break across lines at allowed soft wrap opportunities, as determined by the line-breaking rules in effect in order to minimize inline-axis overflow. The exact algorithm is UA-defined. The algorithm may consider multiple lines when making break decisions. The UA may bias for speed over best layout. The UA must not attempt to even out all lines (including the last) as for balance. This value selects the UA’s preferred (or most Web-compatible) wrapping algorithm.",
                    "type": "value",
                    "value": "wrap"
                },
                {
                    "name": "nowrap",
                    "prose": "Inline-level content does not break across lines; content that does not fit within the block container overflows it.",
                    "type": "value",
                    "value": "nowrap"
                },
                {
                    "name": "balance",
                    "prose": "Same as wrap for inline boxes. For block containers that establish an inline formatting context, line breaks are chosen to balance the remaining (empty) space in each line box, if better balance than wrap is possible. This must not change the number of line boxes the block would contain if text-wrap were set to wrap. The remaining space to consider is that which remains after placing floats and inline content, but before any adjustments due to text justification. Line boxes are balanced when the standard deviation from the average inline-size of the remaining space in each line box is reduced over the block (including lines that end in a forced break). The exact algorithm is UA-defined. UAs may treat this value as wrap if there are more than ten lines to balance.",
                    "type": "value",
                    "value": "balance"
                },
                {
                    "name": "stable",
                    "prose": "When applied to a block container that establishes an inline formatting context, specifies that content on subsequent lines should not be considered when making break decisions so that when editing text any content before the cursor remains stable; otherwise equivalent to wrap,",
                    "type": "value",
                    "value": "stable"
                },
                {
                    "name": "pretty",
                    "prose": "When applied to a block container that establishes an inline formatting context, specifies the UA should bias for better layout over speed, and is expected to consider multiple lines, when making break decisions. Otherwise equivalent to wrap,",
                    "type": "value",
                    "value": "pretty"
                }
            ],
            "styleDeclaration": ["text-wrap", "textWrap"],
            "styleDeclarationProperty": "textWrap",
            "referenceValues": []
        },
        "wrap-before": {
            "name": "wrap-before",
            "value": "auto | avoid | avoid-line | avoid-flex | line | flex",
            "initial": "auto",
            "appliesTo": "inline-level boxes and flex items",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Lines may break at allowed break points before and after the box, as determined by the line-breaking rules in effect.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "avoid",
                    "prose": "Line breaking is suppressed immediately before/after the box: the UA may only break there if there are no other valid break points in the line. If the text breaks, line-breaking restrictions are honored as for auto.",
                    "type": "value",
                    "value": "avoid"
                },
                {
                    "name": "avoid-line",
                    "prose": "Same as avoid, but only for line breaks.",
                    "type": "value",
                    "value": "avoid-line"
                },
                {
                    "name": "avoid-flex",
                    "prose": "Same as avoid, but only for flex line breaks.",
                    "type": "value",
                    "value": "avoid-flex"
                },
                {
                    "name": "line",
                    "prose": "Force a line break immediately before/after the box if the box is an inline-level box.",
                    "type": "value",
                    "value": "line"
                },
                {
                    "name": "flex",
                    "prose": "Force a flex line break immediately before/after the box if the box is a flex item in a multi-line flex container.",
                    "type": "value",
                    "value": "flex"
                }
            ],
            "styleDeclaration": ["wrap-before", "wrapBefore"],
            "styleDeclarationProperty": "wrapBefore",
            "referenceValues": []
        },
        "wrap-after": {
            "name": "wrap-after",
            "value": "auto | avoid | avoid-line | avoid-flex | line | flex",
            "initial": "auto",
            "appliesTo": "inline-level boxes and flex items",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Lines may break at allowed break points before and after the box, as determined by the line-breaking rules in effect.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "avoid",
                    "prose": "Line breaking is suppressed immediately before/after the box: the UA may only break there if there are no other valid break points in the line. If the text breaks, line-breaking restrictions are honored as for auto.",
                    "type": "value",
                    "value": "avoid"
                },
                {
                    "name": "avoid-line",
                    "prose": "Same as avoid, but only for line breaks.",
                    "type": "value",
                    "value": "avoid-line"
                },
                {
                    "name": "avoid-flex",
                    "prose": "Same as avoid, but only for flex line breaks.",
                    "type": "value",
                    "value": "avoid-flex"
                },
                {
                    "name": "line",
                    "prose": "Force a line break immediately before/after the box if the box is an inline-level box.",
                    "type": "value",
                    "value": "line"
                },
                {
                    "name": "flex",
                    "prose": "Force a flex line break immediately before/after the box if the box is a flex item in a multi-line flex container.",
                    "type": "value",
                    "value": "flex"
                }
            ],
            "styleDeclaration": ["wrap-after", "wrapAfter"],
            "styleDeclarationProperty": "wrapAfter",
            "referenceValues": []
        },
        "wrap-inside": {
            "name": "wrap-inside",
            "value": "auto | avoid",
            "initial": "auto",
            "appliesTo": "inline boxes",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Lines may break at allowed break points within the box, as determined by the line-breaking rules in effect.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "avoid",
                    "prose": "Line breaking is suppressed within the box: the UA may only break within the box if there are no other valid break points in the line. If the text breaks, line-breaking restrictions are honored as for auto. If boxes with avoid are nested and the UA must break within these boxes, a break in an outer box must be used before a break within an inner box may be used.",
                    "type": "value",
                    "value": "avoid"
                }
            ],
            "styleDeclaration": ["wrap-inside", "wrapInside"],
            "styleDeclarationProperty": "wrapInside",
            "referenceValues": []
        },
        "text-align": {
            "name": "text-align",
            "value": "start | end | left | right | center | justify | match-parent | justify-all",
            "initial": "start",
            "appliesTo": "block containers",
            "inherited": "yes",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "discrete",
            "canonicalOrder": "n/a",
            "values": [
                {
                    "name": "start",
                    "prose": "Inline-level content is aligned to the start edge of the line box.",
                    "type": "value",
                    "value": "start"
                },
                {
                    "name": "end",
                    "prose": "Inline-level content is aligned to the end edge of the line box.",
                    "type": "value",
                    "value": "end"
                },
                {
                    "name": "left",
                    "prose": "Inline-level content is aligned to the line-left edge of the line box. (In vertical writing modes, this can be either the physical top or bottom, depending on writing-mode.) [CSS-WRITING-MODES-4]",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "right",
                    "prose": "Inline-level content is aligned to the line-right edge of the line box. (In vertical writing modes, this can be either the physical top or bottom, depending on writing-mode.) [CSS-WRITING-MODES-4]",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "center",
                    "prose": "Inline-level content is centered within the line box.",
                    "type": "value",
                    "value": "center"
                },
                {
                    "name": "justify",
                    "prose": "Text is justified according to the method specified by the text-justify property, in order to exactly fill the line box. Unless otherwise specified by text-align-last, the last line before a forced break or the end of the block is start-aligned.",
                    "type": "value",
                    "value": "justify"
                },
                {
                    "name": "justify-all",
                    "prose": "Sets both text-align-all and text-align-last to justify, forcing the last line to justify as well.",
                    "type": "value",
                    "value": "justify-all"
                },
                {
                    "name": "match-parent",
                    "prose": "This value behaves the same as inherit (computes to its parent’s computed value) except that an inherited value of start or end is interpreted against the parent’s direction value and results in a computed value of either left or right. Computes to start when specified on the root element. When specified on the text-align shorthand, sets both text-align-all and text-align-last to match-parent.",
                    "type": "value",
                    "value": "match-parent"
                }
            ],
            "styleDeclaration": ["text-align", "textAlign"],
            "styleDeclarationProperty": "textAlign",
            "referenceValues": []
        },
        "text-align-all": {
            "name": "text-align-all",
            "value": "start | end | left | right | center | justify | match-parent",
            "initial": "start",
            "appliesTo": "block containers",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "keyword as specified, except for match-parent which computes as defined above",
            "canonicalOrder": "n/a",
            "animationType": "discrete",
            "styleDeclaration": ["text-align-all", "textAlignAll"],
            "styleDeclarationProperty": "textAlignAll",
            "referenceValues": []
        },
        "text-align-last": {
            "name": "text-align-last",
            "value": "auto | start | end | left | right | center | justify | match-parent",
            "initial": "auto",
            "appliesTo": "block containers",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "n/a",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "If auto is specified, content on the affected line is aligned per text-align-all unless text-align-all is set to justify, in which case it is start-aligned. All other values are interpreted as described for text-align.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["text-align-last", "textAlignLast"],
            "styleDeclarationProperty": "textAlignLast",
            "referenceValues": []
        },
        "text-justify": {
            "name": "text-justify",
            "value": "auto | none | inter-word | inter-character",
            "initial": "auto",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword (except for the distribute legacy value)",
            "canonicalOrder": "n/a",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "The UA determines the justification algorithm to follow, based on a balance between performance and adequate presentation quality. Since justification rules vary by writing system and language, UAs should, where possible, use a justification algorithm appropriate to the text. For example, the UA could use by default a justification method that is a simple universal compromise for all writing systems—such as primarily expanding word separators and between CJK typographic letter units along with secondarily expanding between Southeast Asian typographic letter units. Then, in cases where the content language of the paragraph is known, it could choose a more language-tailored justification behavior e.g. following the Requirements for Japanese Text Layout for Japanese [JLREQ], using cursive elongation for Arabic, using inter-word for German, etc. An example of cursively-justified Arabic text, rendered by Tasmeem. Like English, Arabic can be justified by adjusting the spacing between words, but in most styles it can also be justified by calligraphically elongating or compressing the letterforms themselves. In this example, the upper text is extended to fill the line by the use of elongated (kashida) forms and swash forms, while the bottom line is compressed slightly by using a stacked combination for the characters between ت and م. By employing traditional calligraphic techniques, a typesetter can justify the line while preserving flow and color, providing a very high quality justification effect. However, this is by its nature a very script-specific effect. Mixed-script text with text-justify: auto: this interpretation uses a universal-compromise justification method, expanding at spaces as well as between CJK and Southeast Asian letters. This effectively uses inter-word + inter-ideograph spacing for lines that have word-separators and/or CJK characters and falls back to inter-cluster behavior for lines that don’t or for which the space stretches too far.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "none",
                    "prose": "Justification is disabled: there are no justification opportunities within the text. Mixed-script text with text-justify: none",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "inter-word",
                    "prose": "Justification adjusts spacing at word separators only (effectively varying the used word-spacing on the line). This behavior is typical for languages that separate words using spaces, like English or Korean. Mixed-script text with text-justify: inter-word",
                    "type": "value",
                    "value": "inter-word"
                },
                {
                    "name": "inter-character",
                    "prose": "Justification adjusts spacing between each pair of adjacent typographic character units (effectively varying the used letter-spacing on the line). This value is sometimes used in East Asian systems such as Japanese. Mixed-script text with text-justify: inter-character For legacy reasons, UAs must also support the alternate keyword distribute which must compute to inter-character, thus having the exact same meaning and behavior. UAs may treat this as a legacy value alias.",
                    "type": "value",
                    "value": "inter-character"
                },
                {
                    "name": "distribute",
                    "prose": "For legacy reasons, UAs must also support the alternate keyword distribute which must compute to inter-character, thus having the exact same meaning and behavior. UAs may treat this as a legacy value alias.",
                    "type": "value",
                    "value": "distribute"
                }
            ],
            "styleDeclaration": ["text-justify", "textJustify"],
            "styleDeclarationProperty": "textJustify",
            "referenceValues": []
        },
        "text-group-align": {
            "name": "text-group-align",
            "value": "none | start | end | left | right | center",
            "initial": "none",
            "appliesTo": "block containers",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "Text alignment happens normally: group alignment is not performed.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "start",
                    "prose": "Inline-level content is group-aligned to the inline start side, by padding the inline end side of each line box.",
                    "type": "value",
                    "value": "start"
                },
                {
                    "name": "end",
                    "prose": "Inline-level content is group-aligned to the inline end side, by padding the inline start side of each line box.",
                    "type": "value",
                    "value": "end"
                },
                {
                    "name": "left",
                    "prose": "Inline-level content is group-aligned to the line-left side, by padding the line-right side of each line box.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "right",
                    "prose": "Inline-level content is group-aligned to the line-right side, by padding the line-left side of each line box.",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "center",
                    "prose": "Inline-level content is group-aligned to the center, by padding both sides of each line box, half the spacing to each side.",
                    "type": "value",
                    "value": "center"
                }
            ],
            "styleDeclaration": ["text-group-align", "textGroupAlign"],
            "styleDeclarationProperty": "textGroupAlign",
            "referenceValues": []
        },
        "word-spacing": {
            "name": "word-spacing",
            "value": "normal | <length>",
            "initial": "normal",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "an absolute length",
            "canonicalOrder": "n/a",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "normal",
                    "prose": "No additional spacing is applied. Computes to zero.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "<length>",
                    "prose": "Specifies extra spacing in addition to the intrinsic inter-word spacing defined by the font.",
                    "type": "value",
                    "value": "<length>"
                }
            ],
            "styleDeclaration": ["word-spacing", "wordSpacing"],
            "styleDeclarationProperty": "wordSpacing",
            "referenceValues": ["<length>"]
        },
        "letter-spacing": {
            "name": "letter-spacing",
            "value": "normal | <length>",
            "initial": "normal",
            "appliesTo": "inline boxes and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "an absolute length",
            "canonicalOrder": "n/a",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "normal",
                    "prose": "No additional spacing is applied. Computes to zero.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "<length>",
                    "prose": "Specifies additional spacing between typographic character units. Values may be negative, but there may be implementation-dependent limits.",
                    "type": "value",
                    "value": "<length>"
                }
            ],
            "styleDeclaration": ["letter-spacing", "letterSpacing"],
            "styleDeclarationProperty": "letterSpacing",
            "referenceValues": ["<length>"]
        },
        "line-padding": {
            "name": "line-padding",
            "value": "<length>",
            "initial": "0",
            "appliesTo": "inline boxes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["line-padding", "linePadding"],
            "styleDeclarationProperty": "linePadding",
            "referenceValues": ["<length>"]
        },
        "text-autospace": {
            "name": "text-autospace",
            "value": "normal | <autospace> | auto",
            "initial": "normal",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "normal",
                    "prose": "Same behavior as ideograph-alpha ideograph-numeric.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "no-autospace",
                    "prose": "No automatic space is inserted.",
                    "type": "value",
                    "value": "no-autospace"
                },
                {
                    "name": "insert",
                    "prose": "The specified spacing is automatically inserted if there are no space characters of any kind (Unicode general category Z) already there. If neither insert nor replace are specified, the behavior is the same as insert.",
                    "type": "value",
                    "value": "insert"
                },
                {
                    "name": "replace",
                    "prose": "The specified spacing is automatically inserted even if there is already a space (U+0020) at that point; additionally, the space (U+0020) is removed. Other types of space characters (Unicode general category Z) suppress automatic spacing, as for insert.",
                    "type": "value",
                    "value": "replace"
                },
                {
                    "name": "ideograph-alpha",
                    "prose": "Creates extra spacing between runs of ideographs and non-ideographic letters, see § 8.4.1 Inter-script Spacing.",
                    "type": "value",
                    "value": "ideograph-alpha"
                },
                {
                    "name": "ideograph-numeric",
                    "prose": "Creates extra spacing between runs of ideographs and non-ideographic numerals, see § 8.4.1 Inter-script Spacing.",
                    "type": "value",
                    "value": "ideograph-numeric"
                },
                {
                    "name": "punctuation",
                    "prose": "Creates extra non-breaking spacing around punctuation as required by language-specific typographic conventions. In this level, if the element’s content language is French, narrow no-break space (U+202F) and no-break space (U+00A0) is inserted where required by French typographic guidelines. Otherwise this value has no effect. However future specifications may add automatic spacing behavior for other languages.",
                    "type": "value",
                    "value": "punctuation"
                },
                {
                    "name": "auto",
                    "prose": "The user agent chooses a set of typographically high quality spacing values. Different user agents running on different platforms may pick different values.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["text-autospace", "textAutospace"],
            "styleDeclarationProperty": "textAutospace",
            "referenceValues": ["<autospace>"]
        },
        "text-spacing-trim": {
            "name": "text-spacing-trim",
            "value": "<spacing-trim> | auto",
            "initial": "space-first",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "space-all",
                    "prose": "All fullwidth punctuation characters are set with full-width glyphs (spaced).",
                    "type": "value",
                    "value": "space-all"
                },
                {
                    "name": "trim-auto",
                    "prose": "Set fullwidth opening punctuation with half-width glyphs (flush) at the start of each line; set fullwidth closing punctuation with half-width glyphs (flush) at the end of each line; and collapse spacing between punctuation glyphs as described below.",
                    "type": "value",
                    "value": "trim-auto"
                },
                {
                    "name": "space-first",
                    "prose": "Set fullwidth opening punctuation with full-width glyphs (spaced) on the first line the block container. Otherwise as trim-auto (unless allow-end is also specified).",
                    "type": "value",
                    "value": "space-first"
                },
                {
                    "name": "allow-end",
                    "prose": "Set fullwidth closing punctuation with half-width glyphs (flush) at the end of each line if it does not otherwise fit prior to justification, else set the punctuation with full-width glyphs. Otherwise as trim-auto (unless space-first is also specified).",
                    "type": "value",
                    "value": "allow-end"
                },
                {
                    "name": "auto",
                    "prose": "The user agent chooses a set of typographically high quality spacing values. Different user agents running on different platforms may pick different values. Do we need auto? It would be weird for the author to choose platform-dependent behavior at the start of the first line, and it should otherwise use trim-auto.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["text-spacing-trim", "textSpacingTrim"],
            "styleDeclarationProperty": "textSpacingTrim",
            "referenceValues": ["<spacing-trim>"]
        },
        "text-spacing": {
            "name": "text-spacing",
            "value": "normal | none | auto | <autospace> || <spacing-trim>",
            "initial": "see individual properties",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword(s)",
            "animationType": "discrete",
            "canonicalOrder": "per grammar",
            "values": [
                {
                    "name": "normal",
                    "prose": "Specifies the baseline behavior, setting each sub-property to its initial value. Equivalent to space-first ideograph-alpha ideograph-numeric.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "none",
                    "prose": "Turns off all text-spacing features: sets text-spacing-trim to space-all and text-autospace to no-autospace.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "auto",
                    "prose": "Sets both text-spacing-trim and text-autospace to auto.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<spacing-trim>",
                    "prose": "Sets text-spacing-trim to the specified value. If no <autospace> value is given, text-autospace is set to its initial value.",
                    "type": "value",
                    "value": "<spacing-trim>"
                },
                {
                    "name": "<autospace>",
                    "prose": "Sets text-autospace to the specified value. If no <spacing-trim> value is given, text-spacing-trim is set to its initial value.",
                    "type": "value",
                    "value": "<autospace>"
                }
            ],
            "styleDeclaration": ["text-spacing", "textSpacing"],
            "styleDeclarationProperty": "textSpacing",
            "referenceValues": ["<autospace>", "<spacing-trim>"]
        },
        "text-indent": {
            "name": "text-indent",
            "value": "[ <length-percentage> ] && hanging? && each-line?",
            "initial": "0",
            "appliesTo": "block containers",
            "inherited": "yes",
            "percentages": "refers to block container’s own inline-axis inner size",
            "computedValue": "computed <length-percentage> value, plus any specified keywords",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "<length>",
                    "prose": "Gives the amount of the indent as an absolute length.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "Gives the amount of the indent as a percentage of the block container’s own logical width. Percentages must be treated as 0 for the purpose of calculating intrinsic size contributions, but are always resolved normally when performing layout.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "each-line",
                    "prose": "Indentation affects the first line of each block container and each line after a forced line break (but not lines after a soft wrap break).",
                    "type": "value",
                    "value": "each-line"
                },
                {
                    "name": "hanging",
                    "prose": "Inverts which lines are affected.",
                    "type": "value",
                    "value": "hanging"
                }
            ],
            "styleDeclaration": ["text-indent", "textIndent"],
            "styleDeclarationProperty": "textIndent",
            "referenceValues": []
        },
        "hanging-punctuation": {
            "name": "hanging-punctuation",
            "value": "none | [ first || [ force-end | allow-end ] || last ]",
            "initial": "none",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "No punctuation character is made to hang.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "first",
                    "prose": "An opening bracket or quote at the start of the first formatted line of an element hangs. This applies to all characters in the Unicode categories Ps, Pf, Pi plus the ASCII quote marks U+0027 ' APOSTROPHE and U+0022 \" QUOTATION MARK.",
                    "type": "value",
                    "value": "first"
                },
                {
                    "name": "last",
                    "prose": "A closing bracket or quote at the end of the last formatted line of an element hangs. This applies to all characters in the Unicode categories Pe, Pf, Pi plus the ASCII quote marks U+0027 ' APOSTROPHE and U+0022 \" QUOTATION MARK.",
                    "type": "value",
                    "value": "last"
                },
                {
                    "name": "force-end",
                    "prose": "A stop or comma at the end of a line hangs.",
                    "type": "value",
                    "value": "force-end"
                },
                {
                    "name": "allow-end",
                    "prose": "A stop or comma at the end of a line conditionally hangs.",
                    "type": "value",
                    "value": "allow-end"
                }
            ],
            "styleDeclaration": ["hanging-punctuation", "hangingPunctuation"],
            "styleDeclarationProperty": "hangingPunctuation",
            "referenceValues": []
        },
        "text-decoration-line": {
            "name": "text-decoration-line",
            "value": "none | [ underline || overline || line-through || blink ]",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no (but see prose, above)",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "Neither produces nor inhibits text decoration.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "underline",
                    "prose": "Each line of text is underlined.",
                    "type": "value",
                    "value": "underline"
                },
                {
                    "name": "overline",
                    "prose": "Each line of text has a line over it (i.e. on the opposite side from an underline).",
                    "type": "value",
                    "value": "overline"
                },
                {
                    "name": "line-through",
                    "prose": "Each line of text has a line through the middle.",
                    "type": "value",
                    "value": "line-through"
                },
                {
                    "name": "blink",
                    "prose": "The text blinks (alternates between visible and invisible). Conforming user agents may simply not blink the text. Note that not blinking the text is one technique to satisfy checkpoint 3.3 of WAI-UAAG. This value is deprecated in favor of Animations [CSS-ANIMATIONS-1].",
                    "type": "value",
                    "value": "blink"
                }
            ],
            "styleDeclaration": ["text-decoration-line", "textDecorationLine"],
            "styleDeclarationProperty": "textDecorationLine",
            "referenceValues": []
        },
        "text-decoration-style": {
            "name": "text-decoration-style",
            "value": "solid | double | dotted | dashed | wavy",
            "initial": "solid",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": [
                "text-decoration-style",
                "textDecorationStyle"
            ],
            "styleDeclarationProperty": "textDecorationStyle",
            "referenceValues": []
        },
        "text-decoration-color": {
            "name": "text-decoration-color",
            "value": "<color>",
            "initial": "currentcolor",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "computed color",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": [
                "text-decoration-color",
                "textDecorationColor"
            ],
            "styleDeclarationProperty": "textDecorationColor",
            "referenceValues": ["<color>"]
        },
        "text-decoration-thickness": {
            "name": "text-decoration-thickness",
            "value": "auto | from-font | <length> | <percentage>",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword or absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "auto",
                    "prose": "The UA chooses an appropriate thickness for text decoration lines; see below.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "from-font",
                    "prose": "If the first available font has metrics indicating a preferred underline width, use that width, otherwise behaves as auto.",
                    "type": "value",
                    "value": "from-font"
                },
                {
                    "name": "<length>",
                    "prose": "Specifies the thickness of text decoration lines as a fixed length. The UA should round the actual value to the nearest integer device pixel, and ensure it is at least one device pixel.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "Specifies the thickness of text decoration lines as a percentage of 1em. The UA should round the actual value to the nearest integer device pixel, and ensure it is at least one device pixel.",
                    "type": "value",
                    "value": "<percentage>"
                }
            ],
            "styleDeclaration": [
                "text-decoration-thickness",
                "textDecorationThickness"
            ],
            "styleDeclarationProperty": "textDecorationThickness",
            "referenceValues": ["<length>", "<percentage>"]
        },
        "text-decoration": {
            "name": "text-decoration",
            "value": "<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'>",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["text-decoration", "textDecoration"],
            "styleDeclarationProperty": "textDecoration",
            "referenceValues": [
                "<'text-decoration-line'>",
                "<'text-decoration-style'>",
                "<'text-decoration-color'>"
            ]
        },
        "text-underline-position": {
            "name": "text-underline-position",
            "value": "auto | [ under || [ left | right ] ]",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "The user agent may use any algorithm to determine the underline’s position; however it must be placed at or under the alphabetic baseline. A typical “alphabetic” underline is positioned just below the alphabetic baseline",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "under",
                    "prose": "The underline is positioned under the element’s text content. In this case the underline usually does not cross the descenders. (This is sometimes called “accounting” underline.) This value can be combined with left or right if a particular side is preferred in vertical typographic modes. text-underline-position: under Because text-underline-position inherits, and is not reset by the text-decoration shorthand, the following example switches the document to use under underlining, which can be more appropriate for writing systems with long, complicated descenders. It is also often useful for mathematical or chemical texts that use many subscripts. :root { text-underline-position: under; }",
                    "type": "value",
                    "value": "under"
                },
                {
                    "name": "left",
                    "prose": "In vertical typographic modes, the underline is aligned as for under, except it is always aligned to the left edge of the text. If this causes the underline to be drawn on the \"over\" side of the text, then an overline also switches sides and is drawn on the \"under\" side.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "right",
                    "prose": "In vertical typographic modes, the underline is aligned as for under, except it is always aligned to the right edge of the text. If this causes the underline to be drawn on the \"over\" side of the text, then an overline also switches sides and is drawn on the \"under\" side.",
                    "type": "value",
                    "value": "right"
                }
            ],
            "styleDeclaration": [
                "text-underline-position",
                "textUnderlinePosition"
            ],
            "styleDeclarationProperty": "textUnderlinePosition",
            "referenceValues": []
        },
        "text-underline-offset": {
            "name": "text-underline-offset",
            "value": "auto | <length> | <percentage>",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword or absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "auto",
                    "prose": "The UA chooses an appropriate offset for underlines. However, this offset must be zero if the computed value of text-underline-position is from-font and the UA was able to extract an appropriate metric to use from the font.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<length>",
                    "prose": "Specifies the offset of underlines as a fixed length.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "<percentage>",
                    "prose": "Specifies the offset of underlines as a percentage of 1em.",
                    "type": "value",
                    "value": "<percentage>"
                }
            ],
            "styleDeclaration": [
                "text-underline-offset",
                "textUnderlineOffset"
            ],
            "styleDeclarationProperty": "textUnderlineOffset",
            "referenceValues": ["<length>", "<percentage>"]
        },
        "text-decoration-trim": {
            "name": "text-decoration-trim",
            "value": "<length>{1,2} | auto",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword or absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "styleDeclaration": ["text-decoration-trim", "textDecorationTrim"],
            "styleDeclarationProperty": "textDecorationTrim",
            "referenceValues": ["<length>{1,2}"]
        },
        "text-decoration-skip": {
            "name": "text-decoration-skip",
            "value": "none | auto",
            "initial": "See individual properties",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "See individual properties",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "The text-decoration-skip property and its sub-properties (text-decoration-skip-self, text-decoration-skip-box, text-decoration-skip-inset, text-decoration-skip-spaces, text-decoration-skip-ink) control interruptions in line decorations for which the element or an ancestor is the decorating box. The none value sets all sub-properties to none, and the auto value sets all sub-properties to their initial values.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "auto",
                    "prose": "The text-decoration-skip property and its sub-properties (text-decoration-skip-self, text-decoration-skip-box, text-decoration-skip-inset, text-decoration-skip-spaces, text-decoration-skip-ink) control interruptions in line decorations for which the element or an ancestor is the decorating box. The none value sets all sub-properties to none, and the auto value sets all sub-properties to their initial values.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["text-decoration-skip", "textDecorationSkip"],
            "styleDeclarationProperty": "textDecorationSkip",
            "referenceValues": []
        },
        "text-decoration-skip-self": {
            "name": "text-decoration-skip-self",
            "value": "auto | skip-all | [ skip-underline || skip-overline || skip-line-through ] | no-skip",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword(s) except for skip-all, see below",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "Skip this element (its entire margin box) if it is an atomic inline (such as an image or inline-block).",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "skip-all",
                    "prose": "Skip this element (its entire margin box) unconditionally. Don’t draw across it, don’t propagate to it.",
                    "type": "value",
                    "value": "skip-all"
                },
                {
                    "name": "skip-underline",
                    "prose": "Skip this element (its entire margin box) unconditionally when drawing ancestor underlines.",
                    "type": "value",
                    "value": "skip-underline"
                },
                {
                    "name": "skip-overline",
                    "prose": "Skip this element (its entire margin box) unconditionally when drawing ancestor overlines.",
                    "type": "value",
                    "value": "skip-overline"
                },
                {
                    "name": "skip-line-through",
                    "prose": "Skip this element (its entire margin box) unconditionally when drawing ancestor line-throughs.",
                    "type": "value",
                    "value": "skip-line-through"
                },
                {
                    "name": "no-skip",
                    "prose": "Line decorations from ancestor decorating boxes are applied to this box unconditionally: drawn across it as if it were text if it is an atomic inline, or propagated to it according to the usual rules if it is not.",
                    "type": "value",
                    "value": "no-skip"
                }
            ],
            "styleDeclaration": [
                "text-decoration-skip-self",
                "textDecorationSkipSelf"
            ],
            "styleDeclarationProperty": "textDecorationSkipSelf",
            "referenceValues": []
        },
        "text-decoration-skip-box": {
            "name": "text-decoration-skip-box",
            "value": "none | all",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "Skip nothing: line decorations from ancestor decorating boxes are drawn from margin edge to margin edge.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "all",
                    "prose": "When drawing text decoration lines applied to an ancestor decorating box, skip over the box’s own margin, border, and padding areas and only draw line decorations within its content area. This value only has an effect for decorations imposed by an ancestor; a decorating box never draws over its own box decoration.",
                    "type": "value",
                    "value": "all"
                }
            ],
            "styleDeclaration": [
                "text-decoration-skip-box",
                "textDecorationSkipBox"
            ],
            "styleDeclarationProperty": "textDecorationSkipBox",
            "referenceValues": []
        },
        "text-decoration-skip-spaces": {
            "name": "text-decoration-skip-spaces",
            "value": "none | all | [ start || end ]",
            "initial": "start end",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "Spacers are not skipped. They are decorated just like any other character.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "all",
                    "prose": "Skip all spacers and all word separators plus any adjacent letter-spacing or word-spacing.",
                    "type": "value",
                    "value": "all"
                },
                {
                    "name": "start",
                    "prose": "Skip all spacers, plus any adjacent letter-spacing or word-spacing, when located at the start of the line.",
                    "type": "value",
                    "value": "start"
                },
                {
                    "name": "end",
                    "prose": "Skip all spacers, plus any adjacent letter-spacing or word-spacing, when located at the end of the line.",
                    "type": "value",
                    "value": "end"
                }
            ],
            "styleDeclaration": [
                "text-decoration-skip-spaces",
                "textDecorationSkipSpaces"
            ],
            "styleDeclarationProperty": "textDecorationSkipSpaces",
            "referenceValues": []
        },
        "text-decoration-skip-ink": {
            "name": "text-decoration-skip-ink",
            "value": "auto | none | all",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "UAs may interrupt underlines and overlines where the line would cross glyph ink and to some distance to either side of the glyph outline. UAs should consider the script of the text (see note below) when determining whether to apply ink-skipping behavior to a given range of content.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "all",
                    "prose": "UAs must interrupt underlines and overlines where the line would cross glyph ink and to some distance to either side of the glyph outline.",
                    "type": "value",
                    "value": "all"
                },
                {
                    "name": "none",
                    "prose": "UA must draw continuous underlines and overlines, without interruptions when they cross over a glyph.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": [
                "text-decoration-skip-ink",
                "textDecorationSkipInk"
            ],
            "styleDeclarationProperty": "textDecorationSkipInk",
            "referenceValues": []
        },
        "text-emphasis-style": {
            "name": "text-emphasis-style",
            "value": "none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>",
            "initial": "none",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "the keyword none, a pair of keywords representing the shape and fill, or a string",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "No emphasis marks.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "filled",
                    "prose": "The shape is filled with solid color.",
                    "type": "value",
                    "value": "filled"
                },
                {
                    "name": "dot",
                    "prose": "Display small circles as marks. The filled dot is U+2022 '•', and the open dot is U+25E6 '◦'.",
                    "type": "value",
                    "value": "dot"
                },
                {
                    "name": "circle",
                    "prose": "Display large circles as marks. The filled circle is U+25CF '●', and the open circle is U+25CB '○'.",
                    "type": "value",
                    "value": "circle"
                },
                {
                    "name": "double-circle",
                    "prose": "Display double circles as marks. The filled double-circle is U+25C9 '◉', and the open double-circle is U+25CE '◎'.",
                    "type": "value",
                    "value": "double-circle"
                },
                {
                    "name": "triangle",
                    "prose": "Display triangles as marks. The filled triangle is U+25B2 '▲', and the open triangle is U+25B3 '△'.",
                    "type": "value",
                    "value": "triangle"
                },
                {
                    "name": "sesame",
                    "prose": "Display sesames as marks. The filled sesame is U+FE45 '﹅', and the open sesame is U+FE46 '﹆'.",
                    "type": "value",
                    "value": "sesame"
                },
                {
                    "name": "<string>",
                    "prose": "Display the given string as marks. Authors should not specify more than one character in <string>. The UA may truncate or ignore strings consisting of more than one grapheme cluster.",
                    "type": "value",
                    "value": "<string>"
                }
            ],
            "styleDeclaration": ["text-emphasis-style", "textEmphasisStyle"],
            "styleDeclarationProperty": "textEmphasisStyle",
            "referenceValues": ["<string>"]
        },
        "text-emphasis-color": {
            "name": "text-emphasis-color",
            "value": "<color>",
            "initial": "currentcolor",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "computed color",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "styleDeclaration": ["text-emphasis-color", "textEmphasisColor"],
            "styleDeclarationProperty": "textEmphasisColor",
            "referenceValues": ["<color>"]
        },
        "text-emphasis": {
            "name": "text-emphasis",
            "value": "<'text-emphasis-style'> || <'text-emphasis-color'>",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["text-emphasis", "textEmphasis"],
            "styleDeclarationProperty": "textEmphasis",
            "referenceValues": [
                "<'text-emphasis-style'>",
                "<'text-emphasis-color'>"
            ]
        },
        "text-emphasis-position": {
            "name": "text-emphasis-position",
            "value": "[ over | under ] && [ right | left ]?",
            "initial": "over right",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "over",
                    "prose": "Draw marks over the text in horizontal typographic modes.",
                    "type": "value",
                    "value": "over"
                },
                {
                    "name": "under",
                    "prose": "Draw marks under the text in horizontal typographic modes.",
                    "type": "value",
                    "value": "under"
                },
                {
                    "name": "right",
                    "prose": "Draw marks to the right of the text in vertical typographic modes.",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "left",
                    "prose": "Draw marks to the left of the text in vertical typographic modes.",
                    "type": "value",
                    "value": "left"
                }
            ],
            "styleDeclaration": [
                "text-emphasis-position",
                "textEmphasisPosition"
            ],
            "styleDeclarationProperty": "textEmphasisPosition",
            "referenceValues": []
        },
        "text-emphasis-skip": {
            "name": "text-emphasis-skip",
            "value": "spaces || punctuation || symbols || narrow",
            "initial": "spaces punctuation",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword(s)",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "spaces",
                    "prose": "Skip word separators or other characters belonging to the Unicode separator category (Z*). (But note that emphasis marks are drawn for a space that combines with any combining characters.)",
                    "type": "value",
                    "value": "spaces"
                },
                {
                    "name": "punctuation",
                    "prose": "Skip punctuation. Punctuation in this definition includes characters belonging to the Unicode P* category that are not defined as symbols (see below).",
                    "type": "value",
                    "value": "punctuation"
                },
                {
                    "name": "symbols",
                    "prose": "Skip symbols. Symbols in this definition includes all typographic character units belonging to the Unicode S* general category as well as any which are NFKD-equivalent [UAX15] to the following characters from the Unicode Po category: # U+0023 NUMBER SIGN % U+0025 PERCENT SIGN ‰ U+2030 PER MILLE SIGN ‱ U+2031 PER TEN THOUSAND SIGN ٪ U+066A ARABIC PERCENT SIGN ؉ U+0609 ARABIC-INDIC PER MILLE SIGN ؊ U+060A ARABIC-INDIC PER TEN THOUSAND SIGN & U+0026 AMPERSAND ⁊ U+204A TIRONIAN SIGN E[[ @ U+0040 COMMERCIAL AT § U+00A7 SECTION SIGN ¶ U+00B6 PILCROW SIGN ⁋ U+204B REVERSED PILCROW SIGN ⁓ U+2053 SWUNG DASH 〽️ U+303D PART ALTERNATION MARK",
                    "type": "value",
                    "value": "symbols"
                },
                {
                    "name": "narrow",
                    "prose": "Skip characters where the East_Asian_Width property [UAX11] of the Unicode database [UAX44] is not F (Fullwidth) or W (Wide).",
                    "type": "value",
                    "value": "narrow"
                }
            ],
            "styleDeclaration": ["text-emphasis-skip", "textEmphasisSkip"],
            "styleDeclarationProperty": "textEmphasisSkip",
            "referenceValues": []
        },
        "text-shadow": {
            "name": "text-shadow",
            "value": "none | [ <color>? && <length>{2,3} ]#",
            "initial": "none",
            "appliesTo": "text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "either the keyword none or a list, each item consisting of three absolute lengths plus a computed color",
            "canonicalOrder": "per grammar",
            "animationType": "as shadow list",
            "styleDeclaration": ["text-shadow", "textShadow"],
            "styleDeclarationProperty": "textShadow",
            "referenceValues": []
        },
        "translate": {
            "name": "translate",
            "value": "none | <length-percentage> [ <length-percentage> <length>? ]?",
            "initial": "none",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "relative to the width of the reference box (for the first value) or the height (for the second value)",
            "computedValue": "the keyword none or a pair of computed <length-percentage> values and an absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value, but see below for none",
            "values": [
                {
                    "name": "none",
                    "prose": "All three properties accept (and default to) the value none, which produces no transform at all. In particular, this value does not trigger the creation of a stacking context or containing block for all descendants, while all other values (including “identity” transforms like translate: 0px) create a stacking context and containing block for all descendants, per usual for transforms.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["translate"],
            "styleDeclarationProperty": "translate",
            "referenceValues": [
                "<length-percentage> [ <length-percentage> <length>? ]?"
            ]
        },
        "rotate": {
            "name": "rotate",
            "value": "none | <angle> | [ x | y | z | <number>{3} ] && <angle>",
            "initial": "none",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the keyword none, or an <angle> with an axis consisting of a list of three <number>s",
            "canonicalOrder": "per grammar",
            "animationType": "as SLERP, but see below for none",
            "values": [
                {
                    "name": "x",
                    "prose": "The axis can be specified with either the x, y, or z keywords, which specify a rotation around that axis, equivalent to the rotateX(), rotateY(), and rotateZ() transform functions. Alternately, the axis can be specified explicitly by giving three numbers representing the x, y, and z components of an origin-centered vector, equivalent to the rotate3d() function.",
                    "type": "value",
                    "value": "x"
                },
                {
                    "name": "y",
                    "prose": "The axis can be specified with either the x, y, or z keywords, which specify a rotation around that axis, equivalent to the rotateX(), rotateY(), and rotateZ() transform functions. Alternately, the axis can be specified explicitly by giving three numbers representing the x, y, and z components of an origin-centered vector, equivalent to the rotate3d() function.",
                    "type": "value",
                    "value": "y"
                },
                {
                    "name": "z",
                    "prose": "The axis can be specified with either the x, y, or z keywords, which specify a rotation around that axis, equivalent to the rotateX(), rotateY(), and rotateZ() transform functions. Alternately, the axis can be specified explicitly by giving three numbers representing the x, y, and z components of an origin-centered vector, equivalent to the rotate3d() function.",
                    "type": "value",
                    "value": "z"
                },
                {
                    "name": "none",
                    "prose": "All three properties accept (and default to) the value none, which produces no transform at all. In particular, this value does not trigger the creation of a stacking context or containing block for all descendants, while all other values (including “identity” transforms like translate: 0px) create a stacking context and containing block for all descendants, per usual for transforms.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["rotate"],
            "styleDeclarationProperty": "rotate",
            "referenceValues": ["<angle>", "<number>{3} ] && <angle>"]
        },
        "scale": {
            "name": "scale",
            "value": "none | [ <number> | <percentage> ]{1,3}",
            "initial": "none",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the keyword none, or a list of 3 <number>s",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value, but see below for none",
            "values": [
                {
                    "name": "none",
                    "prose": "All three properties accept (and default to) the value none, which produces no transform at all. In particular, this value does not trigger the creation of a stacking context or containing block for all descendants, while all other values (including “identity” transforms like translate: 0px) create a stacking context and containing block for all descendants, per usual for transforms.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["scale"],
            "styleDeclarationProperty": "scale",
            "referenceValues": ["<percentage> ]{1,3}"]
        },
        "transform-style": {
            "name": "transform-style",
            "value": "flat | preserve-3d",
            "initial": "flat",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "usedValue": "flat if a grouping property is present, specified keyword otherwise",
            "styleDeclaration": ["transform-style", "transformStyle"],
            "styleDeclarationProperty": "transformStyle",
            "referenceValues": []
        },
        "perspective": {
            "name": "perspective",
            "value": "none | <length [0,∞]>",
            "initial": "none",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "the keyword none or an absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "<length [0,∞]>",
                    "prose": "Distance to the center of projection. Verify that projection is the distance to the center of projection. As very small <length> values can produce bizarre rendering results and stress the numerical accuracy of transform calculations, values less than 1px must be treated as 1px for rendering purposes. (This clamping does not affect the underlying value, so perspective: 0; in a stylesheet will still serialize back as 0.)",
                    "type": "value",
                    "value": "<length [0,∞]>"
                },
                {
                    "name": "none",
                    "prose": "No perspective transform is applied. The effect is mathematically similar to an infinite <length> value. All objects appear to be flat on the canvas.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["perspective"],
            "styleDeclarationProperty": "perspective",
            "referenceValues": ["<length [0,∞]>"]
        },
        "perspective-origin": {
            "name": "perspective-origin",
            "value": "<position>",
            "initial": "50% 50%",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "refer to the size of the reference box",
            "computedValue": "see background-position",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "<percentage>",
                    "prose": "A percentage for the horizontal perspective offset is relative to the width of the reference box. A percentage for the vertical offset is relative to height of the reference box. The value for the horizontal and vertical offset represent an offset from the top left corner of the reference box.",
                    "type": "value",
                    "value": "<percentage>"
                },
                {
                    "name": "<length>",
                    "prose": "A length value gives a fixed length as the offset. The value for the horizontal and vertical offset represent an offset from the top left corner of the reference box.",
                    "type": "value",
                    "value": "<length>"
                },
                {
                    "name": "top",
                    "prose": "Computes to 0% for the vertical position if one or two values are given, otherwise specifies the top edge as the origin for the next offset.",
                    "type": "value",
                    "value": "top"
                },
                {
                    "name": "right",
                    "prose": "Computes to 100% for the horizontal position if one or two values are given, otherwise specifies the right edge as the origin for the next offset.",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "bottom",
                    "prose": "Computes to 100% for the vertical position if one or two values are given, otherwise specifies the bottom edge as the origin for the next offset.",
                    "type": "value",
                    "value": "bottom"
                },
                {
                    "name": "left",
                    "prose": "Computes to 0% for the horizontal position if one or two values are given, otherwise specifies the left edge as the origin for the next offset.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "center",
                    "prose": "Computes to 50% (left 50%) for the horizontal position if the horizontal position is not otherwise specified, or 50% (top 50%) for the vertical position if it is.",
                    "type": "value",
                    "value": "center"
                }
            ],
            "styleDeclaration": ["perspective-origin", "perspectiveOrigin"],
            "styleDeclarationProperty": "perspectiveOrigin",
            "referenceValues": ["<position>"]
        },
        "backface-visibility": {
            "name": "backface-visibility",
            "value": "visible | hidden",
            "initial": "visible",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["backface-visibility", "backfaceVisibility"],
            "styleDeclarationProperty": "backfaceVisibility",
            "referenceValues": []
        },
        "transform": {
            "name": "transform",
            "value": "none | <transform-list>",
            "initial": "none",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "refer to the size of reference box",
            "computedValue": "as specified, but with lengths made absolute",
            "canonicalOrder": "per grammar",
            "animationType": "transform list, see interpolation rules",
            "values": [
                {
                    "name": "matrix()",
                    "value": "matrix( <number>#{6} )",
                    "type": "function"
                },
                {
                    "name": "translate()",
                    "value": "translate( <length-percentage> , <length-percentage>? )",
                    "type": "function"
                },
                {
                    "name": "translateX()",
                    "value": "translateX( <length-percentage> )",
                    "type": "function"
                },
                {
                    "name": "translateY()",
                    "value": "translateY( <length-percentage> )",
                    "type": "function"
                },
                {
                    "name": "scale()",
                    "value": "scale( <number> , <number>? )",
                    "type": "function"
                },
                {
                    "name": "scaleX()",
                    "value": "scaleX( <number> )",
                    "type": "function"
                },
                {
                    "name": "scaleY()",
                    "value": "scaleY( <number> )",
                    "type": "function"
                },
                {
                    "name": "rotate()",
                    "value": "rotate( [ <angle> | <zero> ] )",
                    "type": "function"
                },
                {
                    "name": "skew()",
                    "value": "skew( [ <angle> | <zero> ] , [ <angle> | <zero> ]? )",
                    "type": "function"
                },
                {
                    "name": "skewX()",
                    "value": "skewX( [ <angle> | <zero> ] )",
                    "type": "function"
                },
                {
                    "name": "skewY()",
                    "value": "skewY( [ <angle> | <zero> ] )",
                    "type": "function"
                }
            ],
            "styleDeclaration": ["transform"],
            "styleDeclarationProperty": "transform",
            "referenceValues": ["<transform-list>"]
        },
        "transform-origin": {
            "name": "transform-origin",
            "value": "[ left | center | right | top | bottom | <length-percentage> ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ] <length>? | [[ center | left | right ] && [ center | top | bottom ]] <length>?",
            "initial": "50% 50%",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "refer to the size of reference box",
            "computedValue": "see background-position",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "top",
                    "prose": "Computes to 0% for the vertical position.",
                    "type": "value",
                    "value": "top"
                },
                {
                    "name": "right",
                    "prose": "Computes to 100% for the horizontal position.",
                    "type": "value",
                    "value": "right"
                },
                {
                    "name": "bottom",
                    "prose": "Computes to 100% for the vertical position.",
                    "type": "value",
                    "value": "bottom"
                },
                {
                    "name": "left",
                    "prose": "Computes to 0% for the horizontal position.",
                    "type": "value",
                    "value": "left"
                },
                {
                    "name": "center",
                    "prose": "Computes to 50% (left 50%) for the horizontal position if the horizontal position is not otherwise specified, or 50% (top 50%) for the vertical position if it is.",
                    "type": "value",
                    "value": "center"
                }
            ],
            "styleDeclaration": ["transform-origin", "transformOrigin"],
            "styleDeclarationProperty": "transformOrigin",
            "referenceValues": [
                "<length-percentage> ]",
                "<length-percentage> ] [ top",
                "<length-percentage> ] <length>?"
            ]
        },
        "transform-box": {
            "name": "transform-box",
            "value": "content-box | border-box | fill-box | stroke-box | view-box",
            "initial": "view-box",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "content-box",
                    "prose": "Uses the content box as reference box. The reference box of a table is the border box of its table wrapper box, not its table box.",
                    "type": "value",
                    "value": "content-box"
                },
                {
                    "name": "border-box",
                    "prose": "Uses the border box as reference box. The reference box of a table is the border box of its table wrapper box, not its table box.",
                    "type": "value",
                    "value": "border-box"
                },
                {
                    "name": "fill-box",
                    "prose": "Uses the object bounding box as reference box.",
                    "type": "value",
                    "value": "fill-box"
                },
                {
                    "name": "stroke-box",
                    "prose": "Uses the stroke bounding box as reference box.",
                    "type": "value",
                    "value": "stroke-box"
                },
                {
                    "name": "view-box",
                    "prose": "Uses the nearest SVG viewport as reference box. If a viewBox attribute is specified for the SVG viewport creating element: The reference box is positioned at the origin of the coordinate system established by the viewBox attribute. The dimension of the reference box is set to the width and height values of the viewBox attribute.",
                    "type": "value",
                    "value": "view-box"
                }
            ],
            "styleDeclaration": ["transform-box", "transformBox"],
            "styleDeclarationProperty": "transformBox",
            "referenceValues": []
        },
        "transition-property": {
            "name": "transition-property",
            "value": "none | <single-transition-property>#",
            "initial": "all",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "the keyword none else a list of identifiers",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "none",
                    "prose": "A value of none means that no property will transition. Otherwise, a list of properties to be transitioned, or the keyword all which indicates that all properties are to be transitioned, is given.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "all",
                    "prose": "A value of none means that no property will transition. Otherwise, a list of properties to be transitioned, or the keyword all which indicates that all properties are to be transitioned, is given.",
                    "type": "value",
                    "value": "all"
                }
            ],
            "styleDeclaration": ["transition-property", "transitionProperty"],
            "styleDeclarationProperty": "transitionProperty",
            "referenceValues": ["<single-transition-property>#"]
        },
        "transition-duration": {
            "name": "transition-duration",
            "value": "<time [0s,∞]>#",
            "initial": "0s",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a duration",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "styleDeclaration": ["transition-duration", "transitionDuration"],
            "styleDeclarationProperty": "transitionDuration",
            "referenceValues": ["<time [0s,∞]>#"]
        },
        "transition-timing-function": {
            "name": "transition-timing-function",
            "value": "<easing-function>#",
            "initial": "ease",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "styleDeclaration": [
                "transition-timing-function",
                "transitionTimingFunction"
            ],
            "styleDeclarationProperty": "transitionTimingFunction",
            "referenceValues": ["<easing-function>#"]
        },
        "transition-delay": {
            "name": "transition-delay",
            "value": "<time>#",
            "initial": "0s",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "list, each item a duration",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "styleDeclaration": ["transition-delay", "transitionDelay"],
            "styleDeclarationProperty": "transitionDelay",
            "referenceValues": ["<time>#"]
        },
        "transition": {
            "name": "transition",
            "value": "<single-transition>#",
            "initial": "see individual properties",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "animationType": "not animatable",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["transition"],
            "styleDeclarationProperty": "transition",
            "referenceValues": ["<single-transition>#"]
        },
        "outline": {
            "name": "outline",
            "value": "[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]",
            "initial": "see individual properties",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["outline"],
            "styleDeclarationProperty": "outline",
            "referenceValues": ["<'outline-style'>", "<'outline-width'> ]"]
        },
        "outline-width": {
            "name": "outline-width",
            "value": "<line-width>",
            "initial": "medium",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "absolute length, snapped as a border width; 0 if the outline style is none.",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "styleDeclaration": ["outline-width", "outlineWidth"],
            "styleDeclarationProperty": "outlineWidth",
            "referenceValues": ["<line-width>"]
        },
        "outline-style": {
            "name": "outline-style",
            "value": "auto | <outline-line-style>",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "styleDeclaration": ["outline-style", "outlineStyle"],
            "styleDeclarationProperty": "outlineStyle",
            "referenceValues": ["<outline-line-style>"]
        },
        "outline-color": {
            "name": "outline-color",
            "value": "[ <color> | <image-1D> ] | invert",
            "initial": "invert",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "The computed value for invert is invert. For <color> values, see CSS Color 4 § 14. Resolving <color> Values in [CSS-COLOR-4]. For <image-1D> values, see CSS Images 4 § 4 1D Image Values: the <image-1D> type and stripes() notation in [CSS-IMAGES-4].",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "invert",
                    "prose": "The outline-color property accepts all values of <border-color>, as well as the keyword invert. invert is expected to perform a color inversion on the pixels on the screen. This is a common trick to ensure the focus border is visible, regardless of color background.",
                    "type": "value",
                    "value": "invert"
                }
            ],
            "styleDeclaration": ["outline-color", "outlineColor"],
            "styleDeclarationProperty": "outlineColor",
            "referenceValues": ["<image-1D> ]"]
        },
        "outline-offset": {
            "name": "outline-offset",
            "value": "<length>",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "absolute length",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "styleDeclaration": ["outline-offset", "outlineOffset"],
            "styleDeclarationProperty": "outlineOffset",
            "referenceValues": ["<length>"]
        },
        "resize": {
            "name": "resize",
            "value": "none | both | horizontal | vertical | block | inline",
            "initial": "none",
            "appliesTo": "elements that are scroll containers and optionally replaced elements such as images, videos, and iframes",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["resize"],
            "styleDeclarationProperty": "resize",
            "referenceValues": []
        },
        "cursor": {
            "name": "cursor",
            "value": "[ [ <url> | <url-set> ] [<x> <y>]? ]#? [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | grab | grabbing | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out ]",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "as specified, except with any relative URLs converted to absolute",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "<url-set>",
                    "prose": "<url-set> is a limited version of image-set(), where only <url> and <url-set> can be used in the part of the <image-set-option> sub-production which would normally allow <image>.",
                    "type": "type"
                },
                {
                    "name": "auto",
                    "prose": "The UA determines the cursor to display based on the current context. Specifically, auto behaves as text over selectable text or editable elements, and default otherwise.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "default",
                    "prose": "The platform-dependent default cursor. Often rendered as an arrow.",
                    "type": "value",
                    "value": "default"
                },
                {
                    "name": "none",
                    "prose": "No cursor is rendered for the element.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "context-menu",
                    "prose": "A context menu is available for the object under the cursor. Often rendered as an arrow with a small menu-like graphic next to it.",
                    "type": "value",
                    "value": "context-menu"
                },
                {
                    "name": "help",
                    "prose": "Help is available for the object under the cursor. Often rendered as a question mark or a balloon.",
                    "type": "value",
                    "value": "help"
                },
                {
                    "name": "pointer",
                    "prose": "The cursor is a pointer that indicates a link. Often rendered as the backside of a hand with the index finger extended. Unless otherwise specified, UAs must apply cursor: pointer to hyperlinks for all supported document formats via the UA stylesheet, using a normal (i.e. not !important) declaration. Authors should use pointer on links and may use on other interactive elements.",
                    "type": "value",
                    "value": "pointer"
                },
                {
                    "name": "progress",
                    "prose": "A progress indicator. The program is performing some processing, but is different from wait in that the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",
                    "type": "value",
                    "value": "progress"
                },
                {
                    "name": "wait",
                    "prose": "Indicates that the program is busy and the user should wait. Often rendered as a watch or hourglass.",
                    "type": "value",
                    "value": "wait"
                },
                {
                    "name": "cell",
                    "prose": "Indicates that a cell or set of cells may be selected. Often rendered as a thick plus-sign with a dot in the middle.",
                    "type": "value",
                    "value": "cell"
                },
                {
                    "name": "crosshair",
                    "prose": "A simple crosshair (e.g., short line segments resembling a \"+\" sign). Often used to indicate a two dimensional bitmap selection mode.",
                    "type": "value",
                    "value": "crosshair"
                },
                {
                    "name": "text",
                    "prose": "Indicates text that may be selected. Often rendered as an I-beam. User agents must automatically display a vertical I-beam/cursor over elements with a horizontal writing mode, and a horizontal I-beam/cursor (e.g. same as the vertical-text keyword) over elements in a vertical writing mode. Additionally, user agents may take transforms (see [CSS-TRANSFORMS-1]) or other visual effects such as text on a path (See SVG 2 § 11.8 Text on a path), when choosing between the horizontal or vertical text cursor, and may display any angle of I-beam/cursor for text that is rendered at any particular angle.",
                    "type": "value",
                    "value": "text"
                },
                {
                    "name": "vertical-text",
                    "prose": "Indicates vertical-text that may be selected. Often rendered as a horizontal I-beam.",
                    "type": "value",
                    "value": "vertical-text"
                },
                {
                    "name": "alias",
                    "prose": "Indicates an alias of/shortcut to something is to be created. Often rendered as an arrow with a small curved arrow next to it.",
                    "type": "value",
                    "value": "alias"
                },
                {
                    "name": "copy",
                    "prose": "Indicates something is to be copied. Often rendered as an arrow with a small plus sign next to it.",
                    "type": "value",
                    "value": "copy"
                },
                {
                    "name": "move",
                    "prose": "Indicates something is to be moved.",
                    "type": "value",
                    "value": "move"
                },
                {
                    "name": "no-drop",
                    "prose": "Indicates that the dragged item cannot be dropped at the current cursor location. Often rendered as a hand or pointer with a small circle with a line through it.",
                    "type": "value",
                    "value": "no-drop"
                },
                {
                    "name": "not-allowed",
                    "prose": "Indicates that the requested action will not be carried out. Often rendered as a circle with a line through it.",
                    "type": "value",
                    "value": "not-allowed"
                },
                {
                    "name": "grab",
                    "prose": "Indicates that something can be grabbed (dragged to be moved). Often rendered as the backside of an open hand.",
                    "type": "value",
                    "value": "grab"
                },
                {
                    "name": "grabbing",
                    "prose": "Indicates that something is being grabbed (dragged to be moved). Often rendered as the backside of a hand with fingers closed mostly out of view.",
                    "type": "value",
                    "value": "grabbing"
                },
                {
                    "name": "e-resize",
                    "type": "value",
                    "value": "e-resize"
                },
                {
                    "name": "n-resize",
                    "type": "value",
                    "value": "n-resize"
                },
                {
                    "name": "ne-resize",
                    "type": "value",
                    "value": "ne-resize"
                },
                {
                    "name": "nw-resize",
                    "type": "value",
                    "value": "nw-resize"
                },
                {
                    "name": "s-resize",
                    "type": "value",
                    "value": "s-resize"
                },
                {
                    "name": "se-resize",
                    "type": "value",
                    "value": "se-resize"
                },
                {
                    "name": "sw-resize",
                    "type": "value",
                    "value": "sw-resize"
                },
                {
                    "name": "w-resize",
                    "type": "value",
                    "value": "w-resize"
                },
                {
                    "name": "ew-resize",
                    "type": "value",
                    "value": "ew-resize"
                },
                {
                    "name": "ns-resize",
                    "type": "value",
                    "value": "ns-resize"
                },
                {
                    "name": "nesw-resize",
                    "type": "value",
                    "value": "nesw-resize"
                },
                {
                    "name": "nwse-resize",
                    "type": "value",
                    "value": "nwse-resize"
                },
                {
                    "name": "col-resize",
                    "prose": "Indicates that the item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them.",
                    "type": "value",
                    "value": "col-resize"
                },
                {
                    "name": "row-resize",
                    "prose": "Indicates that the item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them.",
                    "type": "value",
                    "value": "row-resize"
                },
                {
                    "name": "all-scroll",
                    "prose": "Indicates that the something can be scrolled in any direction. Often rendered as arrows pointing up, down, left, and right with a dot in the middle.",
                    "type": "value",
                    "value": "all-scroll"
                },
                {
                    "name": "zoom-in",
                    "type": "value",
                    "value": "zoom-in"
                },
                {
                    "name": "zoom-out",
                    "type": "value",
                    "value": "zoom-out"
                }
            ],
            "styleDeclaration": ["cursor"],
            "styleDeclarationProperty": "cursor",
            "referenceValues": ["<url-set> ] [<x> <y>]? ]#? [ auto"]
        },
        "caret-color": {
            "name": "caret-color",
            "value": "auto | <color>",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "The computed value for auto is auto. For <color> values, see [[!CSS-COLOR-4#resolving-color-values]] in [CSS-COLOR-4].",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "styleDeclaration": ["caret-color", "caretColor"],
            "styleDeclarationProperty": "caretColor",
            "referenceValues": ["<color>"]
        },
        "caret-shape": {
            "name": "caret-shape",
            "value": "auto | bar | block | underscore",
            "initial": "auto",
            "appliesTo": "elements that accept input",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "values": [
                {
                    "name": "auto",
                    "prose": "The UA determines the shape of the caret. It should match platform conventions, and may be adjusted based on context. For example, if a UA switches between insert mode and overtype mode when the user presses the insert key on their keyboard, it may show a bar caret in insert mode, and a block caret in overtype mode.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "bar",
                    "prose": "The UA must render the text insertion caret as a thin bar placed at the insertion point. This means it is between, before, or after characters, not over them. It should be perpendicular to the inline progression direction, although UAs may render it slanted when inserting italic or oblique text.",
                    "type": "value",
                    "value": "bar"
                },
                {
                    "name": "block",
                    "prose": "The UA must render the text insertion caret as a rectangle overlapping the next visible character following the insertion point. If there is no visible character after the insertion point, the UA must render the caret after the last visible character. UAs may render it as a slanted rectangle when inserting italic or oblique text.",
                    "type": "value",
                    "value": "block"
                },
                {
                    "name": "underscore",
                    "prose": "The UA must render the text insertion caret as a thin line under (as defined in [CSS-WRITING-MODES-3] the next visible character following the insertion point. If there is no visible character after the insertion point, the UA must render the caret after the last visible character.",
                    "type": "value",
                    "value": "underscore"
                }
            ],
            "styleDeclaration": ["caret-shape", "caretShape"],
            "styleDeclarationProperty": "caretShape",
            "referenceValues": []
        },
        "caret": {
            "name": "caret",
            "value": "<'caret-color'> || <'caret-shape'>",
            "initial": "auto",
            "appliesTo": "elements that accept input",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["caret"],
            "styleDeclarationProperty": "caret",
            "referenceValues": ["<'caret-color'>", "<'caret-shape'>"]
        },
        "nav-up": {
            "name": "nav-up",
            "value": "auto | <id> [ current | root | <target-name> ]?",
            "initial": "auto",
            "appliesTo": "all enabled elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["nav-up", "navUp"],
            "styleDeclarationProperty": "navUp",
            "referenceValues": ["<id> [ current", "<target-name> ]?"]
        },
        "nav-right": {
            "name": "nav-right",
            "value": "auto | <id> [ current | root | <target-name> ]?",
            "initial": "auto",
            "appliesTo": "all enabled elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["nav-right", "navRight"],
            "styleDeclarationProperty": "navRight",
            "referenceValues": ["<id> [ current", "<target-name> ]?"]
        },
        "nav-down": {
            "name": "nav-down",
            "value": "auto | <id> [ current | root | <target-name> ]?",
            "initial": "auto",
            "appliesTo": "all enabled elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["nav-down", "navDown"],
            "styleDeclarationProperty": "navDown",
            "referenceValues": ["<id> [ current", "<target-name> ]?"]
        },
        "nav-left": {
            "name": "nav-left",
            "value": "auto | <id> [ current | root | <target-name> ]?",
            "initial": "auto",
            "appliesTo": "all enabled elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "styleDeclaration": ["nav-left", "navLeft"],
            "styleDeclarationProperty": "navLeft",
            "referenceValues": ["<id> [ current", "<target-name> ]?"]
        },
        "user-select": {
            "name": "user-select",
            "value": "auto | text | none | contain | all",
            "initial": "auto",
            "appliesTo": "all elements, and optionally to the ::before and ::after pseudo-elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "auto",
                    "prose": "The used value of auto is determined as follows: On the ::before and ::after pseudo-elements, the used value is none If the element is an editable element, the used value is contain Otherwise, if the used value of user-select on the parent of this element is all, the used value is all Otherwise, if the used value of user-select on the parent of this element is none, the used value is none Otherwise, the used value is text",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "text",
                    "prose": "The element imposes no constraint on the selection.",
                    "type": "value",
                    "value": "text"
                },
                {
                    "name": "none",
                    "prose": "The UA must not allow selections to be started in this element. A selection started outside of this element must not end in this element. If the user attempts to create such a selection, the UA must instead end the selection range at the element boundary. However, if this element has descendants on which the used value of user-select is not none, selections that start and end within these descendants are allowed. The UA must allow selections to extend across this element, and must exclude this element from such a selection. An exception is made for UAs which do not support multiple ranges per selection, and they may include this element. If the element has descendants on which the used value of user-select is not none, these descendants must be included in a selection extending across the element. This specification makes no normative requirement about the behavior of the clipboard. however, UAs are encouraged to keep the visual selection consistent with what would get copied to the clipboard when copying. Copying text that does not appear to be selected, or vice versa, is highly confusing to users. Attempting to start a selection in an element where user-select is none, such as by clicking in it or starting a drag in it, must not cause a pre-existing selection to become unselected or to be affected in any way. As user-select is a UI convenience mechanism, not a copy protection mechanism, the UA may provide an alternative way for the user to explicitly select the text even when user-select is none.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "contain",
                    "prose": "UAs must not allow a selection which is started in this element to be extended outside of this element. A selection started outside of this element must not end in this element. If the user attempts to create such a selection, the UA must instead end the selection range at the element boundary. The UA must allow selections to extend across this element, and such selections must include the content of the element.",
                    "type": "value",
                    "value": "contain"
                },
                {
                    "name": "all",
                    "prose": "The content of the element must be selected atomically: If a selection would contain part of the element, then the selection must contain the entire element including all its descendants. If the element is selected and the used value of user-select on its parent is all, then the parent must be included in the selection, recursively. If this element has descendants on which the used value of user-select is not all and if a selection is entirely contained in these descendants, then the selection is not extended to include this whole element.",
                    "type": "value",
                    "value": "all"
                }
            ],
            "styleDeclaration": ["user-select", "userSelect"],
            "styleDeclarationProperty": "userSelect",
            "referenceValues": []
        },
        "accent-color": {
            "name": "accent-color",
            "value": "auto | <color>",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "the keyword auto or a computed color",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "auto",
                    "prose": "Represents a UA-chosen color, which should match the accent color of the platform, if any.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<color>",
                    "prose": "Specifies the color to be used as the accent color.",
                    "type": "value",
                    "value": "<color>"
                }
            ],
            "styleDeclaration": ["accent-color", "accentColor"],
            "styleDeclarationProperty": "accentColor",
            "referenceValues": ["<color>"]
        },
        "appearance": {
            "name": "appearance",
            "value": "none | auto | <compat-auto> | <compat-special>",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "The element is rendered following the usual rules of CSS. Replaced elements other than widgets are not affected by this and remain replaced elements. Widgets must not have their native appearance, and instead must have their primitive appearance. See § 7.2.2 Effects of appearance on Decorative Aspects of Elements and § 7.2.3 Effects of appearance on Semantic Aspects of Elements for details.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "auto",
                    "prose": "Elements representing widgets should have the native appearance of that widget, if the properties that disable native appearance for widgets are not in effect. See § 7.2.1 Properties Disabling Native Appearance. The host language is responsible for defining which elements represent which widgets. Elements other than widgets must be rendered as for none.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<compat-auto>",
                    "value": "searchfield | textarea | push-button | slider-horizontal | checkbox | radio | square-button | menulist | listbox | meter | progress-bar | button",
                    "type": "type"
                },
                {
                    "name": "searchfield",
                    "type": "value",
                    "value": "searchfield"
                },
                {
                    "name": "textarea",
                    "type": "value",
                    "value": "textarea"
                },
                {
                    "name": "push-button",
                    "type": "value",
                    "value": "push-button"
                },
                {
                    "name": "slider-horizontal",
                    "type": "value",
                    "value": "slider-horizontal"
                },
                {
                    "name": "checkbox",
                    "type": "value",
                    "value": "checkbox"
                },
                {
                    "name": "radio",
                    "type": "value",
                    "value": "radio"
                },
                {
                    "name": "square-button",
                    "type": "value",
                    "value": "square-button"
                },
                {
                    "name": "menulist",
                    "type": "value",
                    "value": "menulist"
                },
                {
                    "name": "listbox",
                    "type": "value",
                    "value": "listbox"
                },
                {
                    "name": "meter",
                    "type": "value",
                    "value": "meter"
                },
                {
                    "name": "progress-bar",
                    "type": "value",
                    "value": "progress-bar"
                },
                {
                    "name": "button",
                    "type": "value",
                    "value": "button"
                },
                {
                    "name": "<compat-special>",
                    "value": "textfield | menulist-button",
                    "type": "type"
                },
                {
                    "name": "textfield",
                    "type": "value",
                    "value": "textfield"
                },
                {
                    "name": "menulist-button",
                    "type": "value",
                    "value": "menulist-button"
                }
            ],
            "styleDeclaration": ["appearance"],
            "styleDeclarationProperty": "appearance",
            "referenceValues": ["<compat-auto>", "<compat-special>"]
        },
        "input-security": {
            "name": "input-security",
            "value": "auto | none",
            "initial": "auto",
            "appliesTo": "sensitive text inputs",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "none",
                    "prose": "The UA must not obscure the text in the control, so that it can be read by the user.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "auto",
                    "prose": "The UA should obscure the text in the control, so that it cannot be read by the user.",
                    "type": "value",
                    "value": "auto"
                }
            ],
            "styleDeclaration": ["input-security", "inputSecurity"],
            "styleDeclarationProperty": "inputSecurity",
            "referenceValues": []
        },
        "-webkit-user-select": {
            "name": "-webkit-user-select",
            "styleDeclaration": [
                "-webkit-user-select",
                "WebkitUserSelect",
                "webkitUserSelect"
            ],
            "styleDeclarationProperty": "webkitUserSelect",
            "referenceValues": []
        },
        "-webkit-appearance": {
            "name": "-webkit-appearance",
            "styleDeclaration": [
                "-webkit-appearance",
                "WebkitAppearance",
                "webkitAppearance"
            ],
            "styleDeclarationProperty": "webkitAppearance",
            "referenceValues": []
        },
        "view-transition-name": {
            "name": "view-transition-name",
            "value": "none | <custom-ident>",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "values": [
                {
                    "name": "none",
                    "prose": "The element will not participate in a view transition.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<custom-ident>",
                    "prose": "The element can participate in a view transition, as either an old or new element, with a view transition name equal to the <custom-ident>'s value.",
                    "type": "value",
                    "value": "<custom-ident>"
                }
            ],
            "styleDeclaration": ["view-transition-name", "viewTransitionName"],
            "styleDeclarationProperty": "viewTransitionName",
            "referenceValues": ["<custom-ident>"]
        },
        "will-change": {
            "name": "will-change",
            "value": "auto | <animateable-feature>#",
            "initial": "auto",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "auto",
                    "prose": "Expresses no particular intent; the user agent should apply whatever heuristics and optimizations it normally does.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "scroll-position",
                    "prose": "Indicates that the author expects to animate or change the scroll position of the element in the near future. For example, browsers often only render the content in the \"scroll window\" on a scrollable element, and some of the content past that window, balancing memory and time savings from the skipped rendering against making scrolling look nice. A browser might take this value as a signal to expand the range of content around the scroll window that is rendered, so that longer/faster scrolls can be done smoothly.",
                    "type": "value",
                    "value": "scroll-position"
                },
                {
                    "name": "contents",
                    "prose": "Indicates that the author expects to animate or change something about the element’s contents in the near future. For example, browsers often “cache” rendering of elements over time, because most things don’t change very often, or only change their position. However, if an element does change its contents continually, producing and maintaining this cache is a waste of time. A browser might take this value as a signal to cache less aggressively on the element, or avoid caching at all and just continually re-render the element from scratch. This value is mostly intended to help browsers optimize JS-based animations of content, which change aspects of an element’s contents many times per second. This kind of optimization, when possible, is already done automatically by browsers when declarative animations are used.",
                    "type": "value",
                    "value": "contents"
                },
                {
                    "name": "<custom-ident>",
                    "prose": "If the <custom-ident> is an ASCII case-insensitive match for the name of a built-in CSS property, it indicates that the author expects to animate or change the property with the given name on the element in the near future. If the property given is a shorthand, it indicates the expectation for all the longhands the shorthand expands to. For example, setting will-change: background; is identical to setting will-change: background-image, background-position, ... for all the properties that background expands into. The <custom-ident> production used here excludes the keywords will-change, none, all, auto, scroll-position, and contents, in addition to the keywords normally excluded from <custom-ident>. Specifying a custom property must have no effect, which means that effects that happen through custom properties do not count for the rules below that are conditioned on any non-initial value of a property causing something. For example, browsers often handle elements with transform set to a non-initial value very differently from normal elements, perhaps rendering them to their own “GPU layer” or using other mechanisms to make it easier to quickly make the sort of transformations that transform can produce. A browser might take a value of transform as a signal that it should go ahead and promote the element to its own layer immediately, before the element starts to be transformed, to avoid any delay involved in rerendering the old and new layers. If any non-initial value of a property would create a stacking context on the element, specifying that property in will-change must create a stacking context on the element. If any non-initial value of a property would cause the element to generate a containing block for absolutely positioned elements, specifying that property in will-change must cause the element to generate a containing block for absolutely positioned elements. If any non-initial value of a property would cause the element to generate a containing block for fixed positioned elements, specifying that property in will-change must cause the element to generate a containing block for fixed positioned elements. If any non-initial value of a property would cause rendering differences on the element (such as using a different anti-aliasing strategy for text), the user agent should use that alternate rendering when the property is specified in will-change, to avoid sudden rendering differences when the property is eventually changed. For example, setting opacity to any value other than 1 creates a stacking context on the element. Thus, setting will-change: opacity also creates a stacking context, even if opacity is currently still equal to 1.",
                    "type": "value",
                    "value": "<custom-ident>"
                }
            ],
            "styleDeclaration": ["will-change", "willChange"],
            "styleDeclarationProperty": "willChange",
            "referenceValues": ["<animateable-feature>#"]
        },
        "direction": {
            "name": "direction",
            "value": "ltr | rtl",
            "initial": "ltr",
            "appliesTo": "all elements",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified value",
            "canonicalOrder": "n/a",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "ltr",
                    "prose": "This value sets inline base direction (bidi directionality) to line-left-to-line-right.",
                    "type": "value",
                    "value": "ltr"
                },
                {
                    "name": "rtl",
                    "prose": "This value sets inline base direction (bidi directionality) to line-right-to-line-left.",
                    "type": "value",
                    "value": "rtl"
                }
            ],
            "styleDeclaration": ["direction"],
            "styleDeclarationProperty": "direction",
            "referenceValues": []
        },
        "unicode-bidi": {
            "name": "unicode-bidi",
            "value": "normal | embed | isolate | bidi-override | isolate-override | plaintext",
            "initial": "normal",
            "appliesTo": "all elements, but see prose",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "specified value",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "normal",
                    "prose": "The box does not open an additional level of embedding with respect to the bidirectional algorithm. For inline boxes, implicit reordering works across box boundaries.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "embed",
                    "prose": "If the box is inline, this value creates a directional embedding by opening an additional level of embedding with respect to the bidirectional algorithm. The direction of this embedding level is given by the direction property. Inside the box, reordering is done implicitly.",
                    "type": "value",
                    "value": "embed"
                },
                {
                    "name": "isolate",
                    "prose": "On an inline box, this bidi-isolates its contents. This is similar to a directional embedding (and increases the embedding level accordingly) except that each sequence of inline-level boxes uninterrupted by any block boundary or forced paragraph break is treated as an isolated sequence: the content within the sequence is ordered as if inside an independent paragraph with the base directionality specified by the box’s direction property. for the purpose of bidi resolution in its containing bidi paragraph, the sequence is treated as if it were a single Object Replacement Character (U+FFFC). In effect, neither is the content inside the box bidi-affected by the content surrounding the box, nor is the content surrounding the box bidi-affected by the content or specified directionality of the box. However, forced paragraph breaks within the box still create a corresponding break in the containing paragraph.",
                    "type": "value",
                    "value": "isolate"
                },
                {
                    "name": "bidi-override",
                    "prose": "This value puts the box’s immediate inline content in a directional override. For an inline, this means that the box acts like a directional embedding in the bidirectional algorithm, except that reordering within it is strictly in sequence according to the direction property; the implicit part of the bidirectional algorithm is ignored. For a block container, the override is applied to an anonymous inline box that surrounds all of its content.",
                    "type": "value",
                    "value": "bidi-override"
                },
                {
                    "name": "isolate-override",
                    "prose": "This combines the isolation behavior of isolate with the directional override behavior of bidi-override: to surrounding content, it is equivalent to isolate, but within the box content is ordered as if bidi-override were specified. It effectively nests a directional override inside an isolated sequence.",
                    "type": "value",
                    "value": "isolate-override"
                },
                {
                    "name": "plaintext",
                    "prose": "This value behaves as isolate except that for the purposes of the Unicode bidirectional algorithm, the base directionality of each of the box’s bidi paragraphs (if a block container) or isolated sequences (if an inline) is determined by following the heuristic in rules P2 and P3 of the Unicode bidirectional algorithm (rather than by using the direction property of the box).",
                    "type": "value",
                    "value": "plaintext"
                }
            ],
            "styleDeclaration": ["unicode-bidi", "unicodeBidi"],
            "styleDeclarationProperty": "unicodeBidi",
            "referenceValues": []
        },
        "writing-mode": {
            "name": "writing-mode",
            "value": "horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr",
            "initial": "horizontal-tb",
            "appliesTo": "All elements except table row groups, table column groups, table rows, table columns, ruby base containers, ruby annotation containers",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified value",
            "canonicalOrder": "n/a",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "horizontal-tb",
                    "prose": "Top-to-bottom block flow direction. Both the writing mode and the typographic mode are horizontal.",
                    "type": "value",
                    "value": "horizontal-tb"
                },
                {
                    "name": "vertical-rl",
                    "prose": "Right-to-left block flow direction. Both the writing mode and the typographic mode are vertical.",
                    "type": "value",
                    "value": "vertical-rl"
                },
                {
                    "name": "vertical-lr",
                    "prose": "Left-to-right block flow direction. Both the writing mode and the typographic mode are vertical.",
                    "type": "value",
                    "value": "vertical-lr"
                },
                {
                    "name": "sideways-rl",
                    "prose": "Right-to-left block flow direction. The writing mode is vertical, while the typographic mode is horizontal.",
                    "type": "value",
                    "value": "sideways-rl"
                },
                {
                    "name": "sideways-lr",
                    "prose": "Left-to-right block flow direction. The writing mode is vertical, while the typographic mode is horizontal.",
                    "type": "value",
                    "value": "sideways-lr"
                }
            ],
            "styleDeclaration": ["writing-mode", "writingMode"],
            "styleDeclarationProperty": "writingMode",
            "referenceValues": []
        },
        "text-orientation": {
            "name": "text-orientation",
            "value": "mixed | upright | sideways",
            "initial": "mixed",
            "appliesTo": "all elements except table row groups, rows, column groups, and columns",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified value",
            "canonicalOrder": "n/a",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "mixed",
                    "prose": "Typographic character units from horizontal-only scripts are typeset sideways, i.e. 90° clockwise from their standard orientation in horizontal text. Typographic character units from vertical scripts are typeset with their intrinsic orientation. See Vertical Orientations for further details. This value is typical for layout of dominantly vertical-script text.",
                    "type": "value",
                    "value": "mixed"
                },
                {
                    "name": "upright",
                    "prose": "Typographic character units from horizontal-only scripts are typeset upright, i.e. in their standard horizontal orientation. Typographic character units from vertical scripts are typeset with their intrinsic orientation and shaped normally. See Vertical Orientations for further details. This value causes the used value of direction to be ltr, and for the purposes of bidi reordering, causes all characters to be treated as strong LTR.",
                    "type": "value",
                    "value": "upright"
                },
                {
                    "name": "sideways",
                    "prose": "Causes all text to be typeset sideways, as if in a horizontal layout, but rotated 90° clockwise.",
                    "type": "value",
                    "value": "sideways"
                },
                {
                    "name": "sideways-right",
                    "prose": "UAs may accept sideways-right as a value that computes to sideways if needed for backward compatibility reasons.",
                    "type": "value",
                    "value": "sideways-right"
                }
            ],
            "styleDeclaration": ["text-orientation", "textOrientation"],
            "styleDeclarationProperty": "textOrientation",
            "referenceValues": []
        },
        "glyph-orientation-vertical": {
            "name": "glyph-orientation-vertical",
            "value": "auto | 0deg | 90deg | 0 | 90",
            "initial": "n/a",
            "appliesTo": "n/a",
            "inherited": "n/a",
            "percentages": "n/a",
            "computedValue": "n/a",
            "canonicalOrder": "n/a",
            "animatable": "n/a",
            "styleDeclaration": [
                "glyph-orientation-vertical",
                "glyphOrientationVertical"
            ],
            "styleDeclarationProperty": "glyphOrientationVertical",
            "referenceValues": []
        },
        "text-combine-upright": {
            "name": "text-combine-upright",
            "value": "none | all | [ digits <integer [2,4]>? ]",
            "initial": "none",
            "appliesTo": "inline boxes and text",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword, plus integer if digits",
            "canonicalOrder": "n/a",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "none",
                    "prose": "No special processing.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "all",
                    "prose": "Attempt to typeset horizontally all consecutive typographic character units within the box and text run such that they take up the space of a single typographic character unit within the vertical line box.",
                    "type": "value",
                    "value": "all"
                },
                {
                    "name": "digits <integer [2,4]>?",
                    "prose": "Attempt to typeset horizontally each maximal sequence of consecutive ASCII digits (U+0030–U+0039) that has as many or fewer digits than the specified integer such that it takes up the space of a single typographic character unit within the vertical line box. If the integer is omitted, it computes to 2. Integers outside the range 2-4 are invalid.",
                    "type": "value",
                    "value": "digits <integer [2,4]>?"
                }
            ],
            "styleDeclaration": ["text-combine-upright", "textCombineUpright"],
            "styleDeclarationProperty": "textCombineUpright",
            "referenceValues": []
        },
        "fill-rule": {
            "name": "fill-rule",
            "value": "nonzero | evenodd",
            "initial": "nonzero",
            "appliesTo": "SVG shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "no",
            "values": [
                {
                    "name": "nonzero",
                    "prose": "This rule determines the “insideness” of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a path segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside the path. Otherwise, it is inside. The effect of a nonzero fill rule on paths with self-intersections and enclosed subpaths.",
                    "type": "value",
                    "value": "nonzero"
                },
                {
                    "name": "evenodd",
                    "prose": "This rule determines the “insideness” of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside. The effect of an evenodd fill rule on paths with self-intersections and enclosed subpaths.",
                    "type": "value",
                    "value": "evenodd"
                }
            ],
            "styleDeclaration": ["fill-rule", "fillRule"],
            "styleDeclarationProperty": "fillRule",
            "referenceValues": []
        },
        "fill-break": {
            "name": "fill-break",
            "value": "bounding-box | slice | clone",
            "initial": "bounding-box",
            "appliesTo": "all elements",
            "inherited": "yes?",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "No",
            "styleDeclaration": ["fill-break", "fillBreak"],
            "styleDeclarationProperty": "fillBreak",
            "referenceValues": []
        },
        "fill-color": {
            "name": "fill-color",
            "value": "<color>",
            "initial": "currentcolor",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "the computed color",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "as color",
            "styleDeclaration": ["fill-color", "fillColor"],
            "styleDeclarationProperty": "fillColor",
            "referenceValues": ["<color>"]
        },
        "fill-image": {
            "name": "fill-image",
            "value": "<paint>#",
            "initial": "none",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "as specified, with any <image> computed",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "as repeatable list of images",
            "styleDeclaration": ["fill-image", "fillImage"],
            "styleDeclarationProperty": "fillImage",
            "referenceValues": ["<paint>#"]
        },
        "fill-origin": {
            "name": "fill-origin",
            "value": "match-parent | fill-box | stroke-box | content-box | padding-box | border-box",
            "initial": "match-parent",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "no",
            "values": [
                {
                    "name": "match-parent",
                    "prose": "Use the same fill positioning area as the parent. If it has no parent, use the initial containing block.",
                    "type": "value",
                    "value": "match-parent"
                },
                {
                    "name": "content-box",
                    "prose": "Use the box’s own content-box/padding-box/border-box as the fill positioning area. For SVG shapes, content-box and padding-box are treated as fill-box, while border-box is treated as stroke-box.",
                    "type": "value",
                    "value": "content-box"
                },
                {
                    "name": "padding-box",
                    "prose": "Use the box’s own content-box/padding-box/border-box as the fill positioning area. For SVG shapes, content-box and padding-box are treated as fill-box, while border-box is treated as stroke-box.",
                    "type": "value",
                    "value": "padding-box"
                },
                {
                    "name": "border-box",
                    "prose": "Use the box’s own content-box/padding-box/border-box as the fill positioning area. For SVG shapes, content-box and padding-box are treated as fill-box, while border-box is treated as stroke-box.",
                    "type": "value",
                    "value": "border-box"
                },
                {
                    "name": "fill-box",
                    "prose": "For SVG shapes or SVG text, use the object bounding box of the element. For CSS boxes, use the bounding box of the text glyph outlines of the element and all in-flow or floated descendants.",
                    "type": "value",
                    "value": "fill-box"
                },
                {
                    "name": "stroke-box",
                    "prose": "For SVG shapes or SVG text, use the stroke bounding box of the element. For CSS boxes, use the bounding box of the text glyph stroke outlines of the element and all in-flow or floated descendants.",
                    "type": "value",
                    "value": "stroke-box"
                }
            ],
            "styleDeclaration": ["fill-origin", "fillOrigin"],
            "styleDeclarationProperty": "fillOrigin",
            "referenceValues": []
        },
        "fill-position": {
            "name": "fill-position",
            "value": "<position>#",
            "initial": "0% 0%",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "A list, each item consisting of: a pair of offsets (horizontal and vertical) from the top left origin each given as a combination of an absolute length and a percentage",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "as repeatable list of simple list of length, percentage, or calc",
            "styleDeclaration": ["fill-position", "fillPosition"],
            "styleDeclarationProperty": "fillPosition",
            "referenceValues": ["<position>#"]
        },
        "fill-size": {
            "name": "fill-size",
            "value": "<bg-size>#",
            "initial": "auto",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "as specified, but with lengths made absolute and omitted auto keywords filled in",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "as repeatable list of simple list of length, percentage, or calc",
            "styleDeclaration": ["fill-size", "fillSize"],
            "styleDeclarationProperty": "fillSize",
            "referenceValues": ["<bg-size>#"]
        },
        "fill-repeat": {
            "name": "fill-repeat",
            "value": "<repeat-style>#",
            "initial": "repeat",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "A list, each item consisting of: two keywords, one per dimension",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "no",
            "styleDeclaration": ["fill-repeat", "fillRepeat"],
            "styleDeclarationProperty": "fillRepeat",
            "referenceValues": ["<repeat-style>#"]
        },
        "fill-opacity": {
            "name": "fill-opacity",
            "value": "<'opacity'>",
            "initial": "1",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "the specified value converted to a <number>, clamped to the range [0,1]",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "as number",
            "styleDeclaration": ["fill-opacity", "fillOpacity"],
            "styleDeclarationProperty": "fillOpacity",
            "referenceValues": ["<'opacity'>"]
        },
        "stroke-width": {
            "name": "stroke-width",
            "value": "[<length-percentage> | <number>]#",
            "initial": "1px",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "relative to the scaled viewport size",
            "computedValue": "the absolute length, or percentage",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "as <length-percentage>",
            "styleDeclaration": ["stroke-width", "strokeWidth"],
            "styleDeclarationProperty": "strokeWidth",
            "referenceValues": ["<number>]#"]
        },
        "stroke-align": {
            "name": "stroke-align",
            "value": "center | inset | outset",
            "initial": "center",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "no",
            "values": [
                {
                    "name": "center",
                    "prose": "The stroke for each subpath is centered on the outline.",
                    "type": "value",
                    "value": "center"
                },
                {
                    "name": "inset",
                    "prose": "The stroke for each subpath lies on the “inside” of the outline (into the fill area). The stroke-linejoin property must be ignored. Why is stroke-linejoin ignored? It’s still needed for interior corners.",
                    "type": "value",
                    "value": "inset"
                },
                {
                    "name": "outset",
                    "prose": "The stroke for each subpath lies on the “outside” of the outline (outside the fill area).",
                    "type": "value",
                    "value": "outset"
                }
            ],
            "styleDeclaration": ["stroke-align", "strokeAlign"],
            "styleDeclarationProperty": "strokeAlign",
            "referenceValues": []
        },
        "stroke-linecap": {
            "name": "stroke-linecap",
            "value": "butt | round | square",
            "initial": "butt",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "no",
            "values": [
                {
                    "name": "butt",
                    "prose": "The stroke for each subpath does not extend beyond its two endpoints. (A zero length subpath will therefore not have any stroke.)",
                    "type": "value",
                    "value": "butt"
                },
                {
                    "name": "round",
                    "prose": "At each end of each subpath, the stroke is extended by a half circle with a radius equal to half the stroke width. (The stroke for a zero-length subpath is a full circle centered at the subpath’s point.)",
                    "type": "value",
                    "value": "round"
                },
                {
                    "name": "square",
                    "prose": "At the end of each subpath, the stroke is extended by a rectangle with the same width as the stroke width and whose length is half of the stroke width. (The stroke for a zero-length subpath is a square with side length equal to the stroke width, centered at the subpath’s point, and oriented such that two of its sides are parallel to the effective tangent at that subpath’s point. See § 4.6 Computing the Shape of the Stroke for details on how to determine the tangent at a zero-length subpath.) Adding a rectangle to the end of dashes on a curved outline looks bad. It should just extend the dash by stroke-width/2, following the outline.",
                    "type": "value",
                    "value": "square"
                }
            ],
            "styleDeclaration": ["stroke-linecap", "strokeLinecap"],
            "styleDeclarationProperty": "strokeLinecap",
            "referenceValues": []
        },
        "stroke-linejoin": {
            "name": "stroke-linejoin",
            "value": "[ crop | arcs | miter ] || [ bevel | round | fallback ]",
            "initial": "miter",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "no",
            "values": [
                {
                    "name": "crop",
                    "prose": "The stroke extends the minimal amount past the corner necessary to form a convex corner. This acts identically to miter, but forces stroke-miterlimit to behave as if it had its minimum value of 1.",
                    "type": "value",
                    "value": "crop"
                },
                {
                    "name": "miter",
                    "prose": "A sharp corner is used to join path segments. The corner is formed by extending the outer edges of the stroke at the tangents of the path segments until they intersect.",
                    "type": "value",
                    "value": "miter"
                },
                {
                    "name": "arcs",
                    "prose": "An arcs corner is used to join path segments. The arcs shape is formed by extending the outer edges of the stroke at the join point with arcs that have the same curvature as the outer edges at the join point.",
                    "type": "value",
                    "value": "arcs"
                },
                {
                    "name": "bevel",
                    "prose": "The corner is cropped at the stroke-miterlimit by the perpendicular to its diagonal.",
                    "type": "value",
                    "value": "bevel"
                },
                {
                    "name": "round",
                    "prose": "The corner is cropped as for bevel, and a filled arc tangent to the truncated stroke edges is appended to round the corner.",
                    "type": "value",
                    "value": "round"
                },
                {
                    "name": "fallback",
                    "prose": "When the stroke-miterlimit is exceeded, this behaves as if crop bevel were specified. Can we just remove fallback? It’s a stupid value, useful only because we didn’t have the clip-at-miterlimit behavior in SVG1. Question is if people are mostly just *accidentally* getting the bevel behavior right now, and would be okay with their joins extending up to the miterlimit and only getting the excess corners clipped, or if they actually wanted the discontinuous behavior currently specified. The breakpoint is between 29 and 30 degrees.",
                    "type": "value",
                    "value": "fallback"
                }
            ],
            "styleDeclaration": ["stroke-linejoin", "strokeLinejoin"],
            "styleDeclarationProperty": "strokeLinejoin",
            "referenceValues": []
        },
        "stroke-miterlimit": {
            "name": "stroke-miterlimit",
            "value": "<number>",
            "initial": "4",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "a number",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "no",
            "values": [
                {
                    "name": "<number>",
                    "prose": "Specifies the limit on the join’s size as a ratio of its diagonal to the stroke-width. Values less than 1 are invalid (and make the declaration invalid). For a miter linejoin, the length of the diagonal is calculated from the angle between the two segments as stroke-width / sin(θ/2). The linejoin is clipped perpendicular to the line bisecting the angle between the two path segments. For an arcs linejoin, the length of the diagonal is calculated along a circular arc that is tangent to the line bisecting the angle between the two segments at the point the two segments intersect and passes through the end point of the join. The linejoin is clipped perpendicular to this arc.",
                    "type": "value",
                    "value": "<number>"
                }
            ],
            "styleDeclaration": ["stroke-miterlimit", "strokeMiterlimit"],
            "styleDeclarationProperty": "strokeMiterlimit",
            "referenceValues": ["<number>"]
        },
        "stroke-break": {
            "name": "stroke-break",
            "value": "bounding-box | slice | clone",
            "initial": "bounding-box",
            "appliesTo": "all elements",
            "inherited": "?",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "No",
            "styleDeclaration": ["stroke-break", "strokeBreak"],
            "styleDeclarationProperty": "strokeBreak",
            "referenceValues": []
        },
        "stroke-dasharray": {
            "name": "stroke-dasharray",
            "value": "none | [<length-percentage> | <number>]+#",
            "initial": "none",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "relative to the scaled viewport size",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "as repeated list of length, percentage or calc",
            "values": [
                {
                    "name": "none",
                    "prose": "No dashing: the stroke is drawn continuously.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<length-percentage>+#",
                    "prose": "Specifies a dashing pattern to use. Each <length-percentage> value represents the length of the next dash or gap (beginning with the first dash and alternating from there) of the stroke. The pattern repeats over the length of the stroke. (If the number of values is odd, the pattern behaves as if it was duplicated to yield an even number of values.) The dashing pattern is reset and begins anew at the start of each subpath. Negative values are invalid. If all values are zero, it is treated as none.",
                    "type": "value",
                    "value": "<length-percentage>+#"
                }
            ],
            "styleDeclaration": ["stroke-dasharray", "strokeDasharray"],
            "styleDeclarationProperty": "strokeDasharray",
            "referenceValues": ["<number>]+#"]
        },
        "stroke-dashoffset": {
            "name": "stroke-dashoffset",
            "value": "<length-percentage> | <number>",
            "initial": "0",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "relative to the scaled viewport size",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "as repeated list of integers",
            "styleDeclaration": ["stroke-dashoffset", "strokeDashoffset"],
            "styleDeclarationProperty": "strokeDashoffset",
            "referenceValues": ["<length-percentage>", "<number>"]
        },
        "stroke-dash-corner": {
            "name": "stroke-dash-corner",
            "value": "none | <length>",
            "initial": "none",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified value, with lengths made absolute",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "yes, if <length>",
            "values": [
                {
                    "name": "none",
                    "prose": "This property has no special effect on dashing: the dashes are positioned/sized continuously along the path.",
                    "type": "value",
                    "value": "none"
                }
            ],
            "styleDeclaration": ["stroke-dash-corner", "strokeDashCorner"],
            "styleDeclarationProperty": "strokeDashCorner",
            "referenceValues": ["<length>"]
        },
        "stroke-dash-justify": {
            "name": "stroke-dash-justify",
            "value": "none | [ stretch | compress ] || [ dashes || gaps ]",
            "initial": "none",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "specified value, with lengths made absolute",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "no",
            "values": [
                {
                    "name": "none",
                    "prose": "No adjustment of the dash pattern is made: it’s clipped at the end of the subpath with however much progress it made to that point.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "stretch",
                    "prose": "Indicates that when the dash pattern does not fit into a subpath a whole number times, the dashes or gaps (or both) will be lengthened so that it does.",
                    "type": "value",
                    "value": "stretch"
                },
                {
                    "name": "compress",
                    "prose": "Indicates that when the dash pattern does not fit into a subpath a whole number times, the dashes or gaps (or both) will be shortened so that it does.",
                    "type": "value",
                    "value": "compress"
                },
                {
                    "name": "dashes",
                    "prose": "Indicates that when a dash pattern is to be stretched or compressed, the length of the dashes will be adjusted.",
                    "type": "value",
                    "value": "dashes"
                },
                {
                    "name": "gaps",
                    "prose": "Indicates that when a dash pattern is to be stretched or compressed, the length of the gaps will be adjusted.",
                    "type": "value",
                    "value": "gaps"
                }
            ],
            "styleDeclaration": ["stroke-dash-justify", "strokeDashJustify"],
            "styleDeclarationProperty": "strokeDashJustify",
            "referenceValues": []
        },
        "stroke-color": {
            "name": "stroke-color",
            "value": "<color>#",
            "initial": "transparent",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "the computed color",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "as color",
            "styleDeclaration": ["stroke-color", "strokeColor"],
            "styleDeclarationProperty": "strokeColor",
            "referenceValues": ["<color>#"]
        },
        "stroke-image": {
            "name": "stroke-image",
            "value": "<paint>#",
            "initial": "none",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "as specified, with any <image> computed",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "as repeatable list of images",
            "styleDeclaration": ["stroke-image", "strokeImage"],
            "styleDeclarationProperty": "strokeImage",
            "referenceValues": ["<paint>#"]
        },
        "stroke-origin": {
            "name": "stroke-origin",
            "value": "match-parent | fill-box | stroke-box | content-box | padding-box | border-box",
            "initial": "match-parent",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "N/A",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "no",
            "values": [
                {
                    "name": "match-parent",
                    "prose": "Use the same stroke positioning area as the parent. If it has no parent, use the initial containing block.",
                    "type": "value",
                    "value": "match-parent"
                },
                {
                    "name": "content-box",
                    "prose": "Use the box’s own content-box/padding-box/border-box as the stroke positioning area. For SVG shapes, content-box and padding-box are treated as fill-box, while border-box is treated as stroke-box.",
                    "type": "value",
                    "value": "content-box"
                },
                {
                    "name": "padding-box",
                    "prose": "Use the box’s own content-box/padding-box/border-box as the stroke positioning area. For SVG shapes, content-box and padding-box are treated as fill-box, while border-box is treated as stroke-box.",
                    "type": "value",
                    "value": "padding-box"
                },
                {
                    "name": "border-box",
                    "prose": "Use the box’s own content-box/padding-box/border-box as the stroke positioning area. For SVG shapes, content-box and padding-box are treated as fill-box, while border-box is treated as stroke-box.",
                    "type": "value",
                    "value": "border-box"
                },
                {
                    "name": "fill-box",
                    "prose": "For SVG shapes or SVG text, use the object bounding box of the element. For CSS boxes, use the bounding box of the text glyph outlines of the element and all in-flow or floated descendants.",
                    "type": "value",
                    "value": "fill-box"
                },
                {
                    "name": "stroke-box",
                    "prose": "For SVG shapes or SVG text, use the stroke bounding box of the element. For CSS boxes, use the bounding box of the text glyph stroke outlines of the element and all in-flow or floated descendants.",
                    "type": "value",
                    "value": "stroke-box"
                }
            ],
            "styleDeclaration": ["stroke-origin", "strokeOrigin"],
            "styleDeclarationProperty": "strokeOrigin",
            "referenceValues": []
        },
        "stroke-position": {
            "name": "stroke-position",
            "value": "<position>#",
            "initial": "0% 0%",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "A list, each item consisting of: a pair of offsets (horizontal and vertical) from the top left origin each given as a combination of an absolute length and a percentage",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "as repeatable list of simple list of length, percentage, or calc",
            "styleDeclaration": ["stroke-position", "strokePosition"],
            "styleDeclarationProperty": "strokePosition",
            "referenceValues": ["<position>#"]
        },
        "stroke-size": {
            "name": "stroke-size",
            "value": "<bg-size>#",
            "initial": "auto",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "as specified, but with lengths made absolute and omitted auto keywords filled in",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "as repeatable list of simple list of length, percentage, or calc",
            "styleDeclaration": ["stroke-size", "strokeSize"],
            "styleDeclarationProperty": "strokeSize",
            "referenceValues": ["<bg-size>#"]
        },
        "stroke-repeat": {
            "name": "stroke-repeat",
            "value": "<repeat-style>#",
            "initial": "repeat",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "A list, each item consisting of: two keywords, one per dimension",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "no",
            "styleDeclaration": ["stroke-repeat", "strokeRepeat"],
            "styleDeclarationProperty": "strokeRepeat",
            "referenceValues": ["<repeat-style>#"]
        },
        "stroke-opacity": {
            "name": "stroke-opacity",
            "value": "<'opacity'>",
            "initial": "1",
            "appliesTo": "text and SVG shapes",
            "inherited": "yes",
            "percentages": "N/A",
            "computedValue": "the specified value converted to a <number>, clamped to the range [0,1]",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "as number",
            "styleDeclaration": ["stroke-opacity", "strokeOpacity"],
            "styleDeclarationProperty": "strokeOpacity",
            "referenceValues": ["<'opacity'>"]
        },
        "backdrop-filter": {
            "name": "backdrop-filter",
            "value": "none | <filter-value-list>",
            "initial": "none",
            "appliesTo": "All elements. In SVG, it applies to container elements without the defs element and all graphics elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "media": "visual",
            "animatable": "yes",
            "styleDeclaration": ["backdrop-filter", "backdropFilter"],
            "styleDeclarationProperty": "backdropFilter",
            "referenceValues": ["<filter-value-list>"]
        },
        "filter": {
            "name": "filter",
            "value": "none | <filter-value-list>",
            "initial": "none",
            "appliesTo": "All elements. In SVG, it applies to container elements without the defs element, all graphics elements and the use element.",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "See prose in Animation of Filters.",
            "media": "visual",
            "values": [
                {
                    "name": "<url>",
                    "prose": "A filter reference to a filter element. For example url(commonfilters.svg#filter). If the filter references a non-existent object or the referenced object is not a filter element, then the whole filter chain is ignored. No filter is applied to the object.",
                    "type": "type"
                },
                {
                    "name": "blur()",
                    "type": "function",
                    "value": "blur( <length>? )"
                },
                {
                    "name": "brightness()",
                    "type": "function",
                    "value": "brightness( [ <number> | <percentage> ]? )"
                },
                {
                    "name": "contrast()",
                    "type": "function",
                    "value": "contrast( [ <number> | <percentage> ]? )"
                },
                {
                    "name": "drop-shadow()",
                    "type": "function",
                    "value": "drop-shadow( [ <color>? && <length>{2,3} ] )"
                },
                {
                    "name": "grayscale()",
                    "type": "function",
                    "value": "grayscale( [ <number> | <percentage> ]? )"
                },
                {
                    "name": "hue-rotate()",
                    "type": "function",
                    "value": "hue-rotate( [ <angle> | <zero> ]? )"
                },
                {
                    "name": "invert()",
                    "type": "function",
                    "value": "invert( [ <number> | <percentage> ]? )"
                },
                {
                    "name": "opacity()",
                    "type": "function",
                    "value": "opacity( [ <number> | <percentage> ]? )"
                },
                {
                    "name": "saturate()",
                    "type": "function",
                    "value": "saturate( [ <number> | <percentage> ]? )"
                },
                {
                    "name": "sepia()",
                    "type": "function",
                    "value": "sepia( [ <number> | <percentage> ]? )"
                }
            ],
            "styleDeclaration": ["filter"],
            "styleDeclarationProperty": "filter",
            "referenceValues": ["<filter-value-list>"]
        },
        "flood-color": {
            "name": "flood-color",
            "value": "<color>",
            "initial": "black",
            "appliesTo": "feFlood and feDropShadow elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "media": "visual",
            "styleDeclaration": ["flood-color", "floodColor"],
            "styleDeclarationProperty": "floodColor",
            "referenceValues": ["<color>"]
        },
        "flood-opacity": {
            "name": "flood-opacity",
            "value": "<alpha-value>",
            "initial": "1",
            "appliesTo": "feFlood and feDropShadow elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the specified value converted to a number, clamped to the range [0,1]",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "media": "visual",
            "styleDeclaration": ["flood-opacity", "floodOpacity"],
            "styleDeclarationProperty": "floodOpacity",
            "referenceValues": ["<alpha-value>"]
        },
        "color-interpolation-filters": {
            "name": "color-interpolation-filters",
            "value": "auto | sRGB | linearRGB",
            "initial": "linearRGB",
            "appliesTo": "All filter primitives",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "discrete",
            "media": "visual",
            "values": [
                {
                    "name": "auto",
                    "prose": "Indicates that the user agent can choose either the sRGB or linearRGB spaces for filter effects color operations. This option indicates that the author doesn’t require that color operations occur in a particular color space.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "sRGB",
                    "prose": "Indicates that filter effects color operations should occur in the gamma-encoded sRGB color space.",
                    "type": "value",
                    "value": "sRGB"
                },
                {
                    "name": "linearRGB",
                    "prose": "Indicates that filter effects color operations should occur in the linear-light sRGB color space.",
                    "type": "value",
                    "value": "linearRGB"
                }
            ],
            "styleDeclaration": [
                "color-interpolation-filters",
                "colorInterpolationFilters"
            ],
            "styleDeclarationProperty": "colorInterpolationFilters",
            "referenceValues": []
        },
        "lighting-color": {
            "name": "lighting-color",
            "value": "<color>",
            "initial": "white",
            "appliesTo": "feDiffuseLighting and feSpecularLighting elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "media": "visual",
            "styleDeclaration": ["lighting-color", "lightingColor"],
            "styleDeclarationProperty": "lightingColor",
            "referenceValues": ["<color>"]
        },
        "math-style": {
            "name": "math-style",
            "value": "normal | compact",
            "initial": "normal",
            "appliesTo": "All elements",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "n/a",
            "animationType": "not animatable",
            "media": "visual",
            "styleDeclaration": ["math-style", "mathStyle"],
            "styleDeclarationProperty": "mathStyle",
            "referenceValues": []
        },
        "math-shift": {
            "name": "math-shift",
            "value": "normal | compact",
            "initial": "normal",
            "appliesTo": "All elements",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "specified keyword",
            "canonicalOrder": "n/a",
            "animationType": "not animatable",
            "media": "visual",
            "styleDeclaration": ["math-shift", "mathShift"],
            "styleDeclarationProperty": "mathShift",
            "referenceValues": []
        },
        "math-depth": {
            "name": "math-depth",
            "value": "auto-add | add(<integer>) | <integer>",
            "initial": "0",
            "appliesTo": "All elements",
            "inherited": "yes",
            "percentages": "n/a",
            "computedValue": "an integer, see below",
            "canonicalOrder": "n/a",
            "animationType": "not animatable",
            "media": "visual",
            "styleDeclaration": ["math-depth", "mathDepth"],
            "styleDeclarationProperty": "mathDepth",
            "referenceValues": ["<integer>"]
        },
        "offset-path": {
            "name": "offset-path",
            "value": "none | <offset-path> || <coord-box>",
            "initial": "none",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "as specified",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "media": "visual",
            "values": [
                {
                    "name": "none",
                    "prose": "The element does not have an offset transform.",
                    "type": "value",
                    "value": "none"
                },
                {
                    "name": "<offset-path> || <coord-box>",
                    "prose": "The element has an offset transform, defined by some offset path. See § 2.7 Calculating The Offset Transform for details on how to calculate the offset transform. All the usual effects of having a transform apply (such as creating a stacking context, etc.) See CSS Transforms 1 § 2 The Transform Rendering Model for details. If <offset-path> is omitted, it defaults to inset(0 round X), where X is the value of border-radius on the element that establishes the containing block for this element. If <coord-box> is omitted, it defaults to border-box. See the specific values (below) for the interpretation of each component.",
                    "type": "value",
                    "value": "<offset-path> || <coord-box>"
                },
                {
                    "name": "<ray()>",
                    "prose": "The offset path is a line extending from the offset starting position at some angle. See § 2.1.1 The ray() Function for details. The <coord-box> provides the reference box for the ray.",
                    "type": "value",
                    "value": "<ray()>"
                },
                {
                    "name": "<url>",
                    "prose": "A URL reference to an SVG shape element. The offset path is the referenced element’s equivalent path. [SVG2] If the URL does not reference a shape element (because it references a different element, or resolves to a non-SVG document, or doesn’t resolve at all, etc) this behaves as path(\"m 0 0\") (a <basic-shape>) instead. The <coord-box> defines the viewport and user coordinate system for the shape element, with the origin (the 0,0 point) at the top left corner, and units being 1px in size.",
                    "type": "value",
                    "value": "<url>"
                },
                {
                    "name": "<basic-shape>",
                    "prose": "The offset path is the equivalent path of the <basic-shape> function. If circle() or ellipse() is used, and an explicit center position is not given, they default to using the offset starting position, rather than their standard default. The <coord-box> provides the [=/reference box=] for the <basic-shape>.",
                    "type": "value",
                    "value": "<basic-shape>"
                },
                {
                    "name": "<coord-box>",
                    "prose": "Defines the box that the <offset-path> sizes into. In CSS contexts, the boxes being referenced are from the element that establishes the containing block for this element. In SVG contexts, all values behave as view-box.",
                    "type": "value",
                    "value": "<coord-box>"
                }
            ],
            "styleDeclaration": ["offset-path", "offsetPath"],
            "styleDeclarationProperty": "offsetPath",
            "referenceValues": ["<offset-path>", "<coord-box>"]
        },
        "offset-distance": {
            "name": "offset-distance",
            "value": "<length-percentage>",
            "initial": "0",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "relative to the offset path length",
            "computedValue": "a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "media": "visual",
            "styleDeclaration": ["offset-distance", "offsetDistance"],
            "styleDeclarationProperty": "offsetDistance",
            "referenceValues": ["<length-percentage>"]
        },
        "offset-position": {
            "name": "offset-position",
            "value": "auto | <position>",
            "initial": "auto",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "Refer to the size of containing block",
            "computedValue": "The auto keyword or a computed <position>",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "media": "visual",
            "values": [
                {
                    "name": "auto",
                    "prose": "The offset starting position is the top-left corner of the box.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<position>",
                    "prose": "The offset starting position is the result of using the <position> to position a 0x0 object area within the box’s containing block.",
                    "type": "value",
                    "value": "<position>"
                }
            ],
            "styleDeclaration": ["offset-position", "offsetPosition"],
            "styleDeclarationProperty": "offsetPosition",
            "referenceValues": ["<position>"]
        },
        "offset-anchor": {
            "name": "offset-anchor",
            "value": "auto | <position>",
            "initial": "auto",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "relative to the width and the height of the element’s reference box",
            "computedValue": "the auto keyword or a computed <position>",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "media": "visual",
            "values": [
                {
                    "name": "auto",
                    "prose": "The anchor point is the same as the point indicated by transform-origin. Specifically, the computed value of transform-origin is resolved as a <position> against the element’s reference box.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<position>",
                    "prose": "The anchor point is the result of resolving the <position> against the element’s reference box.",
                    "type": "value",
                    "value": "<position>"
                }
            ],
            "styleDeclaration": ["offset-anchor", "offsetAnchor"],
            "styleDeclarationProperty": "offsetAnchor",
            "referenceValues": ["<position>"]
        },
        "offset-rotate": {
            "name": "offset-rotate",
            "value": "[ auto | reverse ] || <angle>",
            "initial": "auto",
            "appliesTo": "transformable elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "computed <angle> value, optionally preceded by auto",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value",
            "media": "visual",
            "values": [
                {
                    "name": "auto",
                    "prose": "The offset transform will have a rotation component equal to the difference between the offset path’s direction at the offset position and the direction of the positive X axis (that is, a line going toward the right). See SVG’s direction of a path for details on how to calculate this. If specified with an <angle>, the angle is added to the rotation component.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "reverse",
                    "prose": "Identical to auto, but adds an additional 180deg to the rotation.",
                    "type": "value",
                    "value": "reverse"
                },
                {
                    "name": "<angle>",
                    "prose": "When specified on its own, adds a rotation component to the offset transform of the specified angle. (That is, offset-rotate: 45deg; is similar to transform: rotate(45deg); it’s just ordered to be part of the offset transform.)",
                    "type": "value",
                    "value": "<angle>"
                }
            ],
            "styleDeclaration": ["offset-rotate", "offsetRotate"],
            "styleDeclarationProperty": "offsetRotate",
            "referenceValues": ["<angle>"]
        },
        "offset": {
            "name": "offset",
            "value": "[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?",
            "initial": "see individual properties",
            "appliesTo": "transformable elements",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["offset"],
            "styleDeclarationProperty": "offset",
            "referenceValues": [
                "<'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?"
            ]
        },
        "scroll-timeline-name": {
            "name": "scroll-timeline-name",
            "value": "none | <custom-ident>#",
            "initial": "none",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the keyword none or a list of <custom-ident>s",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "styleDeclaration": ["scroll-timeline-name", "scrollTimelineName"],
            "styleDeclarationProperty": "scrollTimelineName",
            "referenceValues": ["<custom-ident>#"]
        },
        "scroll-timeline-axis": {
            "name": "scroll-timeline-axis",
            "value": "[ block | inline | vertical | horizontal ]#",
            "initial": "block",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "a list of the keywords specified",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "block",
                    "prose": "Specifies to use the measure of progress along the block axis of the scroll container. (Default.)",
                    "type": "value",
                    "value": "block"
                },
                {
                    "name": "inline",
                    "prose": "Specifies to use the measure of progress along the inline axis of the scroll container.",
                    "type": "value",
                    "value": "inline"
                },
                {
                    "name": "vertical",
                    "prose": "Specifies to use the measure of progress along the vertical axis of the scroll container.",
                    "type": "value",
                    "value": "vertical"
                },
                {
                    "name": "horizontal",
                    "prose": "Specifies to use the measure of progress along the horizontal axis of the scroll container.",
                    "type": "value",
                    "value": "horizontal"
                },
                {
                    "name": "nearest",
                    "prose": "Specifies to use the nearest ancestor scroll container. (Default.)",
                    "type": "value",
                    "value": "nearest"
                },
                {
                    "name": "root",
                    "prose": "Specifies to use the document viewport as the scroll container.",
                    "type": "value",
                    "value": "root"
                },
                {
                    "name": "self",
                    "prose": "Specifies to use the element’s own principal box as the scroll container. If the principal box is not a scroll container, then the scroll progress timeline is inactive.",
                    "type": "value",
                    "value": "self"
                }
            ],
            "styleDeclaration": ["scroll-timeline-axis", "scrollTimelineAxis"],
            "styleDeclarationProperty": "scrollTimelineAxis",
            "referenceValues": []
        },
        "scroll-timeline": {
            "name": "scroll-timeline",
            "value": "[ <'scroll-timeline-name'> <'scroll-timeline-axis'>? ]#",
            "initial": "see individual properties",
            "appliesTo": "scroll containers",
            "inherited": "no",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "not animatable",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["scroll-timeline", "scrollTimeline"],
            "styleDeclarationProperty": "scrollTimeline",
            "referenceValues": []
        },
        "view-timeline-name": {
            "name": "view-timeline-name",
            "value": "none | <custom-ident>#",
            "initial": "none",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "the keyword none or a list of <custom-ident>s",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "styleDeclaration": ["view-timeline-name", "viewTimelineName"],
            "styleDeclarationProperty": "viewTimelineName",
            "referenceValues": ["<custom-ident>#"]
        },
        "view-timeline-axis": {
            "name": "view-timeline-axis",
            "value": "[ block | inline | vertical | horizontal ]#",
            "initial": "block",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "n/a",
            "computedValue": "a list of the keywords specified",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "block",
                    "prose": "Specifies to use the measure of progress along the block axis of the scroll container. (Default.)",
                    "type": "value",
                    "value": "block"
                },
                {
                    "name": "inline",
                    "prose": "Specifies to use the measure of progress along the inline axis of the scroll container.",
                    "type": "value",
                    "value": "inline"
                },
                {
                    "name": "vertical",
                    "prose": "Specifies to use the measure of progress along the vertical axis of the scroll container.",
                    "type": "value",
                    "value": "vertical"
                },
                {
                    "name": "horizontal",
                    "prose": "Specifies to use the measure of progress along the horizontal axis of the scroll container.",
                    "type": "value",
                    "value": "horizontal"
                },
                {
                    "name": "nearest",
                    "prose": "Specifies to use the nearest ancestor scroll container. (Default.)",
                    "type": "value",
                    "value": "nearest"
                },
                {
                    "name": "root",
                    "prose": "Specifies to use the document viewport as the scroll container.",
                    "type": "value",
                    "value": "root"
                },
                {
                    "name": "self",
                    "prose": "Specifies to use the element’s own principal box as the scroll container. If the principal box is not a scroll container, then the scroll progress timeline is inactive.",
                    "type": "value",
                    "value": "self"
                }
            ],
            "styleDeclaration": ["view-timeline-axis", "viewTimelineAxis"],
            "styleDeclarationProperty": "viewTimelineAxis",
            "referenceValues": []
        },
        "view-timeline-inset": {
            "name": "view-timeline-inset",
            "value": "[ [ auto | <length-percentage> ]{1,2} ]#",
            "initial": "0",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "relative to the corresponding dimension of the relevant scrollport",
            "computedValue": "a list consisting of two-value pairs representing the start and end insets each as either the keyword auto or a computed <length-percentage> value",
            "canonicalOrder": "per grammar",
            "animationType": "by computed value type",
            "values": [
                {
                    "name": "auto",
                    "prose": "Indicates to use the value of scroll-padding.",
                    "type": "value",
                    "value": "auto"
                },
                {
                    "name": "<length-percentage>",
                    "prose": "Like scroll-padding, defines an inward offset from the corresponding edge of the scrollport.",
                    "type": "value",
                    "value": "<length-percentage>"
                }
            ],
            "styleDeclaration": ["view-timeline-inset", "viewTimelineInset"],
            "styleDeclarationProperty": "viewTimelineInset",
            "referenceValues": ["<length-percentage> ]{1,2} ]#"]
        },
        "view-timeline": {
            "name": "view-timeline",
            "value": "[ <'view-timeline-name'> <'view-timeline-axis'>? ]#",
            "initial": "see individual properties",
            "appliesTo": "all elements",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["view-timeline", "viewTimeline"],
            "styleDeclarationProperty": "viewTimeline",
            "referenceValues": []
        },
        "animation-range": {
            "name": "animation-range",
            "value": "[ <'animation-range-start'> <'animation-range-end'>? ]#",
            "initial": "see individual properties",
            "appliesTo": "see individual properties",
            "inherited": "see individual properties",
            "percentages": "see individual properties",
            "computedValue": "see individual properties",
            "animationType": "see individual properties",
            "canonicalOrder": "per grammar",
            "styleDeclaration": ["animation-range", "animationRange"],
            "styleDeclarationProperty": "animationRange",
            "referenceValues": []
        },
        "animation-range-start": {
            "name": "animation-range-start",
            "value": "[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#",
            "initial": "normal",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "relative to the specified named timeline range if one was specified, else to the entire timeline",
            "computedValue": "list, each item either the keyword normal or a timeline range and progress percentage",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "normal",
                    "prose": "The start of the animation’s active interval is determined as normal.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "<length-percentage>",
                    "prose": "The active interval starts at the specified point on the timeline measuring from the start of the timeline, plus any applicable start delay.",
                    "type": "value",
                    "value": "<length-percentage>"
                },
                {
                    "name": "<timeline-range-name> <length-percentage>?",
                    "prose": "The active interval starts at the specified point on the timeline measuring from the start of the specified named timeline range, plus any applicable start delay.",
                    "type": "value",
                    "value": "<timeline-range-name> <length-percentage>?"
                }
            ],
            "styleDeclaration": [
                "animation-range-start",
                "animationRangeStart"
            ],
            "styleDeclarationProperty": "animationRangeStart",
            "referenceValues": [
                "<length-percentage>",
                "<timeline-range-name> <length-percentage>? ]#"
            ]
        },
        "animation-range-end": {
            "name": "animation-range-end",
            "value": "[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#",
            "initial": "normal",
            "appliesTo": "all elements",
            "inherited": "no",
            "percentages": "relative to the specified named timeline range if one was specified, else to the entire timeline",
            "computedValue": "list, each item either the keyword normal or a timeline range and progress percentage",
            "canonicalOrder": "per grammar",
            "animationType": "not animatable",
            "values": [
                {
                    "name": "normal",
                    "prose": "The end of the animation’s active interval is determined as normal.",
                    "type": "value",
                    "value": "normal"
                },
                {
                    "name": "<length-percentage>",
                    "prose": "The active interval ends at the specified point on the timeline measuring from the start of the timeline, minus any applicable end delay.",
                    "type": "value",
                    "value": "<length-percentage>"
                },
                {
                    "name": "<timeline-range-name> <length-percentage>?",
                    "prose": "The active interval ends at the specified point on the timeline measuring from the start of the specified named timeline range, minus any applicable end delay.",
                    "type": "value",
                    "value": "<timeline-range-name> <length-percentage>?"
                }
            ],
            "styleDeclaration": ["animation-range-end", "animationRangeEnd"],
            "styleDeclarationProperty": "animationRangeEnd",
            "referenceValues": [
                "<length-percentage>",
                "<timeline-range-name> <length-percentage>? ]#"
            ]
        },
        "stroke-alignment": {
            "name": "stroke-alignment",
            "value": "center | inner | outer",
            "initial": "center",
            "appliesTo": "shapes and text content elements",
            "inherited": "yes",
            "percentages": "N/A",
            "media": "visual",
            "computed value": "as specified",
            "animatable": "yes",
            "styleDeclaration": ["stroke-alignment", "strokeAlignment"],
            "styleDeclarationProperty": "strokeAlignment",
            "referenceValues": []
        },
        "stroke-dashcorner": {
            "name": "stroke-dashcorner",
            "value": "none | <length>",
            "initial": "none",
            "appliesTo": "shapes and text content elements",
            "inherited": "yes",
            "percentages": "refer to the size of the current viewport (see Units)",
            "media": "visual",
            "computed value": "absolute length or keyword specified",
            "animatable": "yes",
            "styleDeclaration": ["stroke-dashcorner", "strokeDashcorner"],
            "styleDeclarationProperty": "strokeDashcorner",
            "referenceValues": ["<length>"]
        },
        "stroke-dashadjust": {
            "name": "stroke-dashadjust",
            "value": "none | [stretch | compress] [dashes | gaps]?",
            "initial": "none",
            "appliesTo": "shapes and text content elements",
            "inherited": "yes",
            "percentages": "N/A",
            "media": "visual",
            "computed value": "as specified",
            "animatable": "yes",
            "styleDeclaration": ["stroke-dashadjust", "strokeDashadjust"],
            "styleDeclarationProperty": "strokeDashadjust",
            "referenceValues": []
        }
    }
}
